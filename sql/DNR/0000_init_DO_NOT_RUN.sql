--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.1
-- Dumped by pg_dump version 9.6.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- Name: livequery_simple_pg_25Bn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_25Bn"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_25Bn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_2Duc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_2Duc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_2Duc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_2KrT(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_2KrT"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_2KrT',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_2bAZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_2bAZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_2bAZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_2sS2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_2sS2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_2sS2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_2uGY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_2uGY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_2uGY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_2uRy(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_2uRy"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_2uRy',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_2v3o(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_2v3o() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_2v3o',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_39N4(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_39N4"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_39N4',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_39Yx(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_39Yx"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_39Yx',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_3Hcj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_3Hcj"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_3Hcj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_3J54(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_3J54"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_3J54',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_3KXt(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_3KXt"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_3KXt',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_3MKM(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_3MKM"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_3MKM',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_3Ttk(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_3Ttk"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_3Ttk',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_3bNn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_3bNn"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_3bNn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_3odS(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_3odS"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_3odS',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_3qvB(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_3qvB"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_3qvB',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_4iS6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_4iS6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_4iS6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_4tw3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_4tw3() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_4tw3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_4xZe(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_4xZe"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_4xZe',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_53GJ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_53GJ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_53GJ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_54zh(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_54zh() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_54zh',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_55Sc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_55Sc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_55Sc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_56sk(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_56sk() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_56sk',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_583J(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_583J"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_583J',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5Gf2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_5Gf2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5Gf2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5YLs(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_5YLs"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5YLs',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5gW6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_5gW6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5gW6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5hXB(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_5hXB"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5hXB',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5iZ2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_5iZ2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5iZ2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5pC3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_5pC3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5pC3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5tSr(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_5tSr"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5tSr',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5uP3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_5uP3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5uP3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_5yzw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_5yzw() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_5yzw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6Cuk(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_6Cuk"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6Cuk',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6Rrs(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_6Rrs"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6Rrs',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6Xnz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_6Xnz"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6Xnz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6cFQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_6cFQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6cFQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6cit(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_6cit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6cit',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6ctN(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_6ctN"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6ctN',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6mKu(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_6mKu"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6mKu',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6mf9(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_6mf9() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6mf9',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_6z9r(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_6z9r() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_6z9r',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_73Xs(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_73Xs"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_73Xs',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_73e9(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_73e9() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_73e9',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_74dn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_74dn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_74dn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_75BD(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_75BD"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_75BD',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_78YR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_78YR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_78YR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_7AZc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_7AZc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_7AZc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_7Md3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_7Md3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_7Md3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_7PWj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_7PWj"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_7PWj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_8Dzk(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_8Dzk"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_8Dzk',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_8Npz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_8Npz"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_8Npz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_8fkx(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_8fkx() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_8fkx',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_8hA6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_8hA6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_8hA6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_8hGg(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_8hGg"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_8hGg',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_8ivj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_8ivj() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_8ivj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_98Sz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_98Sz"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_98Sz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_9QEh(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_9QEh"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_9QEh',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_9v64(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_9v64() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_9v64',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_9xTQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_9xTQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_9xTQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_A4Yw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_A4Yw"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_A4Yw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_A7mx(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_A7mx"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_A7mx',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_AEKz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_AEKz"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_AEKz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_AZLX(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_AZLX"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_AZLX',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Ab5n(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Ab5n"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Ab5n',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_AgZN(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_AgZN"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_AgZN',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_AwjX(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_AwjX"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_AwjX',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Ayzt(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Ayzt"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Ayzt',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_BCXi(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_BCXi"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_BCXi',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_BDao(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_BDao"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_BDao',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_BPdc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_BPdc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_BPdc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_BaBh(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_BaBh"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_BaBh',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_BaTT(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_BaTT"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_BaTT',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Bk4C(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Bk4C"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Bk4C',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Bkzu(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Bkzu"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Bkzu',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_CCw3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_CCw3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_CCw3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_CNv7(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_CNv7"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_CNv7',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_CaMB(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_CaMB"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_CaMB',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_CeXP(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_CeXP"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_CeXP',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_CiQa(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_CiQa"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_CiQa',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_CppZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_CppZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_CppZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_CxdR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_CxdR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_CxdR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_D4FC(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_D4FC"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_D4FC',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_DGZY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_DGZY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_DGZY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_DGxn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_DGxn"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_DGxn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_DSX4(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_DSX4"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_DSX4',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Di6j(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Di6j"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Di6j',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_DrxW(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_DrxW"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_DrxW',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Dtbr(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Dtbr"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Dtbr',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_DtxQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_DtxQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_DtxQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_DuqX(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_DuqX"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_DuqX',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_E7DA(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_E7DA"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_E7DA',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_EFQy(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_EFQy"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_EFQy',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Es85(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Es85"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Es85',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Eyvc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Eyvc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Eyvc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_F2q5(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_F2q5"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_F2q5',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_F3FZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_F3FZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_F3FZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_F4Sv(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_F4Sv"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_F4Sv',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_F6Bw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_F6Bw"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_F6Bw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FHnu(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FHnu"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FHnu',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FJH3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FJH3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FJH3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FTZd(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FTZd"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FTZd',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FTns(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FTns"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FTns',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FXYZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FXYZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FXYZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FajF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FajF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FajF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FceT(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FceT"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FceT',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FiA5(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FiA5"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FiA5',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FiHR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FiHR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FiHR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Fidz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Fidz"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Fidz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Fihv(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Fihv"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Fihv',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FjPa(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FjPa"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FjPa',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FrYb(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FrYb"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FrYb',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_FswZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_FswZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_FswZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Ftwq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Ftwq"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Ftwq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_G9qY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_G9qY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_G9qY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_GHXj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_GHXj"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_GHXj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_GK89(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_GK89"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_GK89',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_GT2Y(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_GT2Y"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_GT2Y',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Gat6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Gat6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Gat6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_GbMc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_GbMc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_GbMc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_GoxR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_GoxR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_GoxR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Gz6n(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Gz6n"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Gz6n',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_H766(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_H766"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_H766',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_HDNL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_HDNL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_HDNL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_HGZ7(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_HGZ7"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_HGZ7',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_HGZx(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_HGZx"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_HGZx',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_HNXp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_HNXp"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_HNXp',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_HbNS(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_HbNS"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_HbNS',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Hkrg(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Hkrg"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Hkrg',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Hmag(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Hmag"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Hmag',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_J2jz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_J2jz"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_J2jz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_J4CL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_J4CL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_J4CL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_JBC2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_JBC2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_JBC2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_JFX3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_JFX3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_JFX3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_JGqr(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_JGqr"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_JGqr',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_JKq6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_JKq6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_JKq6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_JQsj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_JQsj"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_JQsj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_JcPQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_JcPQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_JcPQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_KAJo(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_KAJo"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_KAJo',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_KEA6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_KEA6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_KEA6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_KKcR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_KKcR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_KKcR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_L4Nn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_L4Nn"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_L4Nn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_LE3h(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_LE3h"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_LE3h',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_LTez(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_LTez"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_LTez',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_LTyc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_LTyc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_LTyc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_LcW5(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_LcW5"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_LcW5',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Lno3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Lno3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Lno3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_LoPP(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_LoPP"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_LoPP',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_M7mw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_M7mw"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_M7mw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_MF8J(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_MF8J"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_MF8J',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_MNPs(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_MNPs"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_MNPs',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_MNwp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_MNwp"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_MNwp',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Mkvc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Mkvc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Mkvc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_MopX(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_MopX"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_MopX',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Mqew(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Mqew"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Mqew',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_MuWS(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_MuWS"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_MuWS',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Mw8p(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Mw8p"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Mw8p',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_N5fG(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_N5fG"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_N5fG',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_NMjM(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_NMjM"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_NMjM',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Nd3T(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Nd3T"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Nd3T',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_NvY6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_NvY6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_NvY6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_PDJn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_PDJn"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_PDJn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_PEr8(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_PEr8"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_PEr8',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_PH3S(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_PH3S"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_PH3S',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_PHM5(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_PHM5"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_PHM5',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_PJTG(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_PJTG"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_PJTG',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_PPdp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_PPdp"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_PPdp',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_PRdM(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_PRdM"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_PRdM',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Pdeu(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Pdeu"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Pdeu',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_PgQF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_PgQF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_PgQF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Pkkn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Pkkn"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Pkkn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_QZYo(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_QZYo"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_QZYo',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Qew4(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Qew4"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Qew4',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Qgfo(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Qgfo"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Qgfo',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Qivv(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Qivv"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Qivv',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Qmj2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Qmj2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Qmj2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_QnMJ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_QnMJ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_QnMJ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_QoHF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_QoHF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_QoHF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_QtYh(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_QtYh"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_QtYh',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Qz6F(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Qz6F"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Qz6F',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_QzxM(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_QzxM"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_QzxM',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_R8JQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_R8JQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_R8JQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_R8th(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_R8th"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_R8th',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RCWr(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RCWr"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RCWr',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RDWf(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RDWf"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RDWf',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_REXG(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_REXG"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_REXG',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RHMi(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RHMi"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RHMi',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RKy6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RKy6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RKy6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RcWb(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RcWb"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RcWb',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RgjY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RgjY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RgjY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RnhH(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RnhH"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RnhH',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RqYj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RqYj"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RqYj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Rs7z(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Rs7z"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Rs7z',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Rt8N(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Rt8N"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Rt8N',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Rxmo(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Rxmo"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Rxmo',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_RzQu(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_RzQu"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_RzQu',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_S6mQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_S6mQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_S6mQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_S8CC(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_S8CC"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_S8CC',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_S8RM(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_S8RM"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_S8RM',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_SCjo(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_SCjo"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_SCjo',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_SECT(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_SECT"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_SECT',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_SLtH(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_SLtH"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_SLtH',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_SeJd(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_SeJd"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_SeJd',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ShSq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ShSq"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ShSq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_SiKr(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_SiKr"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_SiKr',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Sidr(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Sidr"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Sidr',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Sj4F(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Sj4F"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Sj4F',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_SnHL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_SnHL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_SnHL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_SrgP(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_SrgP"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_SrgP',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_SuzS(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_SuzS"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_SuzS',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_T9q2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_T9q2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_T9q2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TCe3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TCe3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TCe3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TDMh(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TDMh"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TDMh',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TKQt(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TKQt"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TKQt',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TPXz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TPXz"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TPXz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TRkc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TRkc"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TRkc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TTnS(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TTnS"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TTnS',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TbHd(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TbHd"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TbHd',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TdC4(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TdC4"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TdC4',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TdfQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TdfQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TdfQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TjEe(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TjEe"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TjEe',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TqvW(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TqvW"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TqvW',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_TqyZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_TqyZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_TqyZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Tsv2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Tsv2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Tsv2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_WC73(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_WC73"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_WC73',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_WE9E(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_WE9E"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_WE9E',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_WKqD(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_WKqD"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_WKqD',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_WNNw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_WNNw"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_WNNw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_WXan(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_WXan"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_WXan',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_WbrD(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_WbrD"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_WbrD',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Wggh(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Wggh"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Wggh',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_WjkK(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_WjkK"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_WjkK',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_WwsN(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_WwsN"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_WwsN',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_X25v(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_X25v"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_X25v',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_X6bt(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_X6bt"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_X6bt',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_XNnf(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_XNnf"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_XNnf',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_XZHE(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_XZHE"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_XZHE',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Xe3e(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Xe3e"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Xe3e',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Xj9n(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Xj9n"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Xj9n',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Xkve(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Xkve"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Xkve',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Xrdd(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Xrdd"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Xrdd',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Xsf2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Xsf2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Xsf2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Xv6M(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Xv6M"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Xv6M',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Y24M(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Y24M"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Y24M',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Y8CE(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Y8CE"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Y8CE',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Y8kA(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Y8kA"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Y8kA',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_YCNt(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_YCNt"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_YCNt',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_YDK6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_YDK6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_YDK6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_YFqE(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_YFqE"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_YFqE',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_YSQf(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_YSQf"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_YSQf',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_YY4K(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_YY4K"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_YY4K',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_YYYu(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_YYYu"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_YYYu',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Yaha(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Yaha"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Yaha',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_YeG6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_YeG6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_YeG6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Yp3z(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Yp3z"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Yp3z',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_Yr9g(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_Yr9g"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_Yr9g',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_YuK2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_YuK2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_YuK2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ZGiR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ZGiR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ZGiR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ZKJD(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ZKJD"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ZKJD',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ZLdm(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ZLdm"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ZLdm',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ZNkT(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ZNkT"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ZNkT',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ZWH6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ZWH6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ZWH6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ZfAL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ZfAL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ZfAL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_a3vz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_a3vz() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_a3vz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_a5gD(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_a5gD"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_a5gD',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_a5hJ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_a5hJ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_a5hJ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_aLJ9(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_aLJ9"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_aLJ9',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_aLxL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_aLxL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_aLxL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_aMw2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_aMw2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_aMw2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_aXwB(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_aXwB"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_aXwB',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_abFb(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_abFb"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_abFb',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_adGF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_adGF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_adGF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_adjd(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_adjd() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_adjd',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_aeRC(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_aeRC"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_aeRC',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_agvW(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_agvW"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_agvW',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_asH3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_asH3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_asH3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ayhw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ayhw() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ayhw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_b6Lq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_b6Lq"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_b6Lq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_b8Ya(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_b8Ya"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_b8Ya',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_bFCE(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_bFCE"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_bFCE',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_bYBJ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_bYBJ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_bYBJ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_bo6M(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_bo6M"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_bo6M',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_cDaQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_cDaQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_cDaQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_cH2v(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_cH2v"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_cH2v',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_cSGw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_cSGw"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_cSGw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ce4f(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ce4f() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ce4f',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ci68(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ci68() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ci68',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_cid2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_cid2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_cid2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_cjAL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_cjAL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_cjAL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_csbF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_csbF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_csbF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_d275(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_d275() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_d275',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_d3DB(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_d3DB"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_d3DB',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_dAsH(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_dAsH"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_dAsH',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_dKmL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_dKmL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_dKmL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_dRAE(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_dRAE"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_dRAE',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_dZNg(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_dZNg"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_dZNg',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_dhxD(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_dhxD"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_dhxD',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_dx2K(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_dx2K"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_dx2K',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_e6rz(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_e6rz() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_e6rz',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_eLM2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_eLM2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_eLM2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_eQ9v(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_eQ9v"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_eQ9v',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_eQYN(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_eQYN"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_eQYN',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_eRoL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_eRoL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_eRoL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_eThQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_eThQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_eThQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ebt7(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ebt7() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ebt7',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ef3s(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ef3s() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ef3s',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_eiT6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_eiT6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_eiT6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ej42(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ej42() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ej42',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ej5r(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ej5r() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ej5r',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ejCu(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ejCu"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ejCu',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_eqmF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_eqmF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_eqmF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_esoc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_esoc() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_esoc',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_f5tj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_f5tj() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_f5tj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fEAe(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_fEAe"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fEAe',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fLrY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_fLrY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fLrY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fPuj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_fPuj"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fPuj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fRxv(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_fRxv"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fRxv',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fbQR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_fbQR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fbQR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fbTF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_fbTF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fbTF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fbav(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_fbav() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fbav',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ff85(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ff85() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ff85',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fh7q(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_fh7q() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fh7q',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fqph(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_fqph() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fqph',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_fw3y(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_fw3y() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_fw3y',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_gL5X(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_gL5X"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_gL5X',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_gNzB(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_gNzB"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_gNzB',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_gY4J(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_gY4J"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_gY4J',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_grue(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_grue() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_grue',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_h2uA(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_h2uA"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_h2uA',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_hDJ2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_hDJ2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_hDJ2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_hEBy(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_hEBy"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_hEBy',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_hED7(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_hED7"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_hED7',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_heDE(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_heDE"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_heDE',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_hjaY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_hjaY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_hjaY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_hqhY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_hqhY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_hqhY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_hrMG(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_hrMG"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_hrMG',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_huG4(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_huG4"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_huG4',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_iByi(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_iByi"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_iByi',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_iGcG(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_iGcG"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_iGcG',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_iR39(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_iR39"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_iR39',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_im7c(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_im7c() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_im7c',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_imsK(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_imsK"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_imsK',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ioXR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ioXR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ioXR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_iqHv(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_iqHv"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_iqHv',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_iyLG(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_iyLG"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_iyLG',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_j7La(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_j7La"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_j7La',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jPzQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jPzQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jPzQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jjrL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jjrL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jjrL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jpjL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jpjL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jpjL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jqBt(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jqBt"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jqBt',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jqRX(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jqRX"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jqRX',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jqrL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jqrL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jqrL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jqsB(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jqsB"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jqsB',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jrN9(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jrN9"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jrN9',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jyhm(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_jyhm() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jyhm',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_jzHJ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_jzHJ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_jzHJ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_k36E(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_k36E"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_k36E',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_k8pq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_k8pq() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_k8pq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_k9Nq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_k9Nq"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_k9Nq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_kGFu(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_kGFu"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_kGFu',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_kQKj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_kQKj"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_kQKj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_kQcR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_kQcR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_kQcR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_kdvh(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_kdvh() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_kdvh',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_kkQm(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_kkQm"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_kkQm',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_knm3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_knm3() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_knm3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_kqBJ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_kqBJ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_kqBJ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ktkM(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ktkM"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ktkM',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_m45G(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_m45G"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_m45G',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mBNK(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_mBNK"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mBNK',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mEGT(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_mEGT"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mEGT',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mLE3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_mLE3"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mLE3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mWR4(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_mWR4"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mWR4',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_maPp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_maPp"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_maPp',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mdNY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_mdNY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mdNY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mhCo(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_mhCo"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mhCo',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mm7x(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_mm7x() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mm7x',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mmv7(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_mmv7() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mmv7',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_mtAm(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_mtAm"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_mtAm',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_myra(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_myra() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_myra',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_n3QD(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_n3QD"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_n3QD',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_n7zf(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_n7zf() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_n7zf',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_n88J(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_n88J"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_n88J',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_n8Xq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_n8Xq"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_n8Xq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_nP9Z(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_nP9Z"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_nP9Z',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_nWvq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_nWvq"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_nWvq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_nXh7(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_nXh7"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_nXh7',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ndmS(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ndmS"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ndmS',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_nhdj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_nhdj() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_nhdj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_npHb(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_npHb"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_npHb',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_nptY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_nptY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_nptY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_nqMm(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_nqMm"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_nqMm',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_nrLC(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_nrLC"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_nrLC',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_nuXd(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_nuXd"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_nuXd',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_o7qa(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_o7qa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_o7qa',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_o88w(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_o88w() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_o88w',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_o9Np(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_o9Np"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_o9Np',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_oJ2i(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_oJ2i"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_oJ2i',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_oMLr(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_oMLr"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_oMLr',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_oMXY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_oMXY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_oMXY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_oP6B(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_oP6B"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_oP6B',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_oRM7(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_oRM7"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_oRM7',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ooE2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ooE2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ooE2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_orHm(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_orHm"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_orHm',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_p25y(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_p25y() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_p25y',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_p2Qb(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_p2Qb"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_p2Qb',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_p6Av(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_p6Av"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_p6Av',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_pPHd(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_pPHd"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_pPHd',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_pb96(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_pb96() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_pb96',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_pfCH(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_pfCH"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_pfCH',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_pi4B(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_pi4B"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_pi4B',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ptAY(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ptAY"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ptAY',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ptPS(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ptPS"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ptPS',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_pveX(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_pveX"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_pveX',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_q5hg(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_q5hg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_q5hg',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qJ5t(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qJ5t"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qJ5t',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qT8d(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qT8d"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qT8d',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qWHP(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qWHP"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qWHP',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qXgA(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qXgA"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qXgA',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qZrH(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qZrH"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qZrH',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qbGS(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qbGS"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qbGS',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qhXw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qhXw"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qhXw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qkcX(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qkcX"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qkcX',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qq66(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_qq66() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qq66',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_qxA8(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_qxA8"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_qxA8',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_r2XW(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_r2XW"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_r2XW',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_r7Au(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_r7Au"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_r7Au',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rBNF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_rBNF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rBNF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rFqH(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_rFqH"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rFqH',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rHjZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_rHjZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rHjZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rL5X(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_rL5X"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rL5X',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rSgF(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_rSgF"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rSgF',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rZAt(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_rZAt"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rZAt',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_reig(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_reig() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_reig',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rh9Y(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_rh9Y"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rh9Y',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rizp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_rizp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rizp',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_rxs5(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_rxs5() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_rxs5',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_s4av(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_s4av() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_s4av',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_sA6h(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_sA6h"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_sA6h',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_sCAA(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_sCAA"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_sCAA',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_sECQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_sECQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_sECQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_sMe5(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_sMe5"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_sMe5',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_sSXZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_sSXZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_sSXZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_sdCr(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_sdCr"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_sdCr',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_sf39(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_sf39() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_sf39',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_shNM(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_shNM"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_shNM',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_soPQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_soPQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_soPQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ssQ2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ssQ2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ssQ2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_t3uy(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_t3uy() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_t3uy',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_t5jw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_t5jw() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_t5jw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_t6Dg(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_t6Dg"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_t6Dg',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_t87s(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_t87s() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_t87s',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_tMnt(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_tMnt"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_tMnt',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_tT2L(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_tT2L"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_tT2L',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_tb45(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_tb45() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_tb45',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_tbM6(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_tbM6"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_tbM6',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_tkrq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_tkrq() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_tkrq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_tmiL(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_tmiL"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_tmiL',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_tv8w(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_tv8w() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_tv8w',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_twbs(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_twbs() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_twbs',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_uMbk(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_uMbk"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_uMbk',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_un6W(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_un6W"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_un6W',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_un8y(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_un8y() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_un8y',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_uqwe(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_uqwe() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_uqwe',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_uvXZ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_uvXZ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_uvXZ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_uvYE(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_uvYE"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_uvYE',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_v3hk(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_v3hk() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_v3hk',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_vFYB(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_vFYB"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_vFYB',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_vN3P(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_vN3P"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_vN3P',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wEGD(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_wEGD"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wEGD',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wEcP(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_wEcP"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wEcP',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wJQT(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_wJQT"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wJQT',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wQ6G(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_wQ6G"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wQ6G',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wWqT(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_wWqT"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wWqT',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wYdb(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_wYdb"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wYdb',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wZD2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_wZD2"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wZD2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wcGg(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_wcGg"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wcGg',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wdig(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_wdig() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wdig',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_wy98(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_wy98() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_wy98',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_x2v2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_x2v2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_x2v2',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_xKGN(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_xKGN"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_xKGN',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_xch3(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_xch3() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_xch3',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_xjob(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_xjob() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_xjob',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_xmsn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_xmsn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_xmsn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_xsmk(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_xsmk() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_xsmk',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_xumC(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_xumC"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_xumC',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_xy2F(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_xy2F"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_xy2F',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_yKn4(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_yKn4"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_yKn4',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_yNPj(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_yNPj"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_yNPj',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ySDR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_ySDR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ySDR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_yfZw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_yfZw"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_yfZw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_ygtn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_ygtn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_ygtn',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_yrhQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_yrhQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_yrhQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_z22a(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_z22a() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_z22a',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_zAtC(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_zAtC"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_zAtC',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_zWCR(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_zWCR"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_zWCR',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_zaXq(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_zaXq"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_zaXq',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_zey8(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION livequery_simple_pg_zey8() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_zey8',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_zfDM(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_zfDM"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_zfDM',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_zkzQ(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_zkzQ"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_zkzQ',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_znBk(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_znBk"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_znBk',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


--
-- Name: livequery_simple_pg_zqGw(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION "livequery_simple_pg_zqGw"() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    row_data   RECORD;
    full_msg   TEXT;
    full_len   INT;
    cur_page   INT;
    page_count INT;
    msg_hash   TEXT;
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS data
      INTO row_data;
    ELSIF (TG_OP  = 'DELETE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(OLD) AS data
      INTO row_data;
    ELSIF (TG_OP = 'UPDATE') THEN
      SELECT
        TG_TABLE_NAME AS table,
        TG_OP         AS op,
        json_agg(NEW) AS new_data,
        json_agg(OLD) AS old_data
      INTO row_data;
    END IF;

    SELECT row_to_json(row_data)::TEXT INTO full_msg;
    SELECT char_length(full_msg)       INTO full_len;
    SELECT (full_len / 7950) + 1       INTO page_count;
    SELECT md5(full_msg)               INTO msg_hash;

    FOR cur_page IN 1..page_count LOOP
      PERFORM pg_notify('simple_pg_zqGw',
        msg_hash || ':' || page_count || ':' || cur_page || ':' ||
        substr(full_msg, ((cur_page - 1) * 7950) + 1, 7950)
      );
    END LOOP;
    RETURN NULL;
  END;
$$;


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: categories; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE categories (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying(255) NOT NULL
);


--
-- Name: categories_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE categories_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: categories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE categories_id_seq OWNED BY categories.id;


--
-- Name: discounts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE discounts (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    value numeric(8,2),
    operator character varying(255)
);


--
-- Name: discounts_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE discounts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: discounts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE discounts_id_seq OWNED BY discounts.id;


--
-- Name: items; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE items (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying(255) NOT NULL,
    price numeric(8,2),
    unit text,
    category_id bigint,
    CONSTRAINT items_unit_check CHECK ((unit = ANY (ARRAY['ml'::text, 'mg'::text, 'kg'::text, 'ltrs'::text, 'quantity'::text])))
);


--
-- Name: items_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: items_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE items_id_seq OWNED BY items.id;


--
-- Name: knex_migrations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE knex_migrations (
    id integer NOT NULL,
    name character varying(255),
    batch integer,
    migration_time timestamp with time zone
);


--
-- Name: knex_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE knex_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: knex_migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE knex_migrations_id_seq OWNED BY knex_migrations.id;


--
-- Name: knex_migrations_lock; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE knex_migrations_lock (
    is_locked integer
);


--
-- Name: line_items; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE line_items (
    id integer NOT NULL,
    quantity bigint,
    discount numeric(8,2),
    item_id bigint,
    transaction_id bigint
);


--
-- Name: line_items_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE line_items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: line_items_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE line_items_id_seq OWNED BY line_items.id;


--
-- Name: transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE transactions (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    shift_id bigint,
    properties jsonb,
    discount bigint
);


--
-- Name: lineitems_vista; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW lineitems_vista AS
 SELECT line_items.id,
    trnsctns.created_at,
    trnsctns.updated_at,
    trnsctns.shift_id,
    itms.name,
    line_items.quantity,
    line_items.transaction_id AS transaction,
    itms.price AS unit_price,
    (itms.price * (line_items.quantity)::numeric) AS item_total,
    itms.category_id,
    ctgrs.category
   FROM (((line_items
     LEFT JOIN ( SELECT items.name,
            items.price,
            items.category_id,
            items.id AS iid
           FROM items) itms ON ((line_items.item_id = itms.iid)))
     LEFT JOIN ( SELECT transactions.created_at,
            transactions.updated_at,
            transactions.shift_id,
            transactions.id AS tid
           FROM transactions) trnsctns ON ((line_items.transaction_id = trnsctns.tid)))
     LEFT JOIN ( SELECT categories.name AS category,
            categories.id AS cid
           FROM categories) ctgrs ON ((itms.category_id = ctgrs.cid)));


--
-- Name: settings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE settings (
    id integer NOT NULL,
    key character varying(255) NOT NULL,
    value character varying(255)
);


--
-- Name: settings_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE settings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: settings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE settings_id_seq OWNED BY settings.id;


--
-- Name: shifts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE shifts (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    started_at timestamp with time zone,
    ended_at timestamp with time zone
);


--
-- Name: shifts_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE shifts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: shifts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE shifts_id_seq OWNED BY shifts.id;


--
-- Name: suppliers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE suppliers (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying(255) NOT NULL
);


--
-- Name: suppliers_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE suppliers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: suppliers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE suppliers_id_seq OWNED BY suppliers.id;


--
-- Name: supplies; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE supplies (
    id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    item_id bigint,
    supplier_id bigint,
    quantity bigint
);


--
-- Name: supplies_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE supplies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: supplies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE supplies_id_seq OWNED BY supplies.id;


--
-- Name: transactions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE transactions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: transactions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE transactions_id_seq OWNED BY transactions.id;


--
-- Name: categories id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY categories ALTER COLUMN id SET DEFAULT nextval('categories_id_seq'::regclass);


--
-- Name: discounts id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY discounts ALTER COLUMN id SET DEFAULT nextval('discounts_id_seq'::regclass);


--
-- Name: items id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY items ALTER COLUMN id SET DEFAULT nextval('items_id_seq'::regclass);


--
-- Name: knex_migrations id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY knex_migrations ALTER COLUMN id SET DEFAULT nextval('knex_migrations_id_seq'::regclass);


--
-- Name: line_items id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY line_items ALTER COLUMN id SET DEFAULT nextval('line_items_id_seq'::regclass);


--
-- Name: settings id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY settings ALTER COLUMN id SET DEFAULT nextval('settings_id_seq'::regclass);


--
-- Name: shifts id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY shifts ALTER COLUMN id SET DEFAULT nextval('shifts_id_seq'::regclass);


--
-- Name: suppliers id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY suppliers ALTER COLUMN id SET DEFAULT nextval('suppliers_id_seq'::regclass);


--
-- Name: supplies id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY supplies ALTER COLUMN id SET DEFAULT nextval('supplies_id_seq'::regclass);


--
-- Name: transactions id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY transactions ALTER COLUMN id SET DEFAULT nextval('transactions_id_seq'::regclass);


--
-- Data for Name: categories; Type: TABLE DATA; Schema: public; Owner: -
--

COPY categories (id, created_at, updated_at, name) FROM stdin;
1	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	ALL DAY BREAKFAST & BRUNCH
2	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	WAFFLES PANCAKES, CREPES & FRUIT
3	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	ORGANIC FREE-RANGE FOLDED OMELETTES
4	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	SOUPS & SNACK
5	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	ARTISAN & ORGANIC SALADS
6	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	SNACKWICH SANDWICHES ( ON THE GO )
7	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	FLAME-GRILLED GOURMET BURGER
8	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	GRILLED PANINI SANDWICHES
9	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	PULLED SPICY BARBECUED MEAT
10	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	GRILLED MEZZA LUNA
11	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	STUFFED SAVOURY CRESPELLE
12	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	NEW ENTREES
13	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	PIES & PASTAS LEANER COMFORT FOOD
14	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	PATISSERIE & DESSERTS
15	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	BLENDED FRAPPES & THICKSHAKES
16	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	GRANITA ICE BLEND SMOOTHIES
17	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	ICED COFFEES ON THE ROCKS
18	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	CAKESHAKES!
19	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	COLD LOW-FAT SEMIFREDDO DESSERTS
20	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	FRESH FRUIT SMOOTHIES & JUICES
21	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	LEMONADE ICED TEA & SOFT DRINKS
22	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	ARTISAN TEAS & HOT CHOCOLATE
23	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	MICRO-ROASTED SINGLE ESTATE COFFEES
24	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	CLASSIC HOT COFFEE BEVERAGES
25	2016-11-03 17:05:26.143655+05	2016-11-03 17:05:26.143655+05	FLAVOURED HOT SIGNATURE COFFEES
\.


--
-- Name: categories_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('categories_id_seq', 1, false);


--
-- Data for Name: discounts; Type: TABLE DATA; Schema: public; Owner: -
--

COPY discounts (id, name, value, operator) FROM stdin;
\.


--
-- Name: discounts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('discounts_id_seq', 1, false);


--
-- Data for Name: items; Type: TABLE DATA; Schema: public; Owner: -
--

COPY items (id, created_at, updated_at, name, price, unit, category_id) FROM stdin;
1	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	THE MOCCA BRUNCH	995.00	\N	1
2	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	DETOX BRUNCH ( LOW-FAT & LOW-CARB )	895.00	\N	1
3	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PALEO BRUNCH ( GLUTEN FREE )	695.00	\N	1
4	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	WAFFLES, PANCAKES & CREPES PLATTER	595.00	\N	2
5	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	WAFFLE WITH THE WORKS	495.00	\N	2
6	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	WAFFLE WITH THE WORKS With Vanilla ice cream	595.00	\N	2
7	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FRESH FRUIT WITH LOWFAT YOGURT & GRANOLA	395.00	\N	2
8	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	THE MOCCA OMELETTE	425.00	\N	3
9	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY EGG WHITE OMELETTE	425.00	\N	3
10	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CHICKEN & MUSHROOM OMELETTE	525.00	\N	3
11	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SPICY HUEVOS RANCHEROS OMELETTE	550.00	\N	3
12	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MEAT & TATERS OMELETTE	575.00	\N	3
13	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CHICKEN-POTATO LEEK SOUP	395.00	\N	4
14	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LOW-CAL CARROT & CORIANDER SOUP	350.00	\N	4
15	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LOW-CAL ROASTED TOMATO & ORANGE SOUP	350.00	\N	4
16	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PERSIAN ASH SOUP	395.00	\N	4
17	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ROASTED RED PEPPER, TOMATO & BASIL SOUP	350.00	\N	4
18	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	TAPAS PLATTER	750.00	\N	4
19	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LOADED NACHOS	650.00	\N	4
20	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MINI BURGER PLATTER	425.00	\N	4
21	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ROSEMARY POTATO WEDGES	295.00	\N	4
22	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	HUMMUS PLATTER	350.00	\N	4
23	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ORGANIC URBAN GARDEN SIGNATURE SALAD	650.00	\N	5
24	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GRILLED VEGETABLE SALAD	595.00	\N	5
25	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GREEK SALAD ( RAW )	595.00	\N	5
26	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	TUNA SALAD	650.00	\N	5
27	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GRILLED CHICKEN SALAD	650.00	\N	5
28	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CURRY EGG SALAD	295.00	\N	6
29	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BEEF PICKLES AND CHILI	375.00	\N	6
30	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CREAM CHEESE AND VEGGIES	350.00	\N	6
31	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CHICKEN MEXICANA	375.00	\N	6
32	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PULLED CHICKEN N SLAW	375.00	\N	6
33	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CLASSIC BEEF PATTY	650.00	\N	7
34	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CHICKEN & HERB PATTY	625.00	\N	7
35	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MARINATED GRILLED VEGETABLES	625.00	\N	8
36	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CLASSIC CHEESE, PESTO & TOMATO	575.00	\N	8
37	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GRILLED TARRAGON LIME CHICKEN	645.00	\N	8
38	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GRILLED MEXICALI CHICKEN	675.00	\N	8
39	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GRILLED PAPRIKA JALAPENO CHICKEN	645.00	\N	8
40	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CHICKEN SPICY TANDOORI	645.00	\N	8
41	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BEEF, ONION & GREEN CHILI	695.00	\N	8
42	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PEPPERONI PARMESAN	675.00	\N	8
43	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PULLED BARBECUED BEEF	650.00	\N	9
44	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PULLED BARBECUED CHICKEN	650.00	\N	9
45	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MEDITERRANEN MEZZA LUNA	675.00	\N	10
46	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CHICKEN MEZZA LUNA	750.00	\N	10
47	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BEEF MEZZA LUNA	750.00	\N	10
48	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PARMESAN CHICKEN	750.00	\N	11
49	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BEEF MUSHROOM	750.00	\N	11
50	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SPINACH & FETA	695.00	\N	11
51	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GRILLED CHICKEN	795.00	\N	12
52	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PENNE BOLOGNESE	650.00	\N	12
53	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PASTA PIQUANT	650.00	\N	12
54	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PESTO PASTA	650.00	\N	12
55	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FETTUCINE SPINACI SPICY OVENGRILLED PASTA	695.00	\N	13
56	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PENNE ARRABIATA SPICY OVEN GRILLED PASTA	695.00	\N	13
57	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ZUCCHINI FETTUCINE ALFREDO OVEN-GRILLED DISH	650.00	\N	13
58	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SHEPHARDS PIE RE-INVENTED	650.00	\N	13
59	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CHAR-GRILLED TAHINI CHICKEN PLATTER	795.00	\N	13
60	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FRENCH MACARONS ( GLUTEN FREE ) pr. piece	170.00	\N	14
61	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FRENCH MACARONS ( GLUTEN FREE ) 6 pieces box	990.00	\N	14
62	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SCANDINAVIAN BUTTER PIES	495.00	\N	14
63	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BIG OL DIPPED DOME MUFFINS	225.00	\N	14
64	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PHILADELPHIA CREAM CHEESE CAKE	495.00	\N	14
65	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LOW-FAT CARROT CAKE	325.00	\N	14
66	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LOW-FAT BANANA CAKE	325.00	\N	14
67	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PALEO NRG BAR ( LOW-FAT )	195.00	\N	14
68	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CARAMINT SWISS CHOCOLATE BROWNIE	225.00	\N	14
69	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SWISS CHOCOLATE BROWNIE WITH WALNUTS	225.00	\N	14
70	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SAVOURY SCONES	195.00	\N	14
71	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SWEET SCONES	195.00	\N	14
72	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CROISSANT	110.00	\N	14
73	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CHEWY COOKIES	250.00	\N	14
74	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	YUMMY MINI MUFFIN SAVOURY	110.00	\N	14
75	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	COOKIE CUPS	395.00	\N	14
76	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	TIRAMISU	550.00	\N	14
77	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	NOUGATELLA	550.00	\N	14
78	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	TRIPLE SWISS CHOCOLATE MOUSSE	595.00	\N	14
79	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	THE FORGET-ABOUT MOLTEN-LAVA-CAKES BROWNIE MELT	650.00	\N	14
80	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ESPRESSO COFFEE FRAPPE Regular	350.00	\N	15
81	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ESPRESSO COFFEE FRAPPE Large	395.00	\N	15
82	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CARAMEL COFFEE FRAPPE Regular	350.00	\N	15
83	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CARAMEL COFFEE FRAPPE Large	395.00	\N	15
84	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CARAMINT FRAPPE ( WITHOUT COFFEE ) Regular	340.00	\N	15
85	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CARAMINT FRAPPE ( WITHOUT COFFEE ) Large	385.00	\N	15
86	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MOCCA COFFEE FRAPPE Regular	350.00	\N	15
87	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MOCCA COFFEE FRAPPE Large	395.00	\N	15
88	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FERRERO COFFEE FRAPPE Regular	375.00	\N	15
89	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FERRERO COFFEE FRAPPE Large	425.00	\N	15
90	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BERRY WHITE CHOC FRAPPE ( WITHOUT COFFEE ) Regular	340.00	\N	15
91	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BERRY WHITE CHOC FRAPPE ( WITHOUT COFFEE ) Large	385.00	\N	15
92	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	TROPICAL ICE SMOOTHIE Regular	355.00	\N	16
93	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	TROPICAL ICE SMOOTHIE Large	395.00	\N	16
94	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CITRUS ICE SMOOTHIE Regular	355.00	\N	16
95	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CITRUS ICE SMOOTHIE Large	395.00	\N	16
96	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FOREST BERRY ICE SMOOTHIE Regular	355.00	\N	16
97	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FOREST BERRY ICE SMOOTHIE Large	395.00	\N	16
98	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GINGER LIME MINTY GRANITA Regular	315.00	\N	16
99	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GINGER LIME MINTY GRANITA Large	365.00	\N	16
100	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	KIWI GREEN MEADOW COOLER Regular	315.00	\N	16
101	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	KIWI GREEN MEADOW COOLER Large	365.00	\N	16
102	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FLAVOURED ICED LATTE MACCHIATO Single	315.00	\N	17
103	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FLAVOURED ICED LATTE MACCHIATO Double	365.00	\N	17
104	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ICED MOCCACCINO HAZELCINO Single	315.00	\N	17
105	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ICED MOCCACCINO HAZELCINO Double	365.00	\N	17
106	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY ICED AMERICANO Regular	250.00	\N	17
107	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY ICED AMERICANO Large	300.00	\N	17
108	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY ICED LATTE Regular	315.00	\N	17
109	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY ICED LATTE Large	365.00	\N	17
110	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY GREEK STYLE FRAPPE Regular	315.00	\N	17
111	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY GREEK STYLE FRAPPE Large	365.00	\N	17
112	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	VANILLA CHAI & COOKIES CAKESHAKE Regular	385.00	\N	18
113	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	VANILLA CHAI & COOKIES CAKESHAKE Large	430.00	\N	18
114	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CINNAMON CARROTCAKE CAKESHAKE Regular	385.00	\N	18
115	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CINNAMON CARROTCAKE CAKESHAKE Large	430.00	\N	18
116	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PEANUTBUTTER & BROWNIE CAKESHAKE Regular	385.00	\N	18
117	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PEANUTBUTTER & BROWNIE CAKESHAKE Large	430.00	\N	18
118	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LEMON MERINGUE PIE CAKESHAKE Regular	385.00	\N	18
119	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LEMON MERINGUE PIE CAKESHAKE Large	430.00	\N	18
120	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GRASSHOPPER CAKESHAKE Regular	385.00	\N	18
121	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GRASSHOPPER CAKESHAKE Large	430.00	\N	18
122	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ORANGUTANG CAKESHAKE Regular	385.00	\N	18
123	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ORANGUTANG CAKESHAKE Large	430.00	\N	18
124	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	NUTELLAAAH CAKESHAKE Regular	385.00	\N	18
125	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	NUTELLAAAH CAKESHAKE Large	430.00	\N	18
126	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	STRAWBERRY & ROSEWATER SEMI-FREDDO	650.00	\N	19
127	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	RASPBERRY & LEMON SEMI-FREDDO	650.00	\N	19
128	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SOUR GREEN APPLE & MINT SEMI-FREDDO	650.00	\N	19
129	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	NOUGATELLA & HAZELNUT SEMI-FREDDO	650.00	\N	19
130	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FRESH FRUIT SLOW JUICES Regular	250.00	\N	20
131	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FRESH FRUIT SLOW JUICES Large	300.00	\N	20
132	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FRESH FRUIT SMOOTHIES	355.00	\N	20
133	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FRESH FRUIT SMOOTHIES Large	395.00	\N	20
134	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ADD ORGANIC ACAI, SPIRULINA OR WHEATGRASS EXTRACT	100.00	\N	20
135	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BREAKFAST DETOX DAIRY SMOOTHIE Regular	355.00	\N	20
136	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BREAKFAST DETOX DAIRY SMOOTHIE Large	395.00	\N	20
137	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BERRYBLAST DAIRY SMOOTHIE Regular	385.00	\N	20
138	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BERRYBLAST DAIRY SMOOTHIE Large	415.00	\N	20
139	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GINGER LIME LEMONADE Regular	255.00	\N	21
140	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GINGER LIME LEMONADE Large	275.00	\N	21
141	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ICED TEA Regular	250.00	\N	21
142	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ICED TEA Large	300.00	\N	21
143	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	PERRIER SPARKLING WATER	130.00	\N	21
144	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	NESTLE STILL WATER	40.00	\N	21
145	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MISC. SOFT DRINKS	95.00	\N	21
146	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	KUSMI TEA	395.00	\N	22
147	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MIGHTY LEAF TEA ( WITH DRY FRUIT SAMPLER )	495.00	\N	22
148	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	TWINNINGS TEA	175.00	\N	22
149	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MIGHTY LEAF EBONY FLOWERING TEA	695.00	\N	22
150	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SWISS HOT CHOCOLATE Regular	340.00	\N	22
151	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SWISS HOT CHOCOLATE Large	385.00	\N	22
152	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MOCCA DARK ROAST French Press	385.00	\N	23
153	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MOCCA DARK ROAST Hario Drip	395.00	\N	23
154	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MOCCA DARK ROAST Aeropress	395.00	\N	23
155	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LA MINITA ESTATE COSTA RICA French Press	450.00	\N	23
156	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LA MINITA ESTATE COSTA RICA Hario Drip	485.00	\N	23
157	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LA MINITA ESTATE COSTA RICA Aeropress	450.00	\N	23
158	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GICHERORI ESTATE KENYA AA French Press	450.00	\N	23
159	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GICHERORI ESTATE KENYA AA Hario Drip	485.00	\N	23
160	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GICHERORI ESTATE KENYA AA Aeropress	450.00	\N	23
161	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SERTAO ESTATE BRAZIL  French Press	450.00	\N	23
162	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SERTAO ESTATE BRAZIL Hario Drip	485.00	\N	23
163	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SERTAO ESTATE BRAZIL  Aeropress	450.00	\N	23
164	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	VALPARAISO ESTATE GUATEMALA French Press	450.00	\N	23
165	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	VALPARAISO ESTATE GUATEMALA Hario Drip	485.00	\N	23
166	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	VALPARAISO ESTATE GUATEMALA Aeropress	450.00	\N	23
167	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	JAZ DE RIO COCO ESTATE NICARAGUA French Press	450.00	\N	23
168	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	JAZ DE RIO COCO ESTATE NICARAGUA Hario Drip	485.00	\N	23
169	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	JAZ DE RIO COCO ESTATE NICARAGUA Aeropress	450.00	\N	23
170	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LATTE Regular	310.00	\N	24
171	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	LATTE Large	360.00	\N	24
172	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ESPRESSO Regular	225.00	\N	24
173	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ESPRESSO Large	275.00	\N	24
174	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	AMERICANO Regular	240.00	\N	24
175	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	AMERICANO Large	285.00	\N	24
176	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FLAVOURED LATTE MACCHIATO Regular	340.00	\N	24
177	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	FLAVOURED LATTE MACCHIATO Large	385.00	\N	24
178	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ESPRESSO MACCHIATO Regular	240.00	\N	24
179	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	ESPRESSO MACCHIATO Large	285.00	\N	24
180	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	AFFOGATO Regular	295.00	\N	24
181	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	AFFOGATO Large	340.00	\N	24
182	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CAPPUCCINO Regular	310.00	\N	24
183	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CAPPUCCINO Large	360.00	\N	24
184	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CORTADO Regular	240.00	\N	24
185	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CORTADO Large	285.00	\N	24
186	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MOCCACCINO Regular	340.00	\N	25
187	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	MOCCACCINO Large	385.00	\N	25
188	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CARAMELITO Regular	340.00	\N	25
189	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	CARAMELITO Large	385.00	\N	25
190	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BUTTERSCOTCH CAP Regular	340.00	\N	25
191	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	BUTTERSCOTCH CAP Large	385.00	\N	25
192	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SWISS CHOCOLATE LATTE Regular	395.00	\N	25
193	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SWISS CHOCOLATE LATTE Large	450.00	\N	25
194	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY & SUGAR-FREE VANILLA / HAZELNUT CAP Regular	340.00	\N	25
195	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	SKINNY & SUGAR-FREE VANILLA / HAZELNUT CAP Large	385.00	\N	25
196	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	WHITE / DARK CHOCOLATE MOCCA Regular	340.00	\N	25
197	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	WHITE / DARK CHOCOLATE MOCCA Large	385.00	\N	25
198	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	HAZEL NOCCIOLA Regular	340.00	\N	25
199	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	HAZEL NOCCIOLA Large	385.00	\N	25
200	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GINGERBREAD CAP Regular	340.00	\N	25
201	2016-11-04 14:45:34.410399+05	2016-11-04 14:45:34.410399+05	GINGERBREAD CAP Large	385.00	\N	25
\.


--
-- Name: items_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('items_id_seq', 1, false);


--
-- Data for Name: knex_migrations; Type: TABLE DATA; Schema: public; Owner: -
--

COPY knex_migrations (id, name, batch, migration_time) FROM stdin;
1	20161101141833_init_cash.js	1	2016-11-11 15:41:43.899+05
2	20161101145413_table_add_stock.js	1	2016-11-11 15:41:43.92+05
3	20161101151325_table_add_shift.js	1	2016-11-11 15:41:43.932+05
4	20161101152152_table_transaction.js	1	2016-11-11 15:41:43.957+05
5	20161101155000_table_transaction_discount.js	1	2016-11-11 15:41:43.964+05
6	20161110185330_table_settings.js	1	2016-11-11 15:41:43.971+05
8	20161225155629_discounts.js	2	2016-12-25 22:17:33.841+05
\.


--
-- Name: knex_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('knex_migrations_id_seq', 8, true);


--
-- Data for Name: knex_migrations_lock; Type: TABLE DATA; Schema: public; Owner: -
--

COPY knex_migrations_lock (is_locked) FROM stdin;
0
\.


--
-- Data for Name: line_items; Type: TABLE DATA; Schema: public; Owner: -
--

COPY line_items (id, quantity, discount, item_id, transaction_id) FROM stdin;
\.


--
-- Name: line_items_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('line_items_id_seq', 345, true);


--
-- Data for Name: settings; Type: TABLE DATA; Schema: public; Owner: -
--

COPY settings (id, key, value) FROM stdin;
2	Tables	10
3	Discount	20
1	Sales Tax	16
\.


--
-- Name: settings_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('settings_id_seq', 1, true);


--
-- Data for Name: shifts; Type: TABLE DATA; Schema: public; Owner: -
--

COPY shifts (id, created_at, updated_at, started_at, ended_at) FROM stdin;
\.


--
-- Name: shifts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('shifts_id_seq', 16, true);


--
-- Data for Name: suppliers; Type: TABLE DATA; Schema: public; Owner: -
--

COPY suppliers (id, created_at, updated_at, name) FROM stdin;
\.


--
-- Name: suppliers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('suppliers_id_seq', 1, false);


--
-- Data for Name: supplies; Type: TABLE DATA; Schema: public; Owner: -
--

COPY supplies (id, created_at, updated_at, item_id, supplier_id, quantity) FROM stdin;
\.


--
-- Name: supplies_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('supplies_id_seq', 1, false);


--
-- Data for Name: transactions; Type: TABLE DATA; Schema: public; Owner: -
--

COPY transactions (id, created_at, updated_at, shift_id, properties, discount) FROM stdin;
\.


--
-- Name: transactions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('transactions_id_seq', 302, true);


--
-- Name: categories categories_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id);


--
-- Name: discounts discounts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY discounts
    ADD CONSTRAINT discounts_pkey PRIMARY KEY (id);


--
-- Name: items items_name_unique; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY items
    ADD CONSTRAINT items_name_unique UNIQUE (name);


--
-- Name: items items_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY items
    ADD CONSTRAINT items_pkey PRIMARY KEY (id);


--
-- Name: knex_migrations knex_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY knex_migrations
    ADD CONSTRAINT knex_migrations_pkey PRIMARY KEY (id);


--
-- Name: line_items line_items_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY line_items
    ADD CONSTRAINT line_items_pkey PRIMARY KEY (id);


--
-- Name: settings settings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY settings
    ADD CONSTRAINT settings_pkey PRIMARY KEY (id);


--
-- Name: shifts shifts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY shifts
    ADD CONSTRAINT shifts_pkey PRIMARY KEY (id);


--
-- Name: suppliers suppliers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY suppliers
    ADD CONSTRAINT suppliers_pkey PRIMARY KEY (id);


--
-- Name: supplies supplies_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supplies
    ADD CONSTRAINT supplies_pkey PRIMARY KEY (id);


--
-- Name: transactions transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY transactions
    ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);


--
-- Name: items_category_id_index; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX items_category_id_index ON items USING btree (category_id);


--
-- Name: line_items_item_id_index; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX line_items_item_id_index ON line_items USING btree (item_id);


--
-- Name: line_items_transaction_id_index; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX line_items_transaction_id_index ON line_items USING btree (transaction_id);


--
-- Name: supplies_item_id_index; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX supplies_item_id_index ON supplies USING btree (item_id);


--
-- Name: supplies_supplier_id_index; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX supplies_supplier_id_index ON supplies USING btree (supplier_id);


--
-- Name: transactions_shift_id_index; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX transactions_shift_id_index ON transactions USING btree (shift_id);


--
-- Name: categories simple_pg_2Duc_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2Duc_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2Duc"();


--
-- Name: items simple_pg_2Duc_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2Duc_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2Duc"();


--
-- Name: line_items simple_pg_2Duc_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2Duc_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2Duc"();


--
-- Name: categories simple_pg_2KrT_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2KrT_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2KrT"();


--
-- Name: items simple_pg_2KrT_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2KrT_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2KrT"();


--
-- Name: line_items simple_pg_2KrT_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2KrT_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2KrT"();


--
-- Name: settings simple_pg_2KrT_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2KrT_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2KrT"();


--
-- Name: shifts simple_pg_2KrT_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2KrT_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2KrT"();


--
-- Name: transactions simple_pg_2KrT_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2KrT_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2KrT"();


--
-- Name: categories simple_pg_2bAZ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2bAZ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2bAZ"();


--
-- Name: items simple_pg_2bAZ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2bAZ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2bAZ"();


--
-- Name: line_items simple_pg_2bAZ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2bAZ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2bAZ"();


--
-- Name: settings simple_pg_2bAZ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2bAZ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2bAZ"();


--
-- Name: shifts simple_pg_2bAZ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2bAZ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2bAZ"();


--
-- Name: transactions simple_pg_2bAZ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2bAZ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2bAZ"();


--
-- Name: categories simple_pg_2sS2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2sS2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2sS2"();


--
-- Name: discounts simple_pg_2sS2_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2sS2_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2sS2"();


--
-- Name: items simple_pg_2sS2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2sS2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2sS2"();


--
-- Name: line_items simple_pg_2sS2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2sS2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2sS2"();


--
-- Name: settings simple_pg_2sS2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2sS2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2sS2"();


--
-- Name: shifts simple_pg_2sS2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2sS2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2sS2"();


--
-- Name: transactions simple_pg_2sS2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2sS2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2sS2"();


--
-- Name: categories simple_pg_2uGY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uGY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uGY"();


--
-- Name: items simple_pg_2uGY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uGY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uGY"();


--
-- Name: line_items simple_pg_2uGY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uGY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uGY"();


--
-- Name: settings simple_pg_2uGY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uGY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uGY"();


--
-- Name: shifts simple_pg_2uGY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uGY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uGY"();


--
-- Name: transactions simple_pg_2uGY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uGY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uGY"();


--
-- Name: categories simple_pg_2uRy_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uRy_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uRy"();


--
-- Name: items simple_pg_2uRy_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uRy_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uRy"();


--
-- Name: line_items simple_pg_2uRy_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uRy_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uRy"();


--
-- Name: settings simple_pg_2uRy_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uRy_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uRy"();


--
-- Name: shifts simple_pg_2uRy_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uRy_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uRy"();


--
-- Name: transactions simple_pg_2uRy_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_2uRy_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_2uRy"();


--
-- Name: categories simple_pg_39N4_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39N4_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39N4"();


--
-- Name: items simple_pg_39N4_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39N4_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39N4"();


--
-- Name: line_items simple_pg_39N4_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39N4_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39N4"();


--
-- Name: settings simple_pg_39N4_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39N4_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39N4"();


--
-- Name: shifts simple_pg_39N4_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39N4_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39N4"();


--
-- Name: transactions simple_pg_39N4_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39N4_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39N4"();


--
-- Name: categories simple_pg_39Yx_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39Yx_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39Yx"();


--
-- Name: items simple_pg_39Yx_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39Yx_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39Yx"();


--
-- Name: line_items simple_pg_39Yx_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39Yx_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39Yx"();


--
-- Name: settings simple_pg_39Yx_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39Yx_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39Yx"();


--
-- Name: shifts simple_pg_39Yx_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39Yx_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39Yx"();


--
-- Name: transactions simple_pg_39Yx_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_39Yx_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_39Yx"();


--
-- Name: categories simple_pg_3Hcj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Hcj_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Hcj"();


--
-- Name: items simple_pg_3Hcj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Hcj_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Hcj"();


--
-- Name: line_items simple_pg_3Hcj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Hcj_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Hcj"();


--
-- Name: settings simple_pg_3Hcj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Hcj_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Hcj"();


--
-- Name: shifts simple_pg_3Hcj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Hcj_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Hcj"();


--
-- Name: transactions simple_pg_3Hcj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Hcj_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Hcj"();


--
-- Name: categories simple_pg_3J54_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3J54_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3J54"();


--
-- Name: items simple_pg_3J54_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3J54_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3J54"();


--
-- Name: line_items simple_pg_3J54_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3J54_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3J54"();


--
-- Name: settings simple_pg_3J54_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3J54_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3J54"();


--
-- Name: shifts simple_pg_3J54_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3J54_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3J54"();


--
-- Name: transactions simple_pg_3J54_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3J54_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3J54"();


--
-- Name: categories simple_pg_3KXt_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3KXt_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3KXt"();


--
-- Name: discounts simple_pg_3KXt_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3KXt_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3KXt"();


--
-- Name: items simple_pg_3KXt_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3KXt_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3KXt"();


--
-- Name: line_items simple_pg_3KXt_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3KXt_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3KXt"();


--
-- Name: settings simple_pg_3KXt_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3KXt_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3KXt"();


--
-- Name: shifts simple_pg_3KXt_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3KXt_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3KXt"();


--
-- Name: transactions simple_pg_3KXt_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3KXt_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3KXt"();


--
-- Name: categories simple_pg_3MKM_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3MKM_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3MKM"();


--
-- Name: items simple_pg_3MKM_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3MKM_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3MKM"();


--
-- Name: line_items simple_pg_3MKM_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3MKM_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3MKM"();


--
-- Name: settings simple_pg_3MKM_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3MKM_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3MKM"();


--
-- Name: shifts simple_pg_3MKM_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3MKM_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3MKM"();


--
-- Name: transactions simple_pg_3MKM_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3MKM_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3MKM"();


--
-- Name: categories simple_pg_3Ttk_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Ttk_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Ttk"();


--
-- Name: discounts simple_pg_3Ttk_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Ttk_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Ttk"();


--
-- Name: items simple_pg_3Ttk_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Ttk_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Ttk"();


--
-- Name: line_items simple_pg_3Ttk_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Ttk_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Ttk"();


--
-- Name: settings simple_pg_3Ttk_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Ttk_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Ttk"();


--
-- Name: shifts simple_pg_3Ttk_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Ttk_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Ttk"();


--
-- Name: transactions simple_pg_3Ttk_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3Ttk_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3Ttk"();


--
-- Name: categories simple_pg_3odS_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3odS_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3odS"();


--
-- Name: items simple_pg_3odS_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3odS_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3odS"();


--
-- Name: line_items simple_pg_3odS_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3odS_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3odS"();


--
-- Name: settings simple_pg_3odS_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3odS_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3odS"();


--
-- Name: shifts simple_pg_3odS_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3odS_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3odS"();


--
-- Name: transactions simple_pg_3odS_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_3odS_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_3odS"();


--
-- Name: categories simple_pg_4iS6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4iS6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4iS6"();


--
-- Name: items simple_pg_4iS6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4iS6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4iS6"();


--
-- Name: line_items simple_pg_4iS6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4iS6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4iS6"();


--
-- Name: settings simple_pg_4iS6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4iS6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4iS6"();


--
-- Name: shifts simple_pg_4iS6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4iS6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4iS6"();


--
-- Name: transactions simple_pg_4iS6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4iS6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4iS6"();


--
-- Name: categories simple_pg_4tw3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_4tw3_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_4tw3();


--
-- Name: items simple_pg_4tw3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_4tw3_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_4tw3();


--
-- Name: line_items simple_pg_4tw3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_4tw3_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_4tw3();


--
-- Name: settings simple_pg_4tw3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_4tw3_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_4tw3();


--
-- Name: shifts simple_pg_4tw3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_4tw3_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_4tw3();


--
-- Name: transactions simple_pg_4tw3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_4tw3_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_4tw3();


--
-- Name: categories simple_pg_4xZe_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4xZe_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4xZe"();


--
-- Name: items simple_pg_4xZe_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4xZe_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4xZe"();


--
-- Name: line_items simple_pg_4xZe_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4xZe_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4xZe"();


--
-- Name: settings simple_pg_4xZe_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4xZe_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4xZe"();


--
-- Name: shifts simple_pg_4xZe_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4xZe_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4xZe"();


--
-- Name: transactions simple_pg_4xZe_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_4xZe_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_4xZe"();


--
-- Name: categories simple_pg_53GJ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_53GJ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_53GJ"();


--
-- Name: items simple_pg_53GJ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_53GJ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_53GJ"();


--
-- Name: line_items simple_pg_53GJ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_53GJ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_53GJ"();


--
-- Name: settings simple_pg_53GJ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_53GJ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_53GJ"();


--
-- Name: shifts simple_pg_53GJ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_53GJ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_53GJ"();


--
-- Name: transactions simple_pg_53GJ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_53GJ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_53GJ"();


--
-- Name: categories simple_pg_54zh_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_54zh_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_54zh();


--
-- Name: items simple_pg_54zh_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_54zh_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_54zh();


--
-- Name: line_items simple_pg_54zh_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_54zh_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_54zh();


--
-- Name: settings simple_pg_54zh_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_54zh_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_54zh();


--
-- Name: shifts simple_pg_54zh_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_54zh_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_54zh();


--
-- Name: transactions simple_pg_54zh_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_54zh_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_54zh();


--
-- Name: categories simple_pg_56sk_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_56sk_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_56sk();


--
-- Name: items simple_pg_56sk_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_56sk_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_56sk();


--
-- Name: line_items simple_pg_56sk_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_56sk_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_56sk();


--
-- Name: settings simple_pg_56sk_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_56sk_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_56sk();


--
-- Name: shifts simple_pg_56sk_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_56sk_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_56sk();


--
-- Name: transactions simple_pg_56sk_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_56sk_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_56sk();


--
-- Name: categories simple_pg_5Gf2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5Gf2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5Gf2"();


--
-- Name: items simple_pg_5Gf2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5Gf2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5Gf2"();


--
-- Name: line_items simple_pg_5Gf2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5Gf2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5Gf2"();


--
-- Name: settings simple_pg_5Gf2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5Gf2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5Gf2"();


--
-- Name: shifts simple_pg_5Gf2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5Gf2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5Gf2"();


--
-- Name: transactions simple_pg_5Gf2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5Gf2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5Gf2"();


--
-- Name: categories simple_pg_5YLs_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5YLs_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5YLs"();


--
-- Name: items simple_pg_5YLs_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5YLs_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5YLs"();


--
-- Name: line_items simple_pg_5YLs_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5YLs_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5YLs"();


--
-- Name: settings simple_pg_5YLs_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5YLs_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5YLs"();


--
-- Name: shifts simple_pg_5YLs_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5YLs_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5YLs"();


--
-- Name: transactions simple_pg_5YLs_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5YLs_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5YLs"();


--
-- Name: categories simple_pg_5gW6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5gW6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5gW6"();


--
-- Name: items simple_pg_5gW6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5gW6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5gW6"();


--
-- Name: line_items simple_pg_5gW6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5gW6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5gW6"();


--
-- Name: settings simple_pg_5gW6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5gW6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5gW6"();


--
-- Name: shifts simple_pg_5gW6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5gW6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5gW6"();


--
-- Name: transactions simple_pg_5gW6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5gW6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5gW6"();


--
-- Name: categories simple_pg_5hXB_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5hXB_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5hXB"();


--
-- Name: items simple_pg_5hXB_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5hXB_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5hXB"();


--
-- Name: line_items simple_pg_5hXB_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5hXB_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5hXB"();


--
-- Name: settings simple_pg_5hXB_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5hXB_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5hXB"();


--
-- Name: shifts simple_pg_5hXB_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5hXB_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5hXB"();


--
-- Name: transactions simple_pg_5hXB_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5hXB_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5hXB"();


--
-- Name: categories simple_pg_5iZ2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5iZ2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5iZ2"();


--
-- Name: items simple_pg_5iZ2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5iZ2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5iZ2"();


--
-- Name: line_items simple_pg_5iZ2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5iZ2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5iZ2"();


--
-- Name: settings simple_pg_5iZ2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5iZ2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5iZ2"();


--
-- Name: shifts simple_pg_5iZ2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5iZ2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5iZ2"();


--
-- Name: transactions simple_pg_5iZ2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5iZ2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5iZ2"();


--
-- Name: categories simple_pg_5pC3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5pC3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5pC3"();


--
-- Name: items simple_pg_5pC3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5pC3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5pC3"();


--
-- Name: line_items simple_pg_5pC3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5pC3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5pC3"();


--
-- Name: settings simple_pg_5pC3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5pC3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5pC3"();


--
-- Name: shifts simple_pg_5pC3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5pC3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5pC3"();


--
-- Name: transactions simple_pg_5pC3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5pC3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5pC3"();


--
-- Name: categories simple_pg_5tSr_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5tSr_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5tSr"();


--
-- Name: items simple_pg_5tSr_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5tSr_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5tSr"();


--
-- Name: line_items simple_pg_5tSr_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5tSr_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5tSr"();


--
-- Name: settings simple_pg_5tSr_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5tSr_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5tSr"();


--
-- Name: shifts simple_pg_5tSr_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5tSr_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5tSr"();


--
-- Name: transactions simple_pg_5tSr_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5tSr_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5tSr"();


--
-- Name: categories simple_pg_5uP3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5uP3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5uP3"();


--
-- Name: discounts simple_pg_5uP3_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5uP3_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5uP3"();


--
-- Name: items simple_pg_5uP3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5uP3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5uP3"();


--
-- Name: line_items simple_pg_5uP3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5uP3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5uP3"();


--
-- Name: settings simple_pg_5uP3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5uP3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5uP3"();


--
-- Name: shifts simple_pg_5uP3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5uP3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5uP3"();


--
-- Name: transactions simple_pg_5uP3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_5uP3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_5uP3"();


--
-- Name: categories simple_pg_5yzw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_5yzw_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_5yzw();


--
-- Name: discounts simple_pg_5yzw_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_5yzw_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_5yzw();


--
-- Name: items simple_pg_5yzw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_5yzw_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_5yzw();


--
-- Name: line_items simple_pg_5yzw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_5yzw_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_5yzw();


--
-- Name: settings simple_pg_5yzw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_5yzw_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_5yzw();


--
-- Name: shifts simple_pg_5yzw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_5yzw_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_5yzw();


--
-- Name: transactions simple_pg_5yzw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_5yzw_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_5yzw();


--
-- Name: categories simple_pg_6Cuk_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Cuk_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Cuk"();


--
-- Name: discounts simple_pg_6Cuk_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Cuk_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Cuk"();


--
-- Name: items simple_pg_6Cuk_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Cuk_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Cuk"();


--
-- Name: line_items simple_pg_6Cuk_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Cuk_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Cuk"();


--
-- Name: settings simple_pg_6Cuk_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Cuk_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Cuk"();


--
-- Name: shifts simple_pg_6Cuk_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Cuk_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Cuk"();


--
-- Name: transactions simple_pg_6Cuk_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Cuk_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Cuk"();


--
-- Name: categories simple_pg_6Rrs_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Rrs_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Rrs"();


--
-- Name: items simple_pg_6Rrs_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Rrs_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Rrs"();


--
-- Name: line_items simple_pg_6Rrs_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Rrs_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Rrs"();


--
-- Name: settings simple_pg_6Rrs_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Rrs_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Rrs"();


--
-- Name: shifts simple_pg_6Rrs_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Rrs_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Rrs"();


--
-- Name: transactions simple_pg_6Rrs_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Rrs_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Rrs"();


--
-- Name: categories simple_pg_6Xnz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Xnz_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Xnz"();


--
-- Name: items simple_pg_6Xnz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Xnz_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Xnz"();


--
-- Name: line_items simple_pg_6Xnz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Xnz_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Xnz"();


--
-- Name: settings simple_pg_6Xnz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Xnz_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Xnz"();


--
-- Name: shifts simple_pg_6Xnz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Xnz_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Xnz"();


--
-- Name: transactions simple_pg_6Xnz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6Xnz_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6Xnz"();


--
-- Name: categories simple_pg_6cFQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6cFQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6cFQ"();


--
-- Name: discounts simple_pg_6cFQ_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6cFQ_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6cFQ"();


--
-- Name: items simple_pg_6cFQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6cFQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6cFQ"();


--
-- Name: line_items simple_pg_6cFQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6cFQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6cFQ"();


--
-- Name: settings simple_pg_6cFQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6cFQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6cFQ"();


--
-- Name: shifts simple_pg_6cFQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6cFQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6cFQ"();


--
-- Name: transactions simple_pg_6cFQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6cFQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6cFQ"();


--
-- Name: categories simple_pg_6cit_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6cit_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6cit();


--
-- Name: items simple_pg_6cit_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6cit_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6cit();


--
-- Name: line_items simple_pg_6cit_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6cit_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6cit();


--
-- Name: settings simple_pg_6cit_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6cit_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6cit();


--
-- Name: shifts simple_pg_6cit_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6cit_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6cit();


--
-- Name: transactions simple_pg_6cit_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6cit_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6cit();


--
-- Name: categories simple_pg_6ctN_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6ctN_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6ctN"();


--
-- Name: items simple_pg_6ctN_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6ctN_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6ctN"();


--
-- Name: line_items simple_pg_6ctN_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6ctN_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6ctN"();


--
-- Name: settings simple_pg_6ctN_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6ctN_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6ctN"();


--
-- Name: shifts simple_pg_6ctN_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6ctN_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6ctN"();


--
-- Name: transactions simple_pg_6ctN_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6ctN_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6ctN"();


--
-- Name: categories simple_pg_6mKu_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6mKu_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6mKu"();


--
-- Name: discounts simple_pg_6mKu_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6mKu_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6mKu"();


--
-- Name: items simple_pg_6mKu_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6mKu_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6mKu"();


--
-- Name: line_items simple_pg_6mKu_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6mKu_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6mKu"();


--
-- Name: settings simple_pg_6mKu_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6mKu_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6mKu"();


--
-- Name: shifts simple_pg_6mKu_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6mKu_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6mKu"();


--
-- Name: transactions simple_pg_6mKu_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_6mKu_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_6mKu"();


--
-- Name: categories simple_pg_6mf9_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6mf9_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6mf9();


--
-- Name: discounts simple_pg_6mf9_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6mf9_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6mf9();


--
-- Name: items simple_pg_6mf9_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6mf9_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6mf9();


--
-- Name: line_items simple_pg_6mf9_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6mf9_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6mf9();


--
-- Name: settings simple_pg_6mf9_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6mf9_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6mf9();


--
-- Name: shifts simple_pg_6mf9_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6mf9_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6mf9();


--
-- Name: transactions simple_pg_6mf9_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6mf9_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6mf9();


--
-- Name: categories simple_pg_6z9r_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6z9r_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6z9r();


--
-- Name: items simple_pg_6z9r_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6z9r_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6z9r();


--
-- Name: line_items simple_pg_6z9r_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6z9r_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6z9r();


--
-- Name: settings simple_pg_6z9r_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6z9r_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6z9r();


--
-- Name: shifts simple_pg_6z9r_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6z9r_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6z9r();


--
-- Name: transactions simple_pg_6z9r_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_6z9r_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_6z9r();


--
-- Name: categories simple_pg_73e9_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_73e9_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_73e9();


--
-- Name: items simple_pg_73e9_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_73e9_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_73e9();


--
-- Name: line_items simple_pg_73e9_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_73e9_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_73e9();


--
-- Name: settings simple_pg_73e9_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_73e9_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_73e9();


--
-- Name: shifts simple_pg_73e9_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_73e9_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_73e9();


--
-- Name: transactions simple_pg_73e9_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_73e9_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_73e9();


--
-- Name: categories simple_pg_74dn_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_74dn_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_74dn();


--
-- Name: discounts simple_pg_74dn_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_74dn_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_74dn();


--
-- Name: items simple_pg_74dn_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_74dn_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_74dn();


--
-- Name: line_items simple_pg_74dn_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_74dn_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_74dn();


--
-- Name: settings simple_pg_74dn_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_74dn_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_74dn();


--
-- Name: shifts simple_pg_74dn_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_74dn_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_74dn();


--
-- Name: transactions simple_pg_74dn_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_74dn_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_74dn();


--
-- Name: categories simple_pg_75BD_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_75BD_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_75BD"();


--
-- Name: items simple_pg_75BD_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_75BD_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_75BD"();


--
-- Name: line_items simple_pg_75BD_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_75BD_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_75BD"();


--
-- Name: settings simple_pg_75BD_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_75BD_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_75BD"();


--
-- Name: shifts simple_pg_75BD_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_75BD_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_75BD"();


--
-- Name: transactions simple_pg_75BD_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_75BD_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_75BD"();


--
-- Name: categories simple_pg_7AZc_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7AZc_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7AZc"();


--
-- Name: discounts simple_pg_7AZc_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7AZc_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7AZc"();


--
-- Name: items simple_pg_7AZc_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7AZc_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7AZc"();


--
-- Name: line_items simple_pg_7AZc_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7AZc_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7AZc"();


--
-- Name: settings simple_pg_7AZc_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7AZc_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7AZc"();


--
-- Name: shifts simple_pg_7AZc_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7AZc_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7AZc"();


--
-- Name: transactions simple_pg_7AZc_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7AZc_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7AZc"();


--
-- Name: categories simple_pg_7Md3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7Md3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7Md3"();


--
-- Name: items simple_pg_7Md3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7Md3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7Md3"();


--
-- Name: line_items simple_pg_7Md3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7Md3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7Md3"();


--
-- Name: settings simple_pg_7Md3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7Md3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7Md3"();


--
-- Name: shifts simple_pg_7Md3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7Md3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7Md3"();


--
-- Name: transactions simple_pg_7Md3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7Md3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7Md3"();


--
-- Name: categories simple_pg_7PWj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7PWj_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7PWj"();


--
-- Name: items simple_pg_7PWj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7PWj_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7PWj"();


--
-- Name: line_items simple_pg_7PWj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7PWj_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7PWj"();


--
-- Name: settings simple_pg_7PWj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7PWj_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7PWj"();


--
-- Name: shifts simple_pg_7PWj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7PWj_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7PWj"();


--
-- Name: transactions simple_pg_7PWj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_7PWj_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_7PWj"();


--
-- Name: categories simple_pg_8Dzk_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Dzk_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Dzk"();


--
-- Name: items simple_pg_8Dzk_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Dzk_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Dzk"();


--
-- Name: line_items simple_pg_8Dzk_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Dzk_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Dzk"();


--
-- Name: settings simple_pg_8Dzk_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Dzk_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Dzk"();


--
-- Name: shifts simple_pg_8Dzk_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Dzk_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Dzk"();


--
-- Name: transactions simple_pg_8Dzk_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Dzk_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Dzk"();


--
-- Name: categories simple_pg_8Npz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Npz_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Npz"();


--
-- Name: items simple_pg_8Npz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Npz_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Npz"();


--
-- Name: line_items simple_pg_8Npz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Npz_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Npz"();


--
-- Name: settings simple_pg_8Npz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Npz_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Npz"();


--
-- Name: shifts simple_pg_8Npz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Npz_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Npz"();


--
-- Name: transactions simple_pg_8Npz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8Npz_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8Npz"();


--
-- Name: categories simple_pg_8fkx_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_8fkx_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_8fkx();


--
-- Name: items simple_pg_8fkx_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_8fkx_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_8fkx();


--
-- Name: line_items simple_pg_8fkx_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_8fkx_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_8fkx();


--
-- Name: settings simple_pg_8fkx_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_8fkx_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_8fkx();


--
-- Name: shifts simple_pg_8fkx_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_8fkx_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_8fkx();


--
-- Name: transactions simple_pg_8fkx_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_8fkx_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_8fkx();


--
-- Name: categories simple_pg_8hA6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hA6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hA6"();


--
-- Name: items simple_pg_8hA6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hA6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hA6"();


--
-- Name: line_items simple_pg_8hA6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hA6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hA6"();


--
-- Name: settings simple_pg_8hA6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hA6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hA6"();


--
-- Name: shifts simple_pg_8hA6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hA6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hA6"();


--
-- Name: transactions simple_pg_8hA6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hA6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hA6"();


--
-- Name: categories simple_pg_8hGg_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hGg_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hGg"();


--
-- Name: discounts simple_pg_8hGg_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hGg_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hGg"();


--
-- Name: items simple_pg_8hGg_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hGg_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hGg"();


--
-- Name: line_items simple_pg_8hGg_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hGg_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hGg"();


--
-- Name: settings simple_pg_8hGg_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hGg_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hGg"();


--
-- Name: shifts simple_pg_8hGg_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hGg_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hGg"();


--
-- Name: transactions simple_pg_8hGg_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_8hGg_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_8hGg"();


--
-- Name: categories simple_pg_98Sz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_98Sz_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_98Sz"();


--
-- Name: items simple_pg_98Sz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_98Sz_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_98Sz"();


--
-- Name: line_items simple_pg_98Sz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_98Sz_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_98Sz"();


--
-- Name: settings simple_pg_98Sz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_98Sz_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_98Sz"();


--
-- Name: shifts simple_pg_98Sz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_98Sz_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_98Sz"();


--
-- Name: transactions simple_pg_98Sz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_98Sz_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_98Sz"();


--
-- Name: categories simple_pg_9QEh_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9QEh_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9QEh"();


--
-- Name: items simple_pg_9QEh_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9QEh_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9QEh"();


--
-- Name: line_items simple_pg_9QEh_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9QEh_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9QEh"();


--
-- Name: settings simple_pg_9QEh_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9QEh_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9QEh"();


--
-- Name: shifts simple_pg_9QEh_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9QEh_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9QEh"();


--
-- Name: transactions simple_pg_9QEh_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9QEh_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9QEh"();


--
-- Name: categories simple_pg_9v64_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_9v64_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_9v64();


--
-- Name: items simple_pg_9v64_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_9v64_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_9v64();


--
-- Name: line_items simple_pg_9v64_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_9v64_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_9v64();


--
-- Name: settings simple_pg_9v64_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_9v64_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_9v64();


--
-- Name: shifts simple_pg_9v64_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_9v64_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_9v64();


--
-- Name: transactions simple_pg_9v64_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_9v64_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_9v64();


--
-- Name: categories simple_pg_9xTQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9xTQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9xTQ"();


--
-- Name: items simple_pg_9xTQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9xTQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9xTQ"();


--
-- Name: line_items simple_pg_9xTQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9xTQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9xTQ"();


--
-- Name: settings simple_pg_9xTQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9xTQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9xTQ"();


--
-- Name: shifts simple_pg_9xTQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9xTQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9xTQ"();


--
-- Name: transactions simple_pg_9xTQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_9xTQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_9xTQ"();


--
-- Name: categories simple_pg_A4Yw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A4Yw_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A4Yw"();


--
-- Name: items simple_pg_A4Yw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A4Yw_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A4Yw"();


--
-- Name: line_items simple_pg_A4Yw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A4Yw_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A4Yw"();


--
-- Name: settings simple_pg_A4Yw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A4Yw_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A4Yw"();


--
-- Name: shifts simple_pg_A4Yw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A4Yw_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A4Yw"();


--
-- Name: transactions simple_pg_A4Yw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A4Yw_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A4Yw"();


--
-- Name: categories simple_pg_A7mx_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A7mx_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A7mx"();


--
-- Name: items simple_pg_A7mx_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A7mx_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A7mx"();


--
-- Name: line_items simple_pg_A7mx_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A7mx_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A7mx"();


--
-- Name: settings simple_pg_A7mx_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A7mx_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A7mx"();


--
-- Name: shifts simple_pg_A7mx_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A7mx_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A7mx"();


--
-- Name: transactions simple_pg_A7mx_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_A7mx_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_A7mx"();


--
-- Name: categories simple_pg_AEKz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AEKz_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AEKz"();


--
-- Name: items simple_pg_AEKz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AEKz_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AEKz"();


--
-- Name: line_items simple_pg_AEKz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AEKz_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AEKz"();


--
-- Name: settings simple_pg_AEKz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AEKz_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AEKz"();


--
-- Name: shifts simple_pg_AEKz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AEKz_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AEKz"();


--
-- Name: transactions simple_pg_AEKz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AEKz_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AEKz"();


--
-- Name: categories simple_pg_AZLX_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AZLX_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AZLX"();


--
-- Name: items simple_pg_AZLX_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AZLX_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AZLX"();


--
-- Name: line_items simple_pg_AZLX_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AZLX_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AZLX"();


--
-- Name: settings simple_pg_AZLX_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AZLX_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AZLX"();


--
-- Name: shifts simple_pg_AZLX_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AZLX_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AZLX"();


--
-- Name: transactions simple_pg_AZLX_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AZLX_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AZLX"();


--
-- Name: categories simple_pg_Ab5n_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ab5n_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ab5n"();


--
-- Name: discounts simple_pg_Ab5n_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ab5n_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ab5n"();


--
-- Name: items simple_pg_Ab5n_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ab5n_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ab5n"();


--
-- Name: line_items simple_pg_Ab5n_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ab5n_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ab5n"();


--
-- Name: settings simple_pg_Ab5n_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ab5n_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ab5n"();


--
-- Name: shifts simple_pg_Ab5n_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ab5n_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ab5n"();


--
-- Name: transactions simple_pg_Ab5n_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ab5n_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ab5n"();


--
-- Name: categories simple_pg_AgZN_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AgZN_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AgZN"();


--
-- Name: items simple_pg_AgZN_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AgZN_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AgZN"();


--
-- Name: line_items simple_pg_AgZN_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AgZN_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AgZN"();


--
-- Name: settings simple_pg_AgZN_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AgZN_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AgZN"();


--
-- Name: shifts simple_pg_AgZN_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AgZN_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AgZN"();


--
-- Name: transactions simple_pg_AgZN_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AgZN_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AgZN"();


--
-- Name: categories simple_pg_AwjX_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AwjX_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AwjX"();


--
-- Name: items simple_pg_AwjX_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AwjX_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AwjX"();


--
-- Name: line_items simple_pg_AwjX_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AwjX_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AwjX"();


--
-- Name: settings simple_pg_AwjX_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AwjX_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AwjX"();


--
-- Name: shifts simple_pg_AwjX_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AwjX_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AwjX"();


--
-- Name: transactions simple_pg_AwjX_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_AwjX_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_AwjX"();


--
-- Name: categories simple_pg_Ayzt_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ayzt_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ayzt"();


--
-- Name: items simple_pg_Ayzt_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ayzt_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ayzt"();


--
-- Name: line_items simple_pg_Ayzt_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ayzt_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ayzt"();


--
-- Name: settings simple_pg_Ayzt_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ayzt_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ayzt"();


--
-- Name: shifts simple_pg_Ayzt_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ayzt_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ayzt"();


--
-- Name: transactions simple_pg_Ayzt_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ayzt_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ayzt"();


--
-- Name: categories simple_pg_BCXi_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BCXi_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BCXi"();


--
-- Name: items simple_pg_BCXi_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BCXi_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BCXi"();


--
-- Name: line_items simple_pg_BCXi_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BCXi_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BCXi"();


--
-- Name: settings simple_pg_BCXi_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BCXi_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BCXi"();


--
-- Name: shifts simple_pg_BCXi_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BCXi_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BCXi"();


--
-- Name: transactions simple_pg_BCXi_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BCXi_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BCXi"();


--
-- Name: categories simple_pg_BDao_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BDao_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BDao"();


--
-- Name: items simple_pg_BDao_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BDao_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BDao"();


--
-- Name: line_items simple_pg_BDao_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BDao_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BDao"();


--
-- Name: settings simple_pg_BDao_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BDao_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BDao"();


--
-- Name: shifts simple_pg_BDao_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BDao_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BDao"();


--
-- Name: transactions simple_pg_BDao_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BDao_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BDao"();


--
-- Name: categories simple_pg_BPdc_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BPdc_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BPdc"();


--
-- Name: items simple_pg_BPdc_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BPdc_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BPdc"();


--
-- Name: line_items simple_pg_BPdc_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BPdc_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BPdc"();


--
-- Name: settings simple_pg_BPdc_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BPdc_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BPdc"();


--
-- Name: shifts simple_pg_BPdc_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BPdc_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BPdc"();


--
-- Name: transactions simple_pg_BPdc_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BPdc_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BPdc"();


--
-- Name: categories simple_pg_BaBh_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BaBh_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BaBh"();


--
-- Name: items simple_pg_BaBh_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BaBh_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BaBh"();


--
-- Name: line_items simple_pg_BaBh_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BaBh_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BaBh"();


--
-- Name: settings simple_pg_BaBh_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BaBh_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BaBh"();


--
-- Name: shifts simple_pg_BaBh_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BaBh_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BaBh"();


--
-- Name: transactions simple_pg_BaBh_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_BaBh_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_BaBh"();


--
-- Name: categories simple_pg_Bk4C_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Bk4C_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Bk4C"();


--
-- Name: items simple_pg_Bk4C_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Bk4C_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Bk4C"();


--
-- Name: categories simple_pg_Bkzu_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Bkzu_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Bkzu"();


--
-- Name: items simple_pg_Bkzu_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Bkzu_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Bkzu"();


--
-- Name: line_items simple_pg_Bkzu_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Bkzu_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Bkzu"();


--
-- Name: settings simple_pg_Bkzu_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Bkzu_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Bkzu"();


--
-- Name: shifts simple_pg_Bkzu_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Bkzu_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Bkzu"();


--
-- Name: transactions simple_pg_Bkzu_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Bkzu_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Bkzu"();


--
-- Name: categories simple_pg_CCw3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CCw3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CCw3"();


--
-- Name: items simple_pg_CCw3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CCw3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CCw3"();


--
-- Name: line_items simple_pg_CCw3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CCw3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CCw3"();


--
-- Name: settings simple_pg_CCw3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CCw3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CCw3"();


--
-- Name: shifts simple_pg_CCw3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CCw3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CCw3"();


--
-- Name: transactions simple_pg_CCw3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CCw3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CCw3"();


--
-- Name: categories simple_pg_CNv7_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CNv7_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CNv7"();


--
-- Name: items simple_pg_CNv7_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CNv7_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CNv7"();


--
-- Name: categories simple_pg_CaMB_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CaMB_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CaMB"();


--
-- Name: items simple_pg_CaMB_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CaMB_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CaMB"();


--
-- Name: line_items simple_pg_CaMB_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CaMB_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CaMB"();


--
-- Name: settings simple_pg_CaMB_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CaMB_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CaMB"();


--
-- Name: shifts simple_pg_CaMB_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CaMB_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CaMB"();


--
-- Name: transactions simple_pg_CaMB_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CaMB_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CaMB"();


--
-- Name: categories simple_pg_CeXP_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CeXP_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CeXP"();


--
-- Name: discounts simple_pg_CeXP_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CeXP_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CeXP"();


--
-- Name: items simple_pg_CeXP_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CeXP_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CeXP"();


--
-- Name: line_items simple_pg_CeXP_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CeXP_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CeXP"();


--
-- Name: settings simple_pg_CeXP_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CeXP_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CeXP"();


--
-- Name: shifts simple_pg_CeXP_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CeXP_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CeXP"();


--
-- Name: transactions simple_pg_CeXP_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CeXP_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CeXP"();


--
-- Name: categories simple_pg_CiQa_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CiQa_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CiQa"();


--
-- Name: items simple_pg_CiQa_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CiQa_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CiQa"();


--
-- Name: line_items simple_pg_CiQa_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CiQa_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CiQa"();


--
-- Name: settings simple_pg_CiQa_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CiQa_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CiQa"();


--
-- Name: shifts simple_pg_CiQa_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CiQa_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CiQa"();


--
-- Name: transactions simple_pg_CiQa_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CiQa_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CiQa"();


--
-- Name: categories simple_pg_CppZ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CppZ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CppZ"();


--
-- Name: items simple_pg_CppZ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CppZ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CppZ"();


--
-- Name: line_items simple_pg_CppZ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CppZ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CppZ"();


--
-- Name: settings simple_pg_CppZ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CppZ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CppZ"();


--
-- Name: shifts simple_pg_CppZ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CppZ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CppZ"();


--
-- Name: transactions simple_pg_CppZ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CppZ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CppZ"();


--
-- Name: categories simple_pg_CxdR_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CxdR_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CxdR"();


--
-- Name: items simple_pg_CxdR_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CxdR_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CxdR"();


--
-- Name: line_items simple_pg_CxdR_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CxdR_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CxdR"();


--
-- Name: settings simple_pg_CxdR_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CxdR_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CxdR"();


--
-- Name: shifts simple_pg_CxdR_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CxdR_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CxdR"();


--
-- Name: transactions simple_pg_CxdR_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_CxdR_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_CxdR"();


--
-- Name: categories simple_pg_D4FC_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_D4FC_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_D4FC"();


--
-- Name: items simple_pg_D4FC_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_D4FC_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_D4FC"();


--
-- Name: line_items simple_pg_D4FC_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_D4FC_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_D4FC"();


--
-- Name: settings simple_pg_D4FC_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_D4FC_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_D4FC"();


--
-- Name: shifts simple_pg_D4FC_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_D4FC_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_D4FC"();


--
-- Name: transactions simple_pg_D4FC_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_D4FC_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_D4FC"();


--
-- Name: categories simple_pg_DGZY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGZY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGZY"();


--
-- Name: items simple_pg_DGZY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGZY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGZY"();


--
-- Name: line_items simple_pg_DGZY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGZY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGZY"();


--
-- Name: settings simple_pg_DGZY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGZY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGZY"();


--
-- Name: shifts simple_pg_DGZY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGZY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGZY"();


--
-- Name: transactions simple_pg_DGZY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGZY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGZY"();


--
-- Name: categories simple_pg_DGxn_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGxn_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGxn"();


--
-- Name: items simple_pg_DGxn_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGxn_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGxn"();


--
-- Name: line_items simple_pg_DGxn_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGxn_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGxn"();


--
-- Name: settings simple_pg_DGxn_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGxn_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGxn"();


--
-- Name: shifts simple_pg_DGxn_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGxn_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGxn"();


--
-- Name: transactions simple_pg_DGxn_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DGxn_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DGxn"();


--
-- Name: categories simple_pg_DSX4_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DSX4_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DSX4"();


--
-- Name: items simple_pg_DSX4_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DSX4_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DSX4"();


--
-- Name: line_items simple_pg_DSX4_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DSX4_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DSX4"();


--
-- Name: settings simple_pg_DSX4_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DSX4_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DSX4"();


--
-- Name: shifts simple_pg_DSX4_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DSX4_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DSX4"();


--
-- Name: transactions simple_pg_DSX4_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DSX4_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DSX4"();


--
-- Name: categories simple_pg_Di6j_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Di6j_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Di6j"();


--
-- Name: items simple_pg_Di6j_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Di6j_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Di6j"();


--
-- Name: line_items simple_pg_Di6j_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Di6j_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Di6j"();


--
-- Name: settings simple_pg_Di6j_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Di6j_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Di6j"();


--
-- Name: shifts simple_pg_Di6j_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Di6j_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Di6j"();


--
-- Name: transactions simple_pg_Di6j_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Di6j_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Di6j"();


--
-- Name: categories simple_pg_DrxW_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DrxW_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DrxW"();


--
-- Name: items simple_pg_DrxW_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DrxW_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DrxW"();


--
-- Name: line_items simple_pg_DrxW_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DrxW_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DrxW"();


--
-- Name: settings simple_pg_DrxW_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DrxW_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DrxW"();


--
-- Name: shifts simple_pg_DrxW_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DrxW_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DrxW"();


--
-- Name: transactions simple_pg_DrxW_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DrxW_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DrxW"();


--
-- Name: categories simple_pg_Dtbr_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Dtbr_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Dtbr"();


--
-- Name: items simple_pg_Dtbr_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Dtbr_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Dtbr"();


--
-- Name: line_items simple_pg_Dtbr_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Dtbr_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Dtbr"();


--
-- Name: settings simple_pg_Dtbr_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Dtbr_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Dtbr"();


--
-- Name: shifts simple_pg_Dtbr_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Dtbr_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Dtbr"();


--
-- Name: transactions simple_pg_Dtbr_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Dtbr_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Dtbr"();


--
-- Name: categories simple_pg_DtxQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DtxQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DtxQ"();


--
-- Name: items simple_pg_DtxQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DtxQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DtxQ"();


--
-- Name: line_items simple_pg_DtxQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DtxQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DtxQ"();


--
-- Name: settings simple_pg_DtxQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DtxQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DtxQ"();


--
-- Name: shifts simple_pg_DtxQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DtxQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DtxQ"();


--
-- Name: transactions simple_pg_DtxQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DtxQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DtxQ"();


--
-- Name: categories simple_pg_DuqX_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DuqX_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DuqX"();


--
-- Name: items simple_pg_DuqX_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DuqX_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DuqX"();


--
-- Name: line_items simple_pg_DuqX_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DuqX_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DuqX"();


--
-- Name: settings simple_pg_DuqX_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DuqX_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DuqX"();


--
-- Name: shifts simple_pg_DuqX_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DuqX_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DuqX"();


--
-- Name: transactions simple_pg_DuqX_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_DuqX_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_DuqX"();


--
-- Name: categories simple_pg_E7DA_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_E7DA_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_E7DA"();


--
-- Name: items simple_pg_E7DA_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_E7DA_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_E7DA"();


--
-- Name: line_items simple_pg_E7DA_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_E7DA_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_E7DA"();


--
-- Name: settings simple_pg_E7DA_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_E7DA_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_E7DA"();


--
-- Name: shifts simple_pg_E7DA_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_E7DA_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_E7DA"();


--
-- Name: transactions simple_pg_E7DA_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_E7DA_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_E7DA"();


--
-- Name: categories simple_pg_EFQy_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_EFQy_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_EFQy"();


--
-- Name: items simple_pg_EFQy_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_EFQy_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_EFQy"();


--
-- Name: line_items simple_pg_EFQy_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_EFQy_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_EFQy"();


--
-- Name: settings simple_pg_EFQy_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_EFQy_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_EFQy"();


--
-- Name: shifts simple_pg_EFQy_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_EFQy_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_EFQy"();


--
-- Name: transactions simple_pg_EFQy_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_EFQy_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_EFQy"();


--
-- Name: categories simple_pg_Es85_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Es85_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Es85"();


--
-- Name: items simple_pg_Es85_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Es85_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Es85"();


--
-- Name: line_items simple_pg_Es85_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Es85_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Es85"();


--
-- Name: settings simple_pg_Es85_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Es85_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Es85"();


--
-- Name: shifts simple_pg_Es85_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Es85_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Es85"();


--
-- Name: transactions simple_pg_Es85_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Es85_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Es85"();


--
-- Name: categories simple_pg_Eyvc_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Eyvc_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Eyvc"();


--
-- Name: discounts simple_pg_Eyvc_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Eyvc_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Eyvc"();


--
-- Name: items simple_pg_Eyvc_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Eyvc_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Eyvc"();


--
-- Name: line_items simple_pg_Eyvc_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Eyvc_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Eyvc"();


--
-- Name: settings simple_pg_Eyvc_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Eyvc_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Eyvc"();


--
-- Name: shifts simple_pg_Eyvc_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Eyvc_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Eyvc"();


--
-- Name: transactions simple_pg_Eyvc_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Eyvc_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Eyvc"();


--
-- Name: categories simple_pg_F2q5_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F2q5_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F2q5"();


--
-- Name: items simple_pg_F2q5_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F2q5_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F2q5"();


--
-- Name: line_items simple_pg_F2q5_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F2q5_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F2q5"();


--
-- Name: settings simple_pg_F2q5_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F2q5_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F2q5"();


--
-- Name: shifts simple_pg_F2q5_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F2q5_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F2q5"();


--
-- Name: transactions simple_pg_F2q5_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F2q5_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F2q5"();


--
-- Name: categories simple_pg_F3FZ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F3FZ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F3FZ"();


--
-- Name: discounts simple_pg_F3FZ_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F3FZ_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F3FZ"();


--
-- Name: items simple_pg_F3FZ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F3FZ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F3FZ"();


--
-- Name: line_items simple_pg_F3FZ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F3FZ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F3FZ"();


--
-- Name: settings simple_pg_F3FZ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F3FZ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F3FZ"();


--
-- Name: shifts simple_pg_F3FZ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F3FZ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F3FZ"();


--
-- Name: transactions simple_pg_F3FZ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F3FZ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F3FZ"();


--
-- Name: categories simple_pg_F4Sv_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F4Sv_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F4Sv"();


--
-- Name: items simple_pg_F4Sv_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F4Sv_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F4Sv"();


--
-- Name: line_items simple_pg_F4Sv_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F4Sv_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F4Sv"();


--
-- Name: settings simple_pg_F4Sv_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F4Sv_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F4Sv"();


--
-- Name: shifts simple_pg_F4Sv_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F4Sv_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F4Sv"();


--
-- Name: transactions simple_pg_F4Sv_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F4Sv_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F4Sv"();


--
-- Name: categories simple_pg_F6Bw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F6Bw_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F6Bw"();


--
-- Name: items simple_pg_F6Bw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F6Bw_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F6Bw"();


--
-- Name: line_items simple_pg_F6Bw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F6Bw_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F6Bw"();


--
-- Name: settings simple_pg_F6Bw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F6Bw_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F6Bw"();


--
-- Name: shifts simple_pg_F6Bw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F6Bw_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F6Bw"();


--
-- Name: transactions simple_pg_F6Bw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_F6Bw_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_F6Bw"();


--
-- Name: categories simple_pg_FHnu_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FHnu_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FHnu"();


--
-- Name: items simple_pg_FHnu_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FHnu_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FHnu"();


--
-- Name: line_items simple_pg_FHnu_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FHnu_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FHnu"();


--
-- Name: settings simple_pg_FHnu_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FHnu_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FHnu"();


--
-- Name: shifts simple_pg_FHnu_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FHnu_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FHnu"();


--
-- Name: transactions simple_pg_FHnu_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FHnu_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FHnu"();


--
-- Name: categories simple_pg_FJH3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FJH3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FJH3"();


--
-- Name: items simple_pg_FJH3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FJH3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FJH3"();


--
-- Name: line_items simple_pg_FJH3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FJH3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FJH3"();


--
-- Name: settings simple_pg_FJH3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FJH3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FJH3"();


--
-- Name: shifts simple_pg_FJH3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FJH3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FJH3"();


--
-- Name: transactions simple_pg_FJH3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FJH3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FJH3"();


--
-- Name: categories simple_pg_FTZd_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTZd_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTZd"();


--
-- Name: items simple_pg_FTZd_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTZd_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTZd"();


--
-- Name: line_items simple_pg_FTZd_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTZd_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTZd"();


--
-- Name: settings simple_pg_FTZd_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTZd_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTZd"();


--
-- Name: shifts simple_pg_FTZd_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTZd_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTZd"();


--
-- Name: transactions simple_pg_FTZd_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTZd_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTZd"();


--
-- Name: categories simple_pg_FTns_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTns_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTns"();


--
-- Name: items simple_pg_FTns_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTns_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTns"();


--
-- Name: line_items simple_pg_FTns_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTns_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTns"();


--
-- Name: settings simple_pg_FTns_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTns_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTns"();


--
-- Name: shifts simple_pg_FTns_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTns_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTns"();


--
-- Name: transactions simple_pg_FTns_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FTns_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FTns"();


--
-- Name: categories simple_pg_FXYZ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FXYZ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FXYZ"();


--
-- Name: items simple_pg_FXYZ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FXYZ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FXYZ"();


--
-- Name: line_items simple_pg_FXYZ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FXYZ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FXYZ"();


--
-- Name: settings simple_pg_FXYZ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FXYZ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FXYZ"();


--
-- Name: shifts simple_pg_FXYZ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FXYZ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FXYZ"();


--
-- Name: transactions simple_pg_FXYZ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FXYZ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FXYZ"();


--
-- Name: categories simple_pg_FajF_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FajF_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FajF"();


--
-- Name: items simple_pg_FajF_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FajF_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FajF"();


--
-- Name: line_items simple_pg_FajF_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FajF_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FajF"();


--
-- Name: settings simple_pg_FajF_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FajF_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FajF"();


--
-- Name: shifts simple_pg_FajF_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FajF_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FajF"();


--
-- Name: transactions simple_pg_FajF_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FajF_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FajF"();


--
-- Name: categories simple_pg_FceT_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FceT_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FceT"();


--
-- Name: items simple_pg_FceT_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FceT_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FceT"();


--
-- Name: line_items simple_pg_FceT_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FceT_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FceT"();


--
-- Name: settings simple_pg_FceT_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FceT_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FceT"();


--
-- Name: shifts simple_pg_FceT_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FceT_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FceT"();


--
-- Name: transactions simple_pg_FceT_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FceT_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FceT"();


--
-- Name: categories simple_pg_FiA5_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiA5_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiA5"();


--
-- Name: items simple_pg_FiA5_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiA5_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiA5"();


--
-- Name: line_items simple_pg_FiA5_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiA5_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiA5"();


--
-- Name: settings simple_pg_FiA5_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiA5_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiA5"();


--
-- Name: shifts simple_pg_FiA5_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiA5_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiA5"();


--
-- Name: transactions simple_pg_FiA5_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiA5_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiA5"();


--
-- Name: categories simple_pg_FiHR_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiHR_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiHR"();


--
-- Name: items simple_pg_FiHR_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiHR_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiHR"();


--
-- Name: line_items simple_pg_FiHR_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiHR_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiHR"();


--
-- Name: settings simple_pg_FiHR_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiHR_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiHR"();


--
-- Name: shifts simple_pg_FiHR_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiHR_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiHR"();


--
-- Name: transactions simple_pg_FiHR_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FiHR_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FiHR"();


--
-- Name: categories simple_pg_Fidz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fidz_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fidz"();


--
-- Name: items simple_pg_Fidz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fidz_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fidz"();


--
-- Name: line_items simple_pg_Fidz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fidz_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fidz"();


--
-- Name: settings simple_pg_Fidz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fidz_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fidz"();


--
-- Name: shifts simple_pg_Fidz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fidz_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fidz"();


--
-- Name: transactions simple_pg_Fidz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fidz_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fidz"();


--
-- Name: categories simple_pg_Fihv_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fihv_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fihv"();


--
-- Name: discounts simple_pg_Fihv_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fihv_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fihv"();


--
-- Name: items simple_pg_Fihv_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fihv_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fihv"();


--
-- Name: line_items simple_pg_Fihv_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fihv_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fihv"();


--
-- Name: settings simple_pg_Fihv_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fihv_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fihv"();


--
-- Name: shifts simple_pg_Fihv_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fihv_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fihv"();


--
-- Name: transactions simple_pg_Fihv_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Fihv_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Fihv"();


--
-- Name: categories simple_pg_FrYb_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FrYb_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FrYb"();


--
-- Name: discounts simple_pg_FrYb_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FrYb_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FrYb"();


--
-- Name: items simple_pg_FrYb_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FrYb_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FrYb"();


--
-- Name: line_items simple_pg_FrYb_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FrYb_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FrYb"();


--
-- Name: settings simple_pg_FrYb_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FrYb_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FrYb"();


--
-- Name: shifts simple_pg_FrYb_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FrYb_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FrYb"();


--
-- Name: transactions simple_pg_FrYb_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FrYb_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FrYb"();


--
-- Name: categories simple_pg_FswZ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FswZ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FswZ"();


--
-- Name: discounts simple_pg_FswZ_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FswZ_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FswZ"();


--
-- Name: items simple_pg_FswZ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FswZ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FswZ"();


--
-- Name: line_items simple_pg_FswZ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FswZ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FswZ"();


--
-- Name: settings simple_pg_FswZ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FswZ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FswZ"();


--
-- Name: shifts simple_pg_FswZ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FswZ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FswZ"();


--
-- Name: transactions simple_pg_FswZ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_FswZ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_FswZ"();


--
-- Name: categories simple_pg_Ftwq_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ftwq_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ftwq"();


--
-- Name: items simple_pg_Ftwq_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Ftwq_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Ftwq"();


--
-- Name: categories simple_pg_G9qY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_G9qY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_G9qY"();


--
-- Name: items simple_pg_G9qY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_G9qY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_G9qY"();


--
-- Name: line_items simple_pg_G9qY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_G9qY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_G9qY"();


--
-- Name: settings simple_pg_G9qY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_G9qY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_G9qY"();


--
-- Name: shifts simple_pg_G9qY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_G9qY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_G9qY"();


--
-- Name: transactions simple_pg_G9qY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_G9qY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_G9qY"();


--
-- Name: categories simple_pg_GHXj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GHXj_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GHXj"();


--
-- Name: items simple_pg_GHXj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GHXj_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GHXj"();


--
-- Name: line_items simple_pg_GHXj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GHXj_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GHXj"();


--
-- Name: settings simple_pg_GHXj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GHXj_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GHXj"();


--
-- Name: shifts simple_pg_GHXj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GHXj_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GHXj"();


--
-- Name: transactions simple_pg_GHXj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GHXj_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GHXj"();


--
-- Name: categories simple_pg_GK89_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GK89_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GK89"();


--
-- Name: discounts simple_pg_GK89_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GK89_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GK89"();


--
-- Name: items simple_pg_GK89_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GK89_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GK89"();


--
-- Name: line_items simple_pg_GK89_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GK89_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GK89"();


--
-- Name: settings simple_pg_GK89_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GK89_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GK89"();


--
-- Name: shifts simple_pg_GK89_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GK89_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GK89"();


--
-- Name: transactions simple_pg_GK89_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GK89_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GK89"();


--
-- Name: categories simple_pg_GT2Y_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GT2Y_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GT2Y"();


--
-- Name: items simple_pg_GT2Y_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GT2Y_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GT2Y"();


--
-- Name: line_items simple_pg_GT2Y_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GT2Y_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GT2Y"();


--
-- Name: settings simple_pg_GT2Y_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GT2Y_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GT2Y"();


--
-- Name: shifts simple_pg_GT2Y_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GT2Y_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GT2Y"();


--
-- Name: transactions simple_pg_GT2Y_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GT2Y_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GT2Y"();


--
-- Name: categories simple_pg_GbMc_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GbMc_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GbMc"();


--
-- Name: items simple_pg_GbMc_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GbMc_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GbMc"();


--
-- Name: line_items simple_pg_GbMc_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GbMc_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GbMc"();


--
-- Name: settings simple_pg_GbMc_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GbMc_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GbMc"();


--
-- Name: shifts simple_pg_GbMc_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GbMc_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GbMc"();


--
-- Name: transactions simple_pg_GbMc_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GbMc_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GbMc"();


--
-- Name: categories simple_pg_GoxR_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GoxR_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GoxR"();


--
-- Name: items simple_pg_GoxR_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GoxR_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GoxR"();


--
-- Name: line_items simple_pg_GoxR_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GoxR_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GoxR"();


--
-- Name: settings simple_pg_GoxR_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GoxR_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GoxR"();


--
-- Name: shifts simple_pg_GoxR_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GoxR_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GoxR"();


--
-- Name: transactions simple_pg_GoxR_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_GoxR_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_GoxR"();


--
-- Name: categories simple_pg_Gz6n_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Gz6n_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Gz6n"();


--
-- Name: items simple_pg_Gz6n_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Gz6n_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Gz6n"();


--
-- Name: line_items simple_pg_Gz6n_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Gz6n_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Gz6n"();


--
-- Name: settings simple_pg_Gz6n_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Gz6n_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Gz6n"();


--
-- Name: shifts simple_pg_Gz6n_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Gz6n_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Gz6n"();


--
-- Name: transactions simple_pg_Gz6n_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Gz6n_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Gz6n"();


--
-- Name: categories simple_pg_H766_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_H766_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_H766"();


--
-- Name: items simple_pg_H766_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_H766_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_H766"();


--
-- Name: line_items simple_pg_H766_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_H766_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_H766"();


--
-- Name: settings simple_pg_H766_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_H766_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_H766"();


--
-- Name: shifts simple_pg_H766_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_H766_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_H766"();


--
-- Name: transactions simple_pg_H766_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_H766_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_H766"();


--
-- Name: categories simple_pg_HDNL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HDNL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HDNL"();


--
-- Name: discounts simple_pg_HDNL_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HDNL_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HDNL"();


--
-- Name: items simple_pg_HDNL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HDNL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HDNL"();


--
-- Name: line_items simple_pg_HDNL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HDNL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HDNL"();


--
-- Name: settings simple_pg_HDNL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HDNL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HDNL"();


--
-- Name: shifts simple_pg_HDNL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HDNL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HDNL"();


--
-- Name: transactions simple_pg_HDNL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HDNL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HDNL"();


--
-- Name: categories simple_pg_HGZx_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HGZx_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HGZx"();


--
-- Name: discounts simple_pg_HGZx_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HGZx_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HGZx"();


--
-- Name: items simple_pg_HGZx_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HGZx_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HGZx"();


--
-- Name: line_items simple_pg_HGZx_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HGZx_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HGZx"();


--
-- Name: settings simple_pg_HGZx_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HGZx_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HGZx"();


--
-- Name: shifts simple_pg_HGZx_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HGZx_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HGZx"();


--
-- Name: transactions simple_pg_HGZx_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HGZx_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HGZx"();


--
-- Name: categories simple_pg_HNXp_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HNXp_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HNXp"();


--
-- Name: discounts simple_pg_HNXp_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HNXp_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HNXp"();


--
-- Name: items simple_pg_HNXp_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HNXp_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HNXp"();


--
-- Name: line_items simple_pg_HNXp_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HNXp_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HNXp"();


--
-- Name: settings simple_pg_HNXp_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HNXp_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HNXp"();


--
-- Name: shifts simple_pg_HNXp_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HNXp_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HNXp"();


--
-- Name: transactions simple_pg_HNXp_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_HNXp_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_HNXp"();


--
-- Name: categories simple_pg_Hkrg_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hkrg_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hkrg"();


--
-- Name: discounts simple_pg_Hkrg_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hkrg_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hkrg"();


--
-- Name: items simple_pg_Hkrg_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hkrg_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hkrg"();


--
-- Name: line_items simple_pg_Hkrg_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hkrg_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hkrg"();


--
-- Name: settings simple_pg_Hkrg_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hkrg_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hkrg"();


--
-- Name: shifts simple_pg_Hkrg_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hkrg_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hkrg"();


--
-- Name: transactions simple_pg_Hkrg_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hkrg_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hkrg"();


--
-- Name: categories simple_pg_Hmag_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hmag_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hmag"();


--
-- Name: items simple_pg_Hmag_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hmag_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hmag"();


--
-- Name: line_items simple_pg_Hmag_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hmag_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hmag"();


--
-- Name: settings simple_pg_Hmag_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hmag_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hmag"();


--
-- Name: shifts simple_pg_Hmag_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hmag_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hmag"();


--
-- Name: transactions simple_pg_Hmag_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Hmag_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Hmag"();


--
-- Name: categories simple_pg_J2jz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J2jz_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J2jz"();


--
-- Name: items simple_pg_J2jz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J2jz_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J2jz"();


--
-- Name: line_items simple_pg_J2jz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J2jz_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J2jz"();


--
-- Name: settings simple_pg_J2jz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J2jz_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J2jz"();


--
-- Name: shifts simple_pg_J2jz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J2jz_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J2jz"();


--
-- Name: transactions simple_pg_J2jz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J2jz_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J2jz"();


--
-- Name: categories simple_pg_J4CL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J4CL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J4CL"();


--
-- Name: discounts simple_pg_J4CL_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J4CL_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J4CL"();


--
-- Name: items simple_pg_J4CL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J4CL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J4CL"();


--
-- Name: line_items simple_pg_J4CL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J4CL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J4CL"();


--
-- Name: settings simple_pg_J4CL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J4CL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J4CL"();


--
-- Name: shifts simple_pg_J4CL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J4CL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J4CL"();


--
-- Name: transactions simple_pg_J4CL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_J4CL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_J4CL"();


--
-- Name: categories simple_pg_JBC2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JBC2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JBC2"();


--
-- Name: items simple_pg_JBC2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JBC2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JBC2"();


--
-- Name: line_items simple_pg_JBC2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JBC2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JBC2"();


--
-- Name: settings simple_pg_JBC2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JBC2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JBC2"();


--
-- Name: shifts simple_pg_JBC2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JBC2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JBC2"();


--
-- Name: transactions simple_pg_JBC2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JBC2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JBC2"();


--
-- Name: categories simple_pg_JFX3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JFX3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JFX3"();


--
-- Name: items simple_pg_JFX3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JFX3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JFX3"();


--
-- Name: line_items simple_pg_JFX3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JFX3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JFX3"();


--
-- Name: settings simple_pg_JFX3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JFX3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JFX3"();


--
-- Name: shifts simple_pg_JFX3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JFX3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JFX3"();


--
-- Name: transactions simple_pg_JFX3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JFX3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JFX3"();


--
-- Name: categories simple_pg_JGqr_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JGqr_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JGqr"();


--
-- Name: items simple_pg_JGqr_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JGqr_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JGqr"();


--
-- Name: line_items simple_pg_JGqr_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JGqr_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JGqr"();


--
-- Name: settings simple_pg_JGqr_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JGqr_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JGqr"();


--
-- Name: shifts simple_pg_JGqr_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JGqr_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JGqr"();


--
-- Name: transactions simple_pg_JGqr_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JGqr_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JGqr"();


--
-- Name: categories simple_pg_JKq6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JKq6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JKq6"();


--
-- Name: discounts simple_pg_JKq6_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JKq6_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JKq6"();


--
-- Name: items simple_pg_JKq6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JKq6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JKq6"();


--
-- Name: line_items simple_pg_JKq6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JKq6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JKq6"();


--
-- Name: settings simple_pg_JKq6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JKq6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JKq6"();


--
-- Name: shifts simple_pg_JKq6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JKq6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JKq6"();


--
-- Name: transactions simple_pg_JKq6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JKq6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JKq6"();


--
-- Name: categories simple_pg_JcPQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JcPQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JcPQ"();


--
-- Name: discounts simple_pg_JcPQ_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JcPQ_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JcPQ"();


--
-- Name: items simple_pg_JcPQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JcPQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JcPQ"();


--
-- Name: line_items simple_pg_JcPQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JcPQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JcPQ"();


--
-- Name: settings simple_pg_JcPQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JcPQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JcPQ"();


--
-- Name: shifts simple_pg_JcPQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JcPQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JcPQ"();


--
-- Name: transactions simple_pg_JcPQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_JcPQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_JcPQ"();


--
-- Name: categories simple_pg_KAJo_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KAJo_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KAJo"();


--
-- Name: discounts simple_pg_KAJo_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KAJo_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KAJo"();


--
-- Name: items simple_pg_KAJo_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KAJo_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KAJo"();


--
-- Name: line_items simple_pg_KAJo_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KAJo_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KAJo"();


--
-- Name: settings simple_pg_KAJo_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KAJo_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KAJo"();


--
-- Name: shifts simple_pg_KAJo_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KAJo_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KAJo"();


--
-- Name: transactions simple_pg_KAJo_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KAJo_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KAJo"();


--
-- Name: categories simple_pg_KEA6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KEA6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KEA6"();


--
-- Name: discounts simple_pg_KEA6_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KEA6_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KEA6"();


--
-- Name: items simple_pg_KEA6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KEA6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KEA6"();


--
-- Name: line_items simple_pg_KEA6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KEA6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KEA6"();


--
-- Name: settings simple_pg_KEA6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KEA6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KEA6"();


--
-- Name: shifts simple_pg_KEA6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KEA6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KEA6"();


--
-- Name: transactions simple_pg_KEA6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_KEA6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_KEA6"();


--
-- Name: categories simple_pg_L4Nn_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_L4Nn_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_L4Nn"();


--
-- Name: items simple_pg_L4Nn_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_L4Nn_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_L4Nn"();


--
-- Name: line_items simple_pg_L4Nn_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_L4Nn_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_L4Nn"();


--
-- Name: settings simple_pg_L4Nn_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_L4Nn_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_L4Nn"();


--
-- Name: shifts simple_pg_L4Nn_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_L4Nn_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_L4Nn"();


--
-- Name: transactions simple_pg_L4Nn_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_L4Nn_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_L4Nn"();


--
-- Name: categories simple_pg_LE3h_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LE3h_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LE3h"();


--
-- Name: items simple_pg_LE3h_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LE3h_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LE3h"();


--
-- Name: line_items simple_pg_LE3h_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LE3h_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LE3h"();


--
-- Name: settings simple_pg_LE3h_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LE3h_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LE3h"();


--
-- Name: shifts simple_pg_LE3h_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LE3h_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LE3h"();


--
-- Name: transactions simple_pg_LE3h_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LE3h_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LE3h"();


--
-- Name: categories simple_pg_LTez_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LTez_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LTez"();


--
-- Name: discounts simple_pg_LTez_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LTez_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LTez"();


--
-- Name: items simple_pg_LTez_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LTez_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LTez"();


--
-- Name: line_items simple_pg_LTez_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LTez_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LTez"();


--
-- Name: settings simple_pg_LTez_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LTez_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LTez"();


--
-- Name: shifts simple_pg_LTez_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LTez_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LTez"();


--
-- Name: transactions simple_pg_LTez_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LTez_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LTez"();


--
-- Name: categories simple_pg_Lno3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Lno3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Lno3"();


--
-- Name: items simple_pg_Lno3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Lno3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Lno3"();


--
-- Name: line_items simple_pg_Lno3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Lno3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Lno3"();


--
-- Name: settings simple_pg_Lno3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Lno3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Lno3"();


--
-- Name: shifts simple_pg_Lno3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Lno3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Lno3"();


--
-- Name: transactions simple_pg_Lno3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Lno3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Lno3"();


--
-- Name: categories simple_pg_LoPP_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LoPP_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LoPP"();


--
-- Name: items simple_pg_LoPP_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LoPP_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LoPP"();


--
-- Name: line_items simple_pg_LoPP_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LoPP_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LoPP"();


--
-- Name: settings simple_pg_LoPP_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LoPP_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LoPP"();


--
-- Name: shifts simple_pg_LoPP_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LoPP_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LoPP"();


--
-- Name: transactions simple_pg_LoPP_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_LoPP_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_LoPP"();


--
-- Name: categories simple_pg_M7mw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_M7mw_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_M7mw"();


--
-- Name: items simple_pg_M7mw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_M7mw_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_M7mw"();


--
-- Name: line_items simple_pg_M7mw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_M7mw_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_M7mw"();


--
-- Name: settings simple_pg_M7mw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_M7mw_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_M7mw"();


--
-- Name: shifts simple_pg_M7mw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_M7mw_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_M7mw"();


--
-- Name: transactions simple_pg_M7mw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_M7mw_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_M7mw"();


--
-- Name: categories simple_pg_MF8J_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MF8J_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MF8J"();


--
-- Name: discounts simple_pg_MF8J_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MF8J_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MF8J"();


--
-- Name: items simple_pg_MF8J_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MF8J_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MF8J"();


--
-- Name: line_items simple_pg_MF8J_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MF8J_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MF8J"();


--
-- Name: settings simple_pg_MF8J_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MF8J_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MF8J"();


--
-- Name: shifts simple_pg_MF8J_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MF8J_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MF8J"();


--
-- Name: transactions simple_pg_MF8J_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MF8J_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MF8J"();


--
-- Name: categories simple_pg_MNPs_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MNPs_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MNPs"();


--
-- Name: items simple_pg_MNPs_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MNPs_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MNPs"();


--
-- Name: line_items simple_pg_MNPs_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MNPs_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MNPs"();


--
-- Name: settings simple_pg_MNPs_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MNPs_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MNPs"();


--
-- Name: shifts simple_pg_MNPs_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MNPs_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MNPs"();


--
-- Name: transactions simple_pg_MNPs_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MNPs_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MNPs"();


--
-- Name: categories simple_pg_Mkvc_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mkvc_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mkvc"();


--
-- Name: discounts simple_pg_Mkvc_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mkvc_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mkvc"();


--
-- Name: items simple_pg_Mkvc_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mkvc_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mkvc"();


--
-- Name: line_items simple_pg_Mkvc_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mkvc_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mkvc"();


--
-- Name: settings simple_pg_Mkvc_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mkvc_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mkvc"();


--
-- Name: shifts simple_pg_Mkvc_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mkvc_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mkvc"();


--
-- Name: transactions simple_pg_Mkvc_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mkvc_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mkvc"();


--
-- Name: categories simple_pg_MopX_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MopX_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MopX"();


--
-- Name: items simple_pg_MopX_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MopX_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MopX"();


--
-- Name: line_items simple_pg_MopX_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MopX_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MopX"();


--
-- Name: settings simple_pg_MopX_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MopX_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MopX"();


--
-- Name: shifts simple_pg_MopX_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MopX_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MopX"();


--
-- Name: transactions simple_pg_MopX_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MopX_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MopX"();


--
-- Name: categories simple_pg_Mqew_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mqew_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mqew"();


--
-- Name: items simple_pg_Mqew_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mqew_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mqew"();


--
-- Name: line_items simple_pg_Mqew_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mqew_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mqew"();


--
-- Name: settings simple_pg_Mqew_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mqew_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mqew"();


--
-- Name: shifts simple_pg_Mqew_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mqew_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mqew"();


--
-- Name: transactions simple_pg_Mqew_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mqew_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mqew"();


--
-- Name: categories simple_pg_MuWS_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MuWS_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MuWS"();


--
-- Name: items simple_pg_MuWS_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MuWS_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MuWS"();


--
-- Name: line_items simple_pg_MuWS_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MuWS_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MuWS"();


--
-- Name: settings simple_pg_MuWS_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MuWS_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MuWS"();


--
-- Name: shifts simple_pg_MuWS_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MuWS_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MuWS"();


--
-- Name: transactions simple_pg_MuWS_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_MuWS_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_MuWS"();


--
-- Name: categories simple_pg_Mw8p_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mw8p_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mw8p"();


--
-- Name: items simple_pg_Mw8p_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Mw8p_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Mw8p"();


--
-- Name: categories simple_pg_Nd3T_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Nd3T_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Nd3T"();


--
-- Name: items simple_pg_Nd3T_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Nd3T_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Nd3T"();


--
-- Name: line_items simple_pg_Nd3T_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Nd3T_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Nd3T"();


--
-- Name: settings simple_pg_Nd3T_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Nd3T_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Nd3T"();


--
-- Name: shifts simple_pg_Nd3T_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Nd3T_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Nd3T"();


--
-- Name: transactions simple_pg_Nd3T_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Nd3T_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Nd3T"();


--
-- Name: categories simple_pg_NvY6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_NvY6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_NvY6"();


--
-- Name: items simple_pg_NvY6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_NvY6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_NvY6"();


--
-- Name: line_items simple_pg_NvY6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_NvY6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_NvY6"();


--
-- Name: settings simple_pg_NvY6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_NvY6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_NvY6"();


--
-- Name: shifts simple_pg_NvY6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_NvY6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_NvY6"();


--
-- Name: transactions simple_pg_NvY6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_NvY6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_NvY6"();


--
-- Name: categories simple_pg_PDJn_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PDJn_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PDJn"();


--
-- Name: items simple_pg_PDJn_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PDJn_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PDJn"();


--
-- Name: line_items simple_pg_PDJn_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PDJn_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PDJn"();


--
-- Name: settings simple_pg_PDJn_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PDJn_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PDJn"();


--
-- Name: shifts simple_pg_PDJn_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PDJn_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PDJn"();


--
-- Name: transactions simple_pg_PDJn_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PDJn_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PDJn"();


--
-- Name: categories simple_pg_PEr8_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PEr8_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PEr8"();


--
-- Name: items simple_pg_PEr8_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PEr8_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PEr8"();


--
-- Name: line_items simple_pg_PEr8_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PEr8_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PEr8"();


--
-- Name: settings simple_pg_PEr8_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PEr8_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PEr8"();


--
-- Name: shifts simple_pg_PEr8_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PEr8_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PEr8"();


--
-- Name: transactions simple_pg_PEr8_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PEr8_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PEr8"();


--
-- Name: categories simple_pg_PHM5_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PHM5_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PHM5"();


--
-- Name: items simple_pg_PHM5_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PHM5_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PHM5"();


--
-- Name: line_items simple_pg_PHM5_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PHM5_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PHM5"();


--
-- Name: settings simple_pg_PHM5_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PHM5_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PHM5"();


--
-- Name: shifts simple_pg_PHM5_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PHM5_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PHM5"();


--
-- Name: transactions simple_pg_PHM5_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PHM5_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PHM5"();


--
-- Name: categories simple_pg_PJTG_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PJTG_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PJTG"();


--
-- Name: items simple_pg_PJTG_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PJTG_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PJTG"();


--
-- Name: line_items simple_pg_PJTG_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PJTG_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PJTG"();


--
-- Name: settings simple_pg_PJTG_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PJTG_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PJTG"();


--
-- Name: shifts simple_pg_PJTG_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PJTG_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PJTG"();


--
-- Name: transactions simple_pg_PJTG_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PJTG_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PJTG"();


--
-- Name: categories simple_pg_PPdp_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PPdp_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PPdp"();


--
-- Name: items simple_pg_PPdp_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PPdp_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PPdp"();


--
-- Name: line_items simple_pg_PPdp_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PPdp_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PPdp"();


--
-- Name: settings simple_pg_PPdp_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PPdp_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PPdp"();


--
-- Name: shifts simple_pg_PPdp_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PPdp_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PPdp"();


--
-- Name: transactions simple_pg_PPdp_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PPdp_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PPdp"();


--
-- Name: categories simple_pg_PRdM_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PRdM_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PRdM"();


--
-- Name: discounts simple_pg_PRdM_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PRdM_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PRdM"();


--
-- Name: items simple_pg_PRdM_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PRdM_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PRdM"();


--
-- Name: line_items simple_pg_PRdM_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PRdM_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PRdM"();


--
-- Name: settings simple_pg_PRdM_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PRdM_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PRdM"();


--
-- Name: shifts simple_pg_PRdM_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PRdM_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PRdM"();


--
-- Name: transactions simple_pg_PRdM_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PRdM_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PRdM"();


--
-- Name: categories simple_pg_Pdeu_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Pdeu_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Pdeu"();


--
-- Name: discounts simple_pg_Pdeu_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Pdeu_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Pdeu"();


--
-- Name: items simple_pg_Pdeu_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Pdeu_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Pdeu"();


--
-- Name: line_items simple_pg_Pdeu_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Pdeu_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Pdeu"();


--
-- Name: settings simple_pg_Pdeu_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Pdeu_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Pdeu"();


--
-- Name: shifts simple_pg_Pdeu_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Pdeu_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Pdeu"();


--
-- Name: transactions simple_pg_Pdeu_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Pdeu_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Pdeu"();


--
-- Name: categories simple_pg_PgQF_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PgQF_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PgQF"();


--
-- Name: items simple_pg_PgQF_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PgQF_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PgQF"();


--
-- Name: line_items simple_pg_PgQF_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PgQF_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PgQF"();


--
-- Name: settings simple_pg_PgQF_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PgQF_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PgQF"();


--
-- Name: shifts simple_pg_PgQF_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PgQF_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PgQF"();


--
-- Name: transactions simple_pg_PgQF_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_PgQF_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_PgQF"();


--
-- Name: categories simple_pg_QZYo_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QZYo_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QZYo"();


--
-- Name: items simple_pg_QZYo_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QZYo_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QZYo"();


--
-- Name: line_items simple_pg_QZYo_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QZYo_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QZYo"();


--
-- Name: settings simple_pg_QZYo_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QZYo_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QZYo"();


--
-- Name: shifts simple_pg_QZYo_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QZYo_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QZYo"();


--
-- Name: transactions simple_pg_QZYo_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QZYo_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QZYo"();


--
-- Name: categories simple_pg_Qew4_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qew4_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qew4"();


--
-- Name: items simple_pg_Qew4_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qew4_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qew4"();


--
-- Name: line_items simple_pg_Qew4_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qew4_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qew4"();


--
-- Name: settings simple_pg_Qew4_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qew4_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qew4"();


--
-- Name: shifts simple_pg_Qew4_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qew4_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qew4"();


--
-- Name: transactions simple_pg_Qew4_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qew4_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qew4"();


--
-- Name: categories simple_pg_Qgfo_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qgfo_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qgfo"();


--
-- Name: items simple_pg_Qgfo_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qgfo_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qgfo"();


--
-- Name: line_items simple_pg_Qgfo_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qgfo_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qgfo"();


--
-- Name: settings simple_pg_Qgfo_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qgfo_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qgfo"();


--
-- Name: shifts simple_pg_Qgfo_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qgfo_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qgfo"();


--
-- Name: transactions simple_pg_Qgfo_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qgfo_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qgfo"();


--
-- Name: categories simple_pg_Qivv_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qivv_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qivv"();


--
-- Name: discounts simple_pg_Qivv_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qivv_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qivv"();


--
-- Name: items simple_pg_Qivv_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qivv_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qivv"();


--
-- Name: line_items simple_pg_Qivv_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qivv_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qivv"();


--
-- Name: settings simple_pg_Qivv_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qivv_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qivv"();


--
-- Name: shifts simple_pg_Qivv_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qivv_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qivv"();


--
-- Name: transactions simple_pg_Qivv_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qivv_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qivv"();


--
-- Name: categories simple_pg_QnMJ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QnMJ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QnMJ"();


--
-- Name: items simple_pg_QnMJ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QnMJ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QnMJ"();


--
-- Name: line_items simple_pg_QnMJ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QnMJ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QnMJ"();


--
-- Name: settings simple_pg_QnMJ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QnMJ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QnMJ"();


--
-- Name: shifts simple_pg_QnMJ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QnMJ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QnMJ"();


--
-- Name: transactions simple_pg_QnMJ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QnMJ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QnMJ"();


--
-- Name: categories simple_pg_Qz6F_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qz6F_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qz6F"();


--
-- Name: items simple_pg_Qz6F_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qz6F_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qz6F"();


--
-- Name: line_items simple_pg_Qz6F_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qz6F_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qz6F"();


--
-- Name: settings simple_pg_Qz6F_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qz6F_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qz6F"();


--
-- Name: shifts simple_pg_Qz6F_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qz6F_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qz6F"();


--
-- Name: transactions simple_pg_Qz6F_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Qz6F_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Qz6F"();


--
-- Name: categories simple_pg_QzxM_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QzxM_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QzxM"();


--
-- Name: items simple_pg_QzxM_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QzxM_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QzxM"();


--
-- Name: line_items simple_pg_QzxM_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QzxM_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QzxM"();


--
-- Name: settings simple_pg_QzxM_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QzxM_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QzxM"();


--
-- Name: shifts simple_pg_QzxM_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QzxM_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QzxM"();


--
-- Name: transactions simple_pg_QzxM_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_QzxM_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_QzxM"();


--
-- Name: categories simple_pg_R8JQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8JQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8JQ"();


--
-- Name: items simple_pg_R8JQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8JQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8JQ"();


--
-- Name: line_items simple_pg_R8JQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8JQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8JQ"();


--
-- Name: settings simple_pg_R8JQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8JQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8JQ"();


--
-- Name: shifts simple_pg_R8JQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8JQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8JQ"();


--
-- Name: transactions simple_pg_R8JQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8JQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8JQ"();


--
-- Name: categories simple_pg_R8th_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8th_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8th"();


--
-- Name: items simple_pg_R8th_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8th_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8th"();


--
-- Name: line_items simple_pg_R8th_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_R8th_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_R8th"();


--
-- Name: categories simple_pg_RCWr_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RCWr_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RCWr"();


--
-- Name: items simple_pg_RCWr_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RCWr_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RCWr"();


--
-- Name: line_items simple_pg_RCWr_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RCWr_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RCWr"();


--
-- Name: settings simple_pg_RCWr_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RCWr_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RCWr"();


--
-- Name: shifts simple_pg_RCWr_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RCWr_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RCWr"();


--
-- Name: transactions simple_pg_RCWr_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RCWr_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RCWr"();


--
-- Name: categories simple_pg_RDWf_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RDWf_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RDWf"();


--
-- Name: discounts simple_pg_RDWf_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RDWf_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RDWf"();


--
-- Name: items simple_pg_RDWf_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RDWf_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RDWf"();


--
-- Name: line_items simple_pg_RDWf_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RDWf_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RDWf"();


--
-- Name: settings simple_pg_RDWf_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RDWf_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RDWf"();


--
-- Name: shifts simple_pg_RDWf_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RDWf_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RDWf"();


--
-- Name: transactions simple_pg_RDWf_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RDWf_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RDWf"();


--
-- Name: categories simple_pg_REXG_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_REXG_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_REXG"();


--
-- Name: items simple_pg_REXG_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_REXG_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_REXG"();


--
-- Name: line_items simple_pg_REXG_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_REXG_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_REXG"();


--
-- Name: settings simple_pg_REXG_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_REXG_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_REXG"();


--
-- Name: shifts simple_pg_REXG_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_REXG_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_REXG"();


--
-- Name: transactions simple_pg_REXG_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_REXG_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_REXG"();


--
-- Name: categories simple_pg_RKy6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RKy6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RKy6"();


--
-- Name: items simple_pg_RKy6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RKy6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RKy6"();


--
-- Name: line_items simple_pg_RKy6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RKy6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RKy6"();


--
-- Name: settings simple_pg_RKy6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RKy6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RKy6"();


--
-- Name: shifts simple_pg_RKy6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RKy6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RKy6"();


--
-- Name: transactions simple_pg_RKy6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RKy6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RKy6"();


--
-- Name: categories simple_pg_RcWb_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RcWb_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RcWb"();


--
-- Name: items simple_pg_RcWb_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RcWb_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RcWb"();


--
-- Name: line_items simple_pg_RcWb_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RcWb_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RcWb"();


--
-- Name: settings simple_pg_RcWb_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RcWb_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RcWb"();


--
-- Name: shifts simple_pg_RcWb_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RcWb_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RcWb"();


--
-- Name: transactions simple_pg_RcWb_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RcWb_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RcWb"();


--
-- Name: categories simple_pg_RgjY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RgjY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RgjY"();


--
-- Name: discounts simple_pg_RgjY_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RgjY_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RgjY"();


--
-- Name: items simple_pg_RgjY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RgjY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RgjY"();


--
-- Name: line_items simple_pg_RgjY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RgjY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RgjY"();


--
-- Name: settings simple_pg_RgjY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RgjY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RgjY"();


--
-- Name: shifts simple_pg_RgjY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RgjY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RgjY"();


--
-- Name: transactions simple_pg_RgjY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RgjY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RgjY"();


--
-- Name: categories simple_pg_RnhH_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RnhH_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RnhH"();


--
-- Name: items simple_pg_RnhH_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RnhH_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RnhH"();


--
-- Name: line_items simple_pg_RnhH_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RnhH_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RnhH"();


--
-- Name: settings simple_pg_RnhH_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RnhH_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RnhH"();


--
-- Name: shifts simple_pg_RnhH_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RnhH_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RnhH"();


--
-- Name: transactions simple_pg_RnhH_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RnhH_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RnhH"();


--
-- Name: categories simple_pg_RqYj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RqYj_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RqYj"();


--
-- Name: discounts simple_pg_RqYj_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RqYj_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RqYj"();


--
-- Name: items simple_pg_RqYj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RqYj_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RqYj"();


--
-- Name: line_items simple_pg_RqYj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RqYj_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RqYj"();


--
-- Name: settings simple_pg_RqYj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RqYj_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RqYj"();


--
-- Name: shifts simple_pg_RqYj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RqYj_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RqYj"();


--
-- Name: transactions simple_pg_RqYj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RqYj_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RqYj"();


--
-- Name: categories simple_pg_Rs7z_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rs7z_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rs7z"();


--
-- Name: items simple_pg_Rs7z_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rs7z_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rs7z"();


--
-- Name: line_items simple_pg_Rs7z_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rs7z_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rs7z"();


--
-- Name: settings simple_pg_Rs7z_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rs7z_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rs7z"();


--
-- Name: shifts simple_pg_Rs7z_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rs7z_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rs7z"();


--
-- Name: transactions simple_pg_Rs7z_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rs7z_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rs7z"();


--
-- Name: categories simple_pg_Rt8N_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rt8N_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rt8N"();


--
-- Name: items simple_pg_Rt8N_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rt8N_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rt8N"();


--
-- Name: line_items simple_pg_Rt8N_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rt8N_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rt8N"();


--
-- Name: settings simple_pg_Rt8N_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rt8N_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rt8N"();


--
-- Name: shifts simple_pg_Rt8N_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rt8N_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rt8N"();


--
-- Name: transactions simple_pg_Rt8N_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Rt8N_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Rt8N"();


--
-- Name: categories simple_pg_RzQu_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RzQu_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RzQu"();


--
-- Name: items simple_pg_RzQu_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RzQu_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RzQu"();


--
-- Name: line_items simple_pg_RzQu_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RzQu_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RzQu"();


--
-- Name: settings simple_pg_RzQu_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RzQu_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RzQu"();


--
-- Name: shifts simple_pg_RzQu_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RzQu_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RzQu"();


--
-- Name: transactions simple_pg_RzQu_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_RzQu_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_RzQu"();


--
-- Name: categories simple_pg_S6mQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S6mQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S6mQ"();


--
-- Name: items simple_pg_S6mQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S6mQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S6mQ"();


--
-- Name: line_items simple_pg_S6mQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S6mQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S6mQ"();


--
-- Name: settings simple_pg_S6mQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S6mQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S6mQ"();


--
-- Name: shifts simple_pg_S6mQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S6mQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S6mQ"();


--
-- Name: transactions simple_pg_S6mQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S6mQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S6mQ"();


--
-- Name: categories simple_pg_S8RM_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S8RM_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S8RM"();


--
-- Name: items simple_pg_S8RM_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S8RM_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S8RM"();


--
-- Name: line_items simple_pg_S8RM_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S8RM_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S8RM"();


--
-- Name: settings simple_pg_S8RM_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S8RM_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S8RM"();


--
-- Name: shifts simple_pg_S8RM_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S8RM_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S8RM"();


--
-- Name: transactions simple_pg_S8RM_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_S8RM_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_S8RM"();


--
-- Name: categories simple_pg_SECT_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SECT_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SECT"();


--
-- Name: items simple_pg_SECT_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SECT_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SECT"();


--
-- Name: line_items simple_pg_SECT_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SECT_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SECT"();


--
-- Name: settings simple_pg_SECT_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SECT_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SECT"();


--
-- Name: shifts simple_pg_SECT_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SECT_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SECT"();


--
-- Name: transactions simple_pg_SECT_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SECT_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SECT"();


--
-- Name: categories simple_pg_SLtH_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SLtH_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SLtH"();


--
-- Name: items simple_pg_SLtH_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SLtH_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SLtH"();


--
-- Name: line_items simple_pg_SLtH_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SLtH_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SLtH"();


--
-- Name: settings simple_pg_SLtH_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SLtH_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SLtH"();


--
-- Name: shifts simple_pg_SLtH_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SLtH_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SLtH"();


--
-- Name: transactions simple_pg_SLtH_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SLtH_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SLtH"();


--
-- Name: categories simple_pg_SeJd_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SeJd_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SeJd"();


--
-- Name: discounts simple_pg_SeJd_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SeJd_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SeJd"();


--
-- Name: items simple_pg_SeJd_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SeJd_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SeJd"();


--
-- Name: line_items simple_pg_SeJd_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SeJd_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SeJd"();


--
-- Name: settings simple_pg_SeJd_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SeJd_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SeJd"();


--
-- Name: shifts simple_pg_SeJd_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SeJd_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SeJd"();


--
-- Name: transactions simple_pg_SeJd_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SeJd_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SeJd"();


--
-- Name: categories simple_pg_ShSq_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ShSq_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ShSq"();


--
-- Name: items simple_pg_ShSq_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ShSq_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ShSq"();


--
-- Name: line_items simple_pg_ShSq_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ShSq_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ShSq"();


--
-- Name: settings simple_pg_ShSq_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ShSq_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ShSq"();


--
-- Name: shifts simple_pg_ShSq_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ShSq_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ShSq"();


--
-- Name: transactions simple_pg_ShSq_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ShSq_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ShSq"();


--
-- Name: categories simple_pg_SiKr_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SiKr_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SiKr"();


--
-- Name: items simple_pg_SiKr_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SiKr_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SiKr"();


--
-- Name: line_items simple_pg_SiKr_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SiKr_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SiKr"();


--
-- Name: settings simple_pg_SiKr_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SiKr_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SiKr"();


--
-- Name: shifts simple_pg_SiKr_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SiKr_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SiKr"();


--
-- Name: transactions simple_pg_SiKr_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SiKr_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SiKr"();


--
-- Name: categories simple_pg_Sidr_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sidr_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sidr"();


--
-- Name: items simple_pg_Sidr_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sidr_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sidr"();


--
-- Name: line_items simple_pg_Sidr_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sidr_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sidr"();


--
-- Name: settings simple_pg_Sidr_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sidr_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sidr"();


--
-- Name: shifts simple_pg_Sidr_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sidr_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sidr"();


--
-- Name: transactions simple_pg_Sidr_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sidr_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sidr"();


--
-- Name: categories simple_pg_Sj4F_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sj4F_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sj4F"();


--
-- Name: items simple_pg_Sj4F_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sj4F_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sj4F"();


--
-- Name: line_items simple_pg_Sj4F_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sj4F_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sj4F"();


--
-- Name: settings simple_pg_Sj4F_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sj4F_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sj4F"();


--
-- Name: shifts simple_pg_Sj4F_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sj4F_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sj4F"();


--
-- Name: transactions simple_pg_Sj4F_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Sj4F_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Sj4F"();


--
-- Name: categories simple_pg_SnHL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SnHL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SnHL"();


--
-- Name: items simple_pg_SnHL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SnHL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SnHL"();


--
-- Name: line_items simple_pg_SnHL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SnHL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SnHL"();


--
-- Name: settings simple_pg_SnHL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SnHL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SnHL"();


--
-- Name: shifts simple_pg_SnHL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SnHL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SnHL"();


--
-- Name: transactions simple_pg_SnHL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_SnHL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_SnHL"();


--
-- Name: categories simple_pg_T9q2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_T9q2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_T9q2"();


--
-- Name: items simple_pg_T9q2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_T9q2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_T9q2"();


--
-- Name: line_items simple_pg_T9q2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_T9q2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_T9q2"();


--
-- Name: settings simple_pg_T9q2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_T9q2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_T9q2"();


--
-- Name: shifts simple_pg_T9q2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_T9q2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_T9q2"();


--
-- Name: transactions simple_pg_T9q2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_T9q2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_T9q2"();


--
-- Name: categories simple_pg_TCe3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TCe3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TCe3"();


--
-- Name: items simple_pg_TCe3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TCe3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TCe3"();


--
-- Name: line_items simple_pg_TCe3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TCe3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TCe3"();


--
-- Name: settings simple_pg_TCe3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TCe3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TCe3"();


--
-- Name: shifts simple_pg_TCe3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TCe3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TCe3"();


--
-- Name: transactions simple_pg_TCe3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TCe3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TCe3"();


--
-- Name: categories simple_pg_TDMh_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TDMh_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TDMh"();


--
-- Name: items simple_pg_TDMh_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TDMh_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TDMh"();


--
-- Name: line_items simple_pg_TDMh_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TDMh_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TDMh"();


--
-- Name: settings simple_pg_TDMh_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TDMh_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TDMh"();


--
-- Name: shifts simple_pg_TDMh_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TDMh_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TDMh"();


--
-- Name: transactions simple_pg_TDMh_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TDMh_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TDMh"();


--
-- Name: categories simple_pg_TKQt_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TKQt_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TKQt"();


--
-- Name: items simple_pg_TKQt_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TKQt_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TKQt"();


--
-- Name: line_items simple_pg_TKQt_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TKQt_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TKQt"();


--
-- Name: settings simple_pg_TKQt_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TKQt_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TKQt"();


--
-- Name: shifts simple_pg_TKQt_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TKQt_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TKQt"();


--
-- Name: transactions simple_pg_TKQt_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TKQt_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TKQt"();


--
-- Name: categories simple_pg_TPXz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TPXz_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TPXz"();


--
-- Name: items simple_pg_TPXz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TPXz_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TPXz"();


--
-- Name: line_items simple_pg_TPXz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TPXz_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TPXz"();


--
-- Name: settings simple_pg_TPXz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TPXz_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TPXz"();


--
-- Name: shifts simple_pg_TPXz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TPXz_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TPXz"();


--
-- Name: transactions simple_pg_TPXz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TPXz_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TPXz"();


--
-- Name: categories simple_pg_TbHd_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TbHd_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TbHd"();


--
-- Name: items simple_pg_TbHd_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TbHd_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TbHd"();


--
-- Name: line_items simple_pg_TbHd_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TbHd_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TbHd"();


--
-- Name: settings simple_pg_TbHd_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TbHd_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TbHd"();


--
-- Name: shifts simple_pg_TbHd_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TbHd_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TbHd"();


--
-- Name: transactions simple_pg_TbHd_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TbHd_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TbHd"();


--
-- Name: categories simple_pg_TdC4_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdC4_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdC4"();


--
-- Name: items simple_pg_TdC4_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdC4_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdC4"();


--
-- Name: line_items simple_pg_TdC4_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdC4_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdC4"();


--
-- Name: settings simple_pg_TdC4_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdC4_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdC4"();


--
-- Name: shifts simple_pg_TdC4_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdC4_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdC4"();


--
-- Name: transactions simple_pg_TdC4_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdC4_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdC4"();


--
-- Name: categories simple_pg_TdfQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdfQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdfQ"();


--
-- Name: items simple_pg_TdfQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdfQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdfQ"();


--
-- Name: line_items simple_pg_TdfQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdfQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdfQ"();


--
-- Name: settings simple_pg_TdfQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdfQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdfQ"();


--
-- Name: shifts simple_pg_TdfQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdfQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdfQ"();


--
-- Name: transactions simple_pg_TdfQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TdfQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TdfQ"();


--
-- Name: categories simple_pg_TjEe_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TjEe_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TjEe"();


--
-- Name: discounts simple_pg_TjEe_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TjEe_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TjEe"();


--
-- Name: items simple_pg_TjEe_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TjEe_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TjEe"();


--
-- Name: line_items simple_pg_TjEe_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TjEe_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TjEe"();


--
-- Name: settings simple_pg_TjEe_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TjEe_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TjEe"();


--
-- Name: shifts simple_pg_TjEe_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TjEe_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TjEe"();


--
-- Name: transactions simple_pg_TjEe_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TjEe_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TjEe"();


--
-- Name: categories simple_pg_TqyZ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TqyZ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TqyZ"();


--
-- Name: items simple_pg_TqyZ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TqyZ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TqyZ"();


--
-- Name: line_items simple_pg_TqyZ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TqyZ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TqyZ"();


--
-- Name: settings simple_pg_TqyZ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TqyZ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TqyZ"();


--
-- Name: shifts simple_pg_TqyZ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TqyZ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TqyZ"();


--
-- Name: transactions simple_pg_TqyZ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_TqyZ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_TqyZ"();


--
-- Name: categories simple_pg_Tsv2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Tsv2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Tsv2"();


--
-- Name: items simple_pg_Tsv2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Tsv2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Tsv2"();


--
-- Name: line_items simple_pg_Tsv2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Tsv2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Tsv2"();


--
-- Name: settings simple_pg_Tsv2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Tsv2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Tsv2"();


--
-- Name: shifts simple_pg_Tsv2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Tsv2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Tsv2"();


--
-- Name: transactions simple_pg_Tsv2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Tsv2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Tsv2"();


--
-- Name: categories simple_pg_WC73_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WC73_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WC73"();


--
-- Name: items simple_pg_WC73_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WC73_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WC73"();


--
-- Name: line_items simple_pg_WC73_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WC73_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WC73"();


--
-- Name: settings simple_pg_WC73_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WC73_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WC73"();


--
-- Name: shifts simple_pg_WC73_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WC73_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WC73"();


--
-- Name: transactions simple_pg_WC73_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WC73_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WC73"();


--
-- Name: categories simple_pg_WE9E_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WE9E_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WE9E"();


--
-- Name: discounts simple_pg_WE9E_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WE9E_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WE9E"();


--
-- Name: items simple_pg_WE9E_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WE9E_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WE9E"();


--
-- Name: line_items simple_pg_WE9E_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WE9E_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WE9E"();


--
-- Name: settings simple_pg_WE9E_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WE9E_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WE9E"();


--
-- Name: shifts simple_pg_WE9E_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WE9E_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WE9E"();


--
-- Name: transactions simple_pg_WE9E_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WE9E_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WE9E"();


--
-- Name: categories simple_pg_WKqD_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WKqD_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WKqD"();


--
-- Name: items simple_pg_WKqD_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WKqD_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WKqD"();


--
-- Name: line_items simple_pg_WKqD_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WKqD_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WKqD"();


--
-- Name: settings simple_pg_WKqD_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WKqD_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WKqD"();


--
-- Name: shifts simple_pg_WKqD_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WKqD_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WKqD"();


--
-- Name: transactions simple_pg_WKqD_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WKqD_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WKqD"();


--
-- Name: categories simple_pg_WNNw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WNNw_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WNNw"();


--
-- Name: items simple_pg_WNNw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WNNw_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WNNw"();


--
-- Name: line_items simple_pg_WNNw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WNNw_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WNNw"();


--
-- Name: settings simple_pg_WNNw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WNNw_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WNNw"();


--
-- Name: shifts simple_pg_WNNw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WNNw_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WNNw"();


--
-- Name: transactions simple_pg_WNNw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WNNw_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WNNw"();


--
-- Name: categories simple_pg_WXan_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WXan_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WXan"();


--
-- Name: discounts simple_pg_WXan_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WXan_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WXan"();


--
-- Name: items simple_pg_WXan_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WXan_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WXan"();


--
-- Name: line_items simple_pg_WXan_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WXan_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WXan"();


--
-- Name: settings simple_pg_WXan_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WXan_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WXan"();


--
-- Name: shifts simple_pg_WXan_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WXan_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WXan"();


--
-- Name: transactions simple_pg_WXan_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WXan_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WXan"();


--
-- Name: categories simple_pg_WbrD_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WbrD_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WbrD"();


--
-- Name: discounts simple_pg_WbrD_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WbrD_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WbrD"();


--
-- Name: items simple_pg_WbrD_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WbrD_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WbrD"();


--
-- Name: line_items simple_pg_WbrD_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WbrD_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WbrD"();


--
-- Name: settings simple_pg_WbrD_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WbrD_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WbrD"();


--
-- Name: shifts simple_pg_WbrD_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WbrD_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WbrD"();


--
-- Name: transactions simple_pg_WbrD_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WbrD_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WbrD"();


--
-- Name: categories simple_pg_Wggh_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Wggh_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Wggh"();


--
-- Name: items simple_pg_Wggh_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Wggh_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Wggh"();


--
-- Name: line_items simple_pg_Wggh_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Wggh_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Wggh"();


--
-- Name: settings simple_pg_Wggh_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Wggh_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Wggh"();


--
-- Name: shifts simple_pg_Wggh_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Wggh_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Wggh"();


--
-- Name: transactions simple_pg_Wggh_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Wggh_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Wggh"();


--
-- Name: categories simple_pg_WjkK_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WjkK_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WjkK"();


--
-- Name: discounts simple_pg_WjkK_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WjkK_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WjkK"();


--
-- Name: items simple_pg_WjkK_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WjkK_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WjkK"();


--
-- Name: line_items simple_pg_WjkK_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WjkK_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WjkK"();


--
-- Name: settings simple_pg_WjkK_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WjkK_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WjkK"();


--
-- Name: shifts simple_pg_WjkK_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WjkK_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WjkK"();


--
-- Name: transactions simple_pg_WjkK_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WjkK_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WjkK"();


--
-- Name: categories simple_pg_WwsN_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WwsN_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WwsN"();


--
-- Name: items simple_pg_WwsN_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WwsN_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WwsN"();


--
-- Name: line_items simple_pg_WwsN_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WwsN_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WwsN"();


--
-- Name: settings simple_pg_WwsN_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WwsN_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WwsN"();


--
-- Name: shifts simple_pg_WwsN_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WwsN_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WwsN"();


--
-- Name: transactions simple_pg_WwsN_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_WwsN_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_WwsN"();


--
-- Name: categories simple_pg_X6bt_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_X6bt_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_X6bt"();


--
-- Name: items simple_pg_X6bt_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_X6bt_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_X6bt"();


--
-- Name: line_items simple_pg_X6bt_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_X6bt_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_X6bt"();


--
-- Name: settings simple_pg_X6bt_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_X6bt_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_X6bt"();


--
-- Name: shifts simple_pg_X6bt_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_X6bt_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_X6bt"();


--
-- Name: transactions simple_pg_X6bt_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_X6bt_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_X6bt"();


--
-- Name: categories simple_pg_XNnf_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XNnf_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XNnf"();


--
-- Name: items simple_pg_XNnf_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XNnf_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XNnf"();


--
-- Name: line_items simple_pg_XNnf_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XNnf_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XNnf"();


--
-- Name: settings simple_pg_XNnf_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XNnf_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XNnf"();


--
-- Name: shifts simple_pg_XNnf_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XNnf_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XNnf"();


--
-- Name: transactions simple_pg_XNnf_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XNnf_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XNnf"();


--
-- Name: categories simple_pg_XZHE_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XZHE_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XZHE"();


--
-- Name: items simple_pg_XZHE_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XZHE_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XZHE"();


--
-- Name: line_items simple_pg_XZHE_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XZHE_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XZHE"();


--
-- Name: settings simple_pg_XZHE_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XZHE_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XZHE"();


--
-- Name: shifts simple_pg_XZHE_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XZHE_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XZHE"();


--
-- Name: transactions simple_pg_XZHE_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_XZHE_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_XZHE"();


--
-- Name: categories simple_pg_Xe3e_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xe3e_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xe3e"();


--
-- Name: discounts simple_pg_Xe3e_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xe3e_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xe3e"();


--
-- Name: items simple_pg_Xe3e_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xe3e_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xe3e"();


--
-- Name: line_items simple_pg_Xe3e_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xe3e_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xe3e"();


--
-- Name: settings simple_pg_Xe3e_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xe3e_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xe3e"();


--
-- Name: shifts simple_pg_Xe3e_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xe3e_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xe3e"();


--
-- Name: transactions simple_pg_Xe3e_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xe3e_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xe3e"();


--
-- Name: categories simple_pg_Xkve_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xkve_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xkve"();


--
-- Name: items simple_pg_Xkve_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xkve_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xkve"();


--
-- Name: line_items simple_pg_Xkve_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xkve_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xkve"();


--
-- Name: settings simple_pg_Xkve_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xkve_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xkve"();


--
-- Name: shifts simple_pg_Xkve_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xkve_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xkve"();


--
-- Name: transactions simple_pg_Xkve_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xkve_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xkve"();


--
-- Name: categories simple_pg_Xrdd_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xrdd_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xrdd"();


--
-- Name: items simple_pg_Xrdd_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xrdd_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xrdd"();


--
-- Name: line_items simple_pg_Xrdd_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xrdd_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xrdd"();


--
-- Name: settings simple_pg_Xrdd_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xrdd_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xrdd"();


--
-- Name: shifts simple_pg_Xrdd_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xrdd_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xrdd"();


--
-- Name: transactions simple_pg_Xrdd_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xrdd_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xrdd"();


--
-- Name: categories simple_pg_Xsf2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xsf2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xsf2"();


--
-- Name: items simple_pg_Xsf2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xsf2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xsf2"();


--
-- Name: line_items simple_pg_Xsf2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xsf2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xsf2"();


--
-- Name: settings simple_pg_Xsf2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xsf2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xsf2"();


--
-- Name: shifts simple_pg_Xsf2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xsf2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xsf2"();


--
-- Name: transactions simple_pg_Xsf2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xsf2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xsf2"();


--
-- Name: categories simple_pg_Xv6M_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xv6M_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xv6M"();


--
-- Name: items simple_pg_Xv6M_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xv6M_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xv6M"();


--
-- Name: line_items simple_pg_Xv6M_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xv6M_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xv6M"();


--
-- Name: settings simple_pg_Xv6M_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xv6M_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xv6M"();


--
-- Name: shifts simple_pg_Xv6M_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xv6M_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xv6M"();


--
-- Name: transactions simple_pg_Xv6M_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Xv6M_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Xv6M"();


--
-- Name: categories simple_pg_Y24M_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y24M_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y24M"();


--
-- Name: discounts simple_pg_Y24M_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y24M_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y24M"();


--
-- Name: items simple_pg_Y24M_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y24M_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y24M"();


--
-- Name: line_items simple_pg_Y24M_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y24M_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y24M"();


--
-- Name: settings simple_pg_Y24M_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y24M_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y24M"();


--
-- Name: shifts simple_pg_Y24M_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y24M_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y24M"();


--
-- Name: transactions simple_pg_Y24M_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y24M_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y24M"();


--
-- Name: categories simple_pg_Y8CE_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8CE_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8CE"();


--
-- Name: items simple_pg_Y8CE_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8CE_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8CE"();


--
-- Name: line_items simple_pg_Y8CE_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8CE_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8CE"();


--
-- Name: settings simple_pg_Y8CE_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8CE_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8CE"();


--
-- Name: shifts simple_pg_Y8CE_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8CE_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8CE"();


--
-- Name: transactions simple_pg_Y8CE_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8CE_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8CE"();


--
-- Name: categories simple_pg_Y8kA_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8kA_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8kA"();


--
-- Name: discounts simple_pg_Y8kA_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8kA_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8kA"();


--
-- Name: items simple_pg_Y8kA_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8kA_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8kA"();


--
-- Name: line_items simple_pg_Y8kA_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8kA_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8kA"();


--
-- Name: settings simple_pg_Y8kA_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8kA_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8kA"();


--
-- Name: shifts simple_pg_Y8kA_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8kA_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8kA"();


--
-- Name: transactions simple_pg_Y8kA_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Y8kA_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Y8kA"();


--
-- Name: categories simple_pg_YDK6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YDK6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YDK6"();


--
-- Name: items simple_pg_YDK6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YDK6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YDK6"();


--
-- Name: line_items simple_pg_YDK6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YDK6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YDK6"();


--
-- Name: settings simple_pg_YDK6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YDK6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YDK6"();


--
-- Name: shifts simple_pg_YDK6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YDK6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YDK6"();


--
-- Name: transactions simple_pg_YDK6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YDK6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YDK6"();


--
-- Name: categories simple_pg_YFqE_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YFqE_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YFqE"();


--
-- Name: items simple_pg_YFqE_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YFqE_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YFqE"();


--
-- Name: line_items simple_pg_YFqE_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YFqE_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YFqE"();


--
-- Name: settings simple_pg_YFqE_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YFqE_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YFqE"();


--
-- Name: shifts simple_pg_YFqE_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YFqE_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YFqE"();


--
-- Name: transactions simple_pg_YFqE_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YFqE_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YFqE"();


--
-- Name: categories simple_pg_YSQf_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YSQf_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YSQf"();


--
-- Name: items simple_pg_YSQf_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YSQf_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YSQf"();


--
-- Name: line_items simple_pg_YSQf_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YSQf_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YSQf"();


--
-- Name: settings simple_pg_YSQf_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YSQf_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YSQf"();


--
-- Name: shifts simple_pg_YSQf_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YSQf_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YSQf"();


--
-- Name: transactions simple_pg_YSQf_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YSQf_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YSQf"();


--
-- Name: categories simple_pg_YY4K_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YY4K_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YY4K"();


--
-- Name: discounts simple_pg_YY4K_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YY4K_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YY4K"();


--
-- Name: items simple_pg_YY4K_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YY4K_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YY4K"();


--
-- Name: line_items simple_pg_YY4K_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YY4K_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YY4K"();


--
-- Name: settings simple_pg_YY4K_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YY4K_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YY4K"();


--
-- Name: shifts simple_pg_YY4K_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YY4K_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YY4K"();


--
-- Name: transactions simple_pg_YY4K_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YY4K_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YY4K"();


--
-- Name: categories simple_pg_YYYu_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YYYu_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YYYu"();


--
-- Name: discounts simple_pg_YYYu_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YYYu_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YYYu"();


--
-- Name: items simple_pg_YYYu_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YYYu_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YYYu"();


--
-- Name: line_items simple_pg_YYYu_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YYYu_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YYYu"();


--
-- Name: settings simple_pg_YYYu_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YYYu_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YYYu"();


--
-- Name: shifts simple_pg_YYYu_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YYYu_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YYYu"();


--
-- Name: transactions simple_pg_YYYu_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YYYu_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YYYu"();


--
-- Name: categories simple_pg_Yaha_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yaha_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yaha"();


--
-- Name: items simple_pg_Yaha_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yaha_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yaha"();


--
-- Name: line_items simple_pg_Yaha_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yaha_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yaha"();


--
-- Name: settings simple_pg_Yaha_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yaha_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yaha"();


--
-- Name: shifts simple_pg_Yaha_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yaha_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yaha"();


--
-- Name: transactions simple_pg_Yaha_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yaha_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yaha"();


--
-- Name: categories simple_pg_YeG6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YeG6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YeG6"();


--
-- Name: items simple_pg_YeG6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YeG6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YeG6"();


--
-- Name: line_items simple_pg_YeG6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YeG6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YeG6"();


--
-- Name: settings simple_pg_YeG6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YeG6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YeG6"();


--
-- Name: shifts simple_pg_YeG6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YeG6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YeG6"();


--
-- Name: transactions simple_pg_YeG6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_YeG6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_YeG6"();


--
-- Name: categories simple_pg_Yp3z_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yp3z_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yp3z"();


--
-- Name: items simple_pg_Yp3z_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yp3z_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yp3z"();


--
-- Name: line_items simple_pg_Yp3z_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yp3z_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yp3z"();


--
-- Name: settings simple_pg_Yp3z_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yp3z_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yp3z"();


--
-- Name: shifts simple_pg_Yp3z_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yp3z_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yp3z"();


--
-- Name: transactions simple_pg_Yp3z_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yp3z_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yp3z"();


--
-- Name: categories simple_pg_Yr9g_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yr9g_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yr9g"();


--
-- Name: discounts simple_pg_Yr9g_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yr9g_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yr9g"();


--
-- Name: items simple_pg_Yr9g_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yr9g_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yr9g"();


--
-- Name: line_items simple_pg_Yr9g_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yr9g_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yr9g"();


--
-- Name: settings simple_pg_Yr9g_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yr9g_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yr9g"();


--
-- Name: shifts simple_pg_Yr9g_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yr9g_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yr9g"();


--
-- Name: transactions simple_pg_Yr9g_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_Yr9g_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_Yr9g"();


--
-- Name: categories simple_pg_ZGiR_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZGiR_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZGiR"();


--
-- Name: items simple_pg_ZGiR_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZGiR_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZGiR"();


--
-- Name: line_items simple_pg_ZGiR_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZGiR_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZGiR"();


--
-- Name: settings simple_pg_ZGiR_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZGiR_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZGiR"();


--
-- Name: shifts simple_pg_ZGiR_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZGiR_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZGiR"();


--
-- Name: transactions simple_pg_ZGiR_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZGiR_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZGiR"();


--
-- Name: categories simple_pg_ZKJD_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZKJD_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZKJD"();


--
-- Name: items simple_pg_ZKJD_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZKJD_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZKJD"();


--
-- Name: line_items simple_pg_ZKJD_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZKJD_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZKJD"();


--
-- Name: settings simple_pg_ZKJD_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZKJD_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZKJD"();


--
-- Name: shifts simple_pg_ZKJD_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZKJD_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZKJD"();


--
-- Name: transactions simple_pg_ZKJD_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZKJD_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZKJD"();


--
-- Name: categories simple_pg_ZLdm_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZLdm_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZLdm"();


--
-- Name: items simple_pg_ZLdm_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZLdm_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZLdm"();


--
-- Name: line_items simple_pg_ZLdm_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZLdm_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZLdm"();


--
-- Name: settings simple_pg_ZLdm_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZLdm_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZLdm"();


--
-- Name: shifts simple_pg_ZLdm_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZLdm_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZLdm"();


--
-- Name: transactions simple_pg_ZLdm_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZLdm_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZLdm"();


--
-- Name: categories simple_pg_ZNkT_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZNkT_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZNkT"();


--
-- Name: items simple_pg_ZNkT_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZNkT_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZNkT"();


--
-- Name: line_items simple_pg_ZNkT_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZNkT_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZNkT"();


--
-- Name: settings simple_pg_ZNkT_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZNkT_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZNkT"();


--
-- Name: shifts simple_pg_ZNkT_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZNkT_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZNkT"();


--
-- Name: transactions simple_pg_ZNkT_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZNkT_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZNkT"();


--
-- Name: categories simple_pg_ZWH6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZWH6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZWH6"();


--
-- Name: items simple_pg_ZWH6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZWH6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZWH6"();


--
-- Name: line_items simple_pg_ZWH6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZWH6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZWH6"();


--
-- Name: settings simple_pg_ZWH6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZWH6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZWH6"();


--
-- Name: shifts simple_pg_ZWH6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZWH6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZWH6"();


--
-- Name: transactions simple_pg_ZWH6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZWH6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZWH6"();


--
-- Name: categories simple_pg_ZfAL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZfAL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZfAL"();


--
-- Name: items simple_pg_ZfAL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZfAL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZfAL"();


--
-- Name: line_items simple_pg_ZfAL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZfAL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZfAL"();


--
-- Name: settings simple_pg_ZfAL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZfAL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZfAL"();


--
-- Name: shifts simple_pg_ZfAL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZfAL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZfAL"();


--
-- Name: transactions simple_pg_ZfAL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ZfAL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ZfAL"();


--
-- Name: categories simple_pg_a3vz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_a3vz_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_a3vz();


--
-- Name: items simple_pg_a3vz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_a3vz_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_a3vz();


--
-- Name: line_items simple_pg_a3vz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_a3vz_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_a3vz();


--
-- Name: settings simple_pg_a3vz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_a3vz_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_a3vz();


--
-- Name: shifts simple_pg_a3vz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_a3vz_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_a3vz();


--
-- Name: transactions simple_pg_a3vz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_a3vz_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_a3vz();


--
-- Name: categories simple_pg_a5gD_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_a5gD_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_a5gD"();


--
-- Name: items simple_pg_a5gD_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_a5gD_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_a5gD"();


--
-- Name: line_items simple_pg_a5gD_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_a5gD_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_a5gD"();


--
-- Name: settings simple_pg_a5gD_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_a5gD_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_a5gD"();


--
-- Name: shifts simple_pg_a5gD_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_a5gD_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_a5gD"();


--
-- Name: transactions simple_pg_a5gD_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_a5gD_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_a5gD"();


--
-- Name: categories simple_pg_aLJ9_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLJ9_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLJ9"();


--
-- Name: items simple_pg_aLJ9_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLJ9_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLJ9"();


--
-- Name: line_items simple_pg_aLJ9_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLJ9_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLJ9"();


--
-- Name: settings simple_pg_aLJ9_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLJ9_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLJ9"();


--
-- Name: shifts simple_pg_aLJ9_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLJ9_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLJ9"();


--
-- Name: transactions simple_pg_aLJ9_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLJ9_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLJ9"();


--
-- Name: categories simple_pg_aLxL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLxL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLxL"();


--
-- Name: items simple_pg_aLxL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLxL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLxL"();


--
-- Name: line_items simple_pg_aLxL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLxL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLxL"();


--
-- Name: settings simple_pg_aLxL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLxL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLxL"();


--
-- Name: shifts simple_pg_aLxL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLxL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLxL"();


--
-- Name: transactions simple_pg_aLxL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aLxL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aLxL"();


--
-- Name: categories simple_pg_aMw2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aMw2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aMw2"();


--
-- Name: discounts simple_pg_aMw2_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aMw2_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aMw2"();


--
-- Name: items simple_pg_aMw2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aMw2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aMw2"();


--
-- Name: line_items simple_pg_aMw2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aMw2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aMw2"();


--
-- Name: settings simple_pg_aMw2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aMw2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aMw2"();


--
-- Name: shifts simple_pg_aMw2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aMw2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aMw2"();


--
-- Name: transactions simple_pg_aMw2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aMw2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aMw2"();


--
-- Name: categories simple_pg_aXwB_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aXwB_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aXwB"();


--
-- Name: discounts simple_pg_aXwB_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aXwB_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aXwB"();


--
-- Name: items simple_pg_aXwB_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aXwB_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aXwB"();


--
-- Name: line_items simple_pg_aXwB_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aXwB_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aXwB"();


--
-- Name: settings simple_pg_aXwB_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aXwB_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aXwB"();


--
-- Name: shifts simple_pg_aXwB_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aXwB_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aXwB"();


--
-- Name: transactions simple_pg_aXwB_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_aXwB_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_aXwB"();


--
-- Name: categories simple_pg_adGF_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_adGF_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_adGF"();


--
-- Name: items simple_pg_adGF_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_adGF_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_adGF"();


--
-- Name: line_items simple_pg_adGF_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_adGF_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_adGF"();


--
-- Name: settings simple_pg_adGF_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_adGF_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_adGF"();


--
-- Name: shifts simple_pg_adGF_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_adGF_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_adGF"();


--
-- Name: transactions simple_pg_adGF_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_adGF_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_adGF"();


--
-- Name: categories simple_pg_adjd_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_adjd_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_adjd();


--
-- Name: items simple_pg_adjd_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_adjd_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_adjd();


--
-- Name: line_items simple_pg_adjd_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_adjd_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_adjd();


--
-- Name: settings simple_pg_adjd_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_adjd_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_adjd();


--
-- Name: shifts simple_pg_adjd_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_adjd_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_adjd();


--
-- Name: transactions simple_pg_adjd_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_adjd_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_adjd();


--
-- Name: categories simple_pg_agvW_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_agvW_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_agvW"();


--
-- Name: items simple_pg_agvW_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_agvW_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_agvW"();


--
-- Name: line_items simple_pg_agvW_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_agvW_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_agvW"();


--
-- Name: settings simple_pg_agvW_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_agvW_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_agvW"();


--
-- Name: shifts simple_pg_agvW_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_agvW_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_agvW"();


--
-- Name: transactions simple_pg_agvW_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_agvW_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_agvW"();


--
-- Name: categories simple_pg_asH3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_asH3_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_asH3"();


--
-- Name: items simple_pg_asH3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_asH3_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_asH3"();


--
-- Name: line_items simple_pg_asH3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_asH3_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_asH3"();


--
-- Name: settings simple_pg_asH3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_asH3_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_asH3"();


--
-- Name: shifts simple_pg_asH3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_asH3_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_asH3"();


--
-- Name: transactions simple_pg_asH3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_asH3_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_asH3"();


--
-- Name: categories simple_pg_ayhw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ayhw_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ayhw();


--
-- Name: items simple_pg_ayhw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ayhw_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ayhw();


--
-- Name: line_items simple_pg_ayhw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ayhw_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ayhw();


--
-- Name: settings simple_pg_ayhw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ayhw_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ayhw();


--
-- Name: shifts simple_pg_ayhw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ayhw_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ayhw();


--
-- Name: transactions simple_pg_ayhw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ayhw_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ayhw();


--
-- Name: categories simple_pg_b6Lq_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b6Lq_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b6Lq"();


--
-- Name: items simple_pg_b6Lq_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b6Lq_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b6Lq"();


--
-- Name: line_items simple_pg_b6Lq_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b6Lq_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b6Lq"();


--
-- Name: settings simple_pg_b6Lq_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b6Lq_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b6Lq"();


--
-- Name: shifts simple_pg_b6Lq_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b6Lq_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b6Lq"();


--
-- Name: transactions simple_pg_b6Lq_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b6Lq_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b6Lq"();


--
-- Name: categories simple_pg_b8Ya_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b8Ya_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b8Ya"();


--
-- Name: discounts simple_pg_b8Ya_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b8Ya_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b8Ya"();


--
-- Name: items simple_pg_b8Ya_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b8Ya_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b8Ya"();


--
-- Name: line_items simple_pg_b8Ya_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b8Ya_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b8Ya"();


--
-- Name: settings simple_pg_b8Ya_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b8Ya_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b8Ya"();


--
-- Name: shifts simple_pg_b8Ya_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b8Ya_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b8Ya"();


--
-- Name: transactions simple_pg_b8Ya_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_b8Ya_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_b8Ya"();


--
-- Name: categories simple_pg_bFCE_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bFCE_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bFCE"();


--
-- Name: items simple_pg_bFCE_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bFCE_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bFCE"();


--
-- Name: line_items simple_pg_bFCE_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bFCE_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bFCE"();


--
-- Name: settings simple_pg_bFCE_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bFCE_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bFCE"();


--
-- Name: shifts simple_pg_bFCE_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bFCE_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bFCE"();


--
-- Name: transactions simple_pg_bFCE_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bFCE_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bFCE"();


--
-- Name: categories simple_pg_bYBJ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bYBJ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bYBJ"();


--
-- Name: items simple_pg_bYBJ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bYBJ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bYBJ"();


--
-- Name: line_items simple_pg_bYBJ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bYBJ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bYBJ"();


--
-- Name: settings simple_pg_bYBJ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bYBJ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bYBJ"();


--
-- Name: shifts simple_pg_bYBJ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bYBJ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bYBJ"();


--
-- Name: transactions simple_pg_bYBJ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bYBJ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bYBJ"();


--
-- Name: categories simple_pg_bo6M_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bo6M_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bo6M"();


--
-- Name: discounts simple_pg_bo6M_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bo6M_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bo6M"();


--
-- Name: items simple_pg_bo6M_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bo6M_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bo6M"();


--
-- Name: line_items simple_pg_bo6M_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bo6M_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bo6M"();


--
-- Name: settings simple_pg_bo6M_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bo6M_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bo6M"();


--
-- Name: shifts simple_pg_bo6M_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bo6M_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bo6M"();


--
-- Name: transactions simple_pg_bo6M_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_bo6M_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_bo6M"();


--
-- Name: categories simple_pg_cDaQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cDaQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cDaQ"();


--
-- Name: items simple_pg_cDaQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cDaQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cDaQ"();


--
-- Name: line_items simple_pg_cDaQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cDaQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cDaQ"();


--
-- Name: settings simple_pg_cDaQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cDaQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cDaQ"();


--
-- Name: shifts simple_pg_cDaQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cDaQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cDaQ"();


--
-- Name: transactions simple_pg_cDaQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cDaQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cDaQ"();


--
-- Name: categories simple_pg_cH2v_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cH2v_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cH2v"();


--
-- Name: items simple_pg_cH2v_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cH2v_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cH2v"();


--
-- Name: line_items simple_pg_cH2v_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cH2v_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cH2v"();


--
-- Name: settings simple_pg_cH2v_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cH2v_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cH2v"();


--
-- Name: shifts simple_pg_cH2v_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cH2v_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cH2v"();


--
-- Name: transactions simple_pg_cH2v_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cH2v_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cH2v"();


--
-- Name: categories simple_pg_cSGw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cSGw_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cSGw"();


--
-- Name: discounts simple_pg_cSGw_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cSGw_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cSGw"();


--
-- Name: items simple_pg_cSGw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cSGw_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cSGw"();


--
-- Name: line_items simple_pg_cSGw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cSGw_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cSGw"();


--
-- Name: settings simple_pg_cSGw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cSGw_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cSGw"();


--
-- Name: shifts simple_pg_cSGw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cSGw_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cSGw"();


--
-- Name: transactions simple_pg_cSGw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cSGw_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cSGw"();


--
-- Name: categories simple_pg_ce4f_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ce4f_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ce4f();


--
-- Name: items simple_pg_ce4f_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ce4f_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ce4f();


--
-- Name: line_items simple_pg_ce4f_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ce4f_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ce4f();


--
-- Name: settings simple_pg_ce4f_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ce4f_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ce4f();


--
-- Name: shifts simple_pg_ce4f_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ce4f_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ce4f();


--
-- Name: transactions simple_pg_ce4f_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ce4f_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ce4f();


--
-- Name: categories simple_pg_cjAL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cjAL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cjAL"();


--
-- Name: discounts simple_pg_cjAL_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cjAL_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cjAL"();


--
-- Name: items simple_pg_cjAL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cjAL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cjAL"();


--
-- Name: line_items simple_pg_cjAL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cjAL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cjAL"();


--
-- Name: settings simple_pg_cjAL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cjAL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cjAL"();


--
-- Name: shifts simple_pg_cjAL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cjAL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cjAL"();


--
-- Name: transactions simple_pg_cjAL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_cjAL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_cjAL"();


--
-- Name: categories simple_pg_csbF_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_csbF_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_csbF"();


--
-- Name: items simple_pg_csbF_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_csbF_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_csbF"();


--
-- Name: line_items simple_pg_csbF_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_csbF_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_csbF"();


--
-- Name: settings simple_pg_csbF_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_csbF_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_csbF"();


--
-- Name: shifts simple_pg_csbF_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_csbF_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_csbF"();


--
-- Name: transactions simple_pg_csbF_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_csbF_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_csbF"();


--
-- Name: categories simple_pg_d275_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_d275_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_d275();


--
-- Name: items simple_pg_d275_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_d275_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_d275();


--
-- Name: line_items simple_pg_d275_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_d275_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_d275();


--
-- Name: settings simple_pg_d275_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_d275_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_d275();


--
-- Name: shifts simple_pg_d275_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_d275_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_d275();


--
-- Name: transactions simple_pg_d275_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_d275_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_d275();


--
-- Name: categories simple_pg_d3DB_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_d3DB_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_d3DB"();


--
-- Name: items simple_pg_d3DB_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_d3DB_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_d3DB"();


--
-- Name: line_items simple_pg_d3DB_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_d3DB_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_d3DB"();


--
-- Name: settings simple_pg_d3DB_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_d3DB_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_d3DB"();


--
-- Name: shifts simple_pg_d3DB_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_d3DB_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_d3DB"();


--
-- Name: transactions simple_pg_d3DB_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_d3DB_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_d3DB"();


--
-- Name: categories simple_pg_dAsH_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dAsH_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dAsH"();


--
-- Name: items simple_pg_dAsH_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dAsH_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dAsH"();


--
-- Name: line_items simple_pg_dAsH_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dAsH_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dAsH"();


--
-- Name: settings simple_pg_dAsH_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dAsH_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dAsH"();


--
-- Name: shifts simple_pg_dAsH_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dAsH_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dAsH"();


--
-- Name: transactions simple_pg_dAsH_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dAsH_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dAsH"();


--
-- Name: categories simple_pg_dKmL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dKmL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dKmL"();


--
-- Name: items simple_pg_dKmL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dKmL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dKmL"();


--
-- Name: line_items simple_pg_dKmL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dKmL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dKmL"();


--
-- Name: settings simple_pg_dKmL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dKmL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dKmL"();


--
-- Name: shifts simple_pg_dKmL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dKmL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dKmL"();


--
-- Name: transactions simple_pg_dKmL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dKmL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dKmL"();


--
-- Name: categories simple_pg_dRAE_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dRAE_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dRAE"();


--
-- Name: items simple_pg_dRAE_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dRAE_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dRAE"();


--
-- Name: line_items simple_pg_dRAE_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dRAE_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dRAE"();


--
-- Name: settings simple_pg_dRAE_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dRAE_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dRAE"();


--
-- Name: shifts simple_pg_dRAE_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dRAE_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dRAE"();


--
-- Name: transactions simple_pg_dRAE_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dRAE_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dRAE"();


--
-- Name: categories simple_pg_dZNg_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dZNg_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dZNg"();


--
-- Name: discounts simple_pg_dZNg_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dZNg_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dZNg"();


--
-- Name: items simple_pg_dZNg_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dZNg_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dZNg"();


--
-- Name: line_items simple_pg_dZNg_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dZNg_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dZNg"();


--
-- Name: settings simple_pg_dZNg_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dZNg_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dZNg"();


--
-- Name: shifts simple_pg_dZNg_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dZNg_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dZNg"();


--
-- Name: transactions simple_pg_dZNg_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dZNg_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dZNg"();


--
-- Name: categories simple_pg_dhxD_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dhxD_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dhxD"();


--
-- Name: items simple_pg_dhxD_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dhxD_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dhxD"();


--
-- Name: line_items simple_pg_dhxD_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dhxD_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dhxD"();


--
-- Name: settings simple_pg_dhxD_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dhxD_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dhxD"();


--
-- Name: shifts simple_pg_dhxD_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dhxD_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dhxD"();


--
-- Name: transactions simple_pg_dhxD_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dhxD_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dhxD"();


--
-- Name: categories simple_pg_dx2K_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dx2K_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dx2K"();


--
-- Name: items simple_pg_dx2K_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dx2K_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dx2K"();


--
-- Name: line_items simple_pg_dx2K_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dx2K_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dx2K"();


--
-- Name: settings simple_pg_dx2K_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dx2K_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dx2K"();


--
-- Name: shifts simple_pg_dx2K_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dx2K_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dx2K"();


--
-- Name: transactions simple_pg_dx2K_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_dx2K_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_dx2K"();


--
-- Name: categories simple_pg_e6rz_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_e6rz_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_e6rz();


--
-- Name: discounts simple_pg_e6rz_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_e6rz_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_e6rz();


--
-- Name: items simple_pg_e6rz_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_e6rz_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_e6rz();


--
-- Name: line_items simple_pg_e6rz_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_e6rz_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_e6rz();


--
-- Name: settings simple_pg_e6rz_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_e6rz_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_e6rz();


--
-- Name: shifts simple_pg_e6rz_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_e6rz_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_e6rz();


--
-- Name: transactions simple_pg_e6rz_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_e6rz_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_e6rz();


--
-- Name: categories simple_pg_eLM2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eLM2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eLM2"();


--
-- Name: items simple_pg_eLM2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eLM2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eLM2"();


--
-- Name: line_items simple_pg_eLM2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eLM2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eLM2"();


--
-- Name: settings simple_pg_eLM2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eLM2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eLM2"();


--
-- Name: shifts simple_pg_eLM2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eLM2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eLM2"();


--
-- Name: transactions simple_pg_eLM2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eLM2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eLM2"();


--
-- Name: categories simple_pg_eQ9v_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eQ9v_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eQ9v"();


--
-- Name: items simple_pg_eQ9v_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eQ9v_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eQ9v"();


--
-- Name: line_items simple_pg_eQ9v_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eQ9v_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eQ9v"();


--
-- Name: categories simple_pg_eRoL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eRoL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eRoL"();


--
-- Name: items simple_pg_eRoL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eRoL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eRoL"();


--
-- Name: line_items simple_pg_eRoL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eRoL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eRoL"();


--
-- Name: settings simple_pg_eRoL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eRoL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eRoL"();


--
-- Name: shifts simple_pg_eRoL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eRoL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eRoL"();


--
-- Name: transactions simple_pg_eRoL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eRoL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eRoL"();


--
-- Name: categories simple_pg_eThQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eThQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eThQ"();


--
-- Name: items simple_pg_eThQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eThQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eThQ"();


--
-- Name: line_items simple_pg_eThQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eThQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eThQ"();


--
-- Name: settings simple_pg_eThQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eThQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eThQ"();


--
-- Name: shifts simple_pg_eThQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eThQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eThQ"();


--
-- Name: transactions simple_pg_eThQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eThQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eThQ"();


--
-- Name: categories simple_pg_ebt7_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ebt7_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ebt7();


--
-- Name: items simple_pg_ebt7_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ebt7_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ebt7();


--
-- Name: line_items simple_pg_ebt7_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ebt7_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ebt7();


--
-- Name: settings simple_pg_ebt7_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ebt7_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ebt7();


--
-- Name: shifts simple_pg_ebt7_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ebt7_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ebt7();


--
-- Name: transactions simple_pg_ebt7_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ebt7_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ebt7();


--
-- Name: categories simple_pg_ef3s_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ef3s_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ef3s();


--
-- Name: items simple_pg_ef3s_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ef3s_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ef3s();


--
-- Name: line_items simple_pg_ef3s_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ef3s_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ef3s();


--
-- Name: settings simple_pg_ef3s_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ef3s_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ef3s();


--
-- Name: shifts simple_pg_ef3s_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ef3s_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ef3s();


--
-- Name: transactions simple_pg_ef3s_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ef3s_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ef3s();


--
-- Name: categories simple_pg_eiT6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eiT6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eiT6"();


--
-- Name: discounts simple_pg_eiT6_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eiT6_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eiT6"();


--
-- Name: items simple_pg_eiT6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eiT6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eiT6"();


--
-- Name: line_items simple_pg_eiT6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eiT6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eiT6"();


--
-- Name: settings simple_pg_eiT6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eiT6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eiT6"();


--
-- Name: shifts simple_pg_eiT6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eiT6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eiT6"();


--
-- Name: transactions simple_pg_eiT6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eiT6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eiT6"();


--
-- Name: categories simple_pg_ej42_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej42_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej42();


--
-- Name: items simple_pg_ej42_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej42_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej42();


--
-- Name: line_items simple_pg_ej42_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej42_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej42();


--
-- Name: settings simple_pg_ej42_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej42_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej42();


--
-- Name: shifts simple_pg_ej42_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej42_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej42();


--
-- Name: transactions simple_pg_ej42_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej42_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej42();


--
-- Name: categories simple_pg_ej5r_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej5r_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej5r();


--
-- Name: items simple_pg_ej5r_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej5r_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej5r();


--
-- Name: line_items simple_pg_ej5r_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej5r_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej5r();


--
-- Name: settings simple_pg_ej5r_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej5r_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej5r();


--
-- Name: shifts simple_pg_ej5r_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej5r_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej5r();


--
-- Name: transactions simple_pg_ej5r_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ej5r_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ej5r();


--
-- Name: categories simple_pg_ejCu_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ejCu_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ejCu"();


--
-- Name: items simple_pg_ejCu_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ejCu_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ejCu"();


--
-- Name: line_items simple_pg_ejCu_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ejCu_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ejCu"();


--
-- Name: shifts simple_pg_ejCu_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ejCu_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ejCu"();


--
-- Name: transactions simple_pg_ejCu_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ejCu_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ejCu"();


--
-- Name: categories simple_pg_eqmF_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eqmF_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eqmF"();


--
-- Name: items simple_pg_eqmF_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eqmF_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eqmF"();


--
-- Name: line_items simple_pg_eqmF_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eqmF_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eqmF"();


--
-- Name: settings simple_pg_eqmF_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eqmF_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eqmF"();


--
-- Name: shifts simple_pg_eqmF_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eqmF_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eqmF"();


--
-- Name: transactions simple_pg_eqmF_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_eqmF_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_eqmF"();


--
-- Name: categories simple_pg_esoc_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_esoc_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_esoc();


--
-- Name: items simple_pg_esoc_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_esoc_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_esoc();


--
-- Name: line_items simple_pg_esoc_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_esoc_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_esoc();


--
-- Name: settings simple_pg_esoc_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_esoc_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_esoc();


--
-- Name: shifts simple_pg_esoc_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_esoc_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_esoc();


--
-- Name: transactions simple_pg_esoc_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_esoc_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_esoc();


--
-- Name: categories simple_pg_f5tj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_f5tj_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_f5tj();


--
-- Name: items simple_pg_f5tj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_f5tj_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_f5tj();


--
-- Name: line_items simple_pg_f5tj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_f5tj_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_f5tj();


--
-- Name: settings simple_pg_f5tj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_f5tj_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_f5tj();


--
-- Name: shifts simple_pg_f5tj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_f5tj_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_f5tj();


--
-- Name: transactions simple_pg_f5tj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_f5tj_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_f5tj();


--
-- Name: categories simple_pg_fEAe_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fEAe_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fEAe"();


--
-- Name: items simple_pg_fEAe_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fEAe_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fEAe"();


--
-- Name: line_items simple_pg_fEAe_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fEAe_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fEAe"();


--
-- Name: settings simple_pg_fEAe_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fEAe_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fEAe"();


--
-- Name: shifts simple_pg_fEAe_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fEAe_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fEAe"();


--
-- Name: transactions simple_pg_fEAe_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fEAe_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fEAe"();


--
-- Name: categories simple_pg_fLrY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fLrY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fLrY"();


--
-- Name: items simple_pg_fLrY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fLrY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fLrY"();


--
-- Name: line_items simple_pg_fLrY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fLrY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fLrY"();


--
-- Name: settings simple_pg_fLrY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fLrY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fLrY"();


--
-- Name: shifts simple_pg_fLrY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fLrY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fLrY"();


--
-- Name: transactions simple_pg_fLrY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fLrY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fLrY"();


--
-- Name: categories simple_pg_fPuj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fPuj_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fPuj"();


--
-- Name: items simple_pg_fPuj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fPuj_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fPuj"();


--
-- Name: line_items simple_pg_fPuj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fPuj_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fPuj"();


--
-- Name: settings simple_pg_fPuj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fPuj_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fPuj"();


--
-- Name: shifts simple_pg_fPuj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fPuj_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fPuj"();


--
-- Name: transactions simple_pg_fPuj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fPuj_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fPuj"();


--
-- Name: categories simple_pg_fRxv_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fRxv_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fRxv"();


--
-- Name: items simple_pg_fRxv_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fRxv_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fRxv"();


--
-- Name: line_items simple_pg_fRxv_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fRxv_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fRxv"();


--
-- Name: settings simple_pg_fRxv_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fRxv_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fRxv"();


--
-- Name: shifts simple_pg_fRxv_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fRxv_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fRxv"();


--
-- Name: transactions simple_pg_fRxv_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_fRxv_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_fRxv"();


--
-- Name: categories simple_pg_fbav_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fbav_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fbav();


--
-- Name: items simple_pg_fbav_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fbav_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fbav();


--
-- Name: line_items simple_pg_fbav_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fbav_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fbav();


--
-- Name: settings simple_pg_fbav_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fbav_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fbav();


--
-- Name: shifts simple_pg_fbav_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fbav_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fbav();


--
-- Name: transactions simple_pg_fbav_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fbav_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fbav();


--
-- Name: categories simple_pg_ff85_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ff85_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ff85();


--
-- Name: discounts simple_pg_ff85_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ff85_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ff85();


--
-- Name: items simple_pg_ff85_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ff85_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ff85();


--
-- Name: line_items simple_pg_ff85_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ff85_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ff85();


--
-- Name: settings simple_pg_ff85_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ff85_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ff85();


--
-- Name: shifts simple_pg_ff85_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ff85_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ff85();


--
-- Name: transactions simple_pg_ff85_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_ff85_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_ff85();


--
-- Name: categories simple_pg_fh7q_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fh7q_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fh7q();


--
-- Name: items simple_pg_fh7q_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fh7q_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fh7q();


--
-- Name: line_items simple_pg_fh7q_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fh7q_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fh7q();


--
-- Name: settings simple_pg_fh7q_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fh7q_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fh7q();


--
-- Name: shifts simple_pg_fh7q_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fh7q_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fh7q();


--
-- Name: transactions simple_pg_fh7q_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fh7q_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fh7q();


--
-- Name: categories simple_pg_fqph_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fqph_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fqph();


--
-- Name: discounts simple_pg_fqph_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fqph_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fqph();


--
-- Name: items simple_pg_fqph_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fqph_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fqph();


--
-- Name: line_items simple_pg_fqph_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fqph_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fqph();


--
-- Name: settings simple_pg_fqph_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fqph_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fqph();


--
-- Name: shifts simple_pg_fqph_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fqph_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fqph();


--
-- Name: transactions simple_pg_fqph_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fqph_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fqph();


--
-- Name: categories simple_pg_fw3y_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fw3y_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fw3y();


--
-- Name: discounts simple_pg_fw3y_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fw3y_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fw3y();


--
-- Name: items simple_pg_fw3y_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fw3y_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fw3y();


--
-- Name: line_items simple_pg_fw3y_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fw3y_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fw3y();


--
-- Name: settings simple_pg_fw3y_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fw3y_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fw3y();


--
-- Name: shifts simple_pg_fw3y_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fw3y_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fw3y();


--
-- Name: transactions simple_pg_fw3y_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_fw3y_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_fw3y();


--
-- Name: categories simple_pg_gL5X_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gL5X_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gL5X"();


--
-- Name: items simple_pg_gL5X_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gL5X_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gL5X"();


--
-- Name: line_items simple_pg_gL5X_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gL5X_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gL5X"();


--
-- Name: settings simple_pg_gL5X_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gL5X_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gL5X"();


--
-- Name: shifts simple_pg_gL5X_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gL5X_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gL5X"();


--
-- Name: transactions simple_pg_gL5X_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gL5X_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gL5X"();


--
-- Name: categories simple_pg_gNzB_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gNzB_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gNzB"();


--
-- Name: items simple_pg_gNzB_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gNzB_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gNzB"();


--
-- Name: line_items simple_pg_gNzB_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gNzB_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gNzB"();


--
-- Name: settings simple_pg_gNzB_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gNzB_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gNzB"();


--
-- Name: shifts simple_pg_gNzB_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gNzB_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gNzB"();


--
-- Name: transactions simple_pg_gNzB_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gNzB_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gNzB"();


--
-- Name: categories simple_pg_gY4J_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gY4J_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gY4J"();


--
-- Name: discounts simple_pg_gY4J_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gY4J_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gY4J"();


--
-- Name: items simple_pg_gY4J_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gY4J_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gY4J"();


--
-- Name: line_items simple_pg_gY4J_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gY4J_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gY4J"();


--
-- Name: settings simple_pg_gY4J_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gY4J_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gY4J"();


--
-- Name: shifts simple_pg_gY4J_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gY4J_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gY4J"();


--
-- Name: transactions simple_pg_gY4J_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_gY4J_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_gY4J"();


--
-- Name: categories simple_pg_h2uA_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_h2uA_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_h2uA"();


--
-- Name: items simple_pg_h2uA_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_h2uA_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_h2uA"();


--
-- Name: line_items simple_pg_h2uA_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_h2uA_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_h2uA"();


--
-- Name: settings simple_pg_h2uA_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_h2uA_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_h2uA"();


--
-- Name: shifts simple_pg_h2uA_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_h2uA_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_h2uA"();


--
-- Name: transactions simple_pg_h2uA_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_h2uA_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_h2uA"();


--
-- Name: categories simple_pg_hDJ2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hDJ2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hDJ2"();


--
-- Name: items simple_pg_hDJ2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hDJ2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hDJ2"();


--
-- Name: line_items simple_pg_hDJ2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hDJ2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hDJ2"();


--
-- Name: settings simple_pg_hDJ2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hDJ2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hDJ2"();


--
-- Name: shifts simple_pg_hDJ2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hDJ2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hDJ2"();


--
-- Name: transactions simple_pg_hDJ2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hDJ2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hDJ2"();


--
-- Name: categories simple_pg_hEBy_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hEBy_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hEBy"();


--
-- Name: items simple_pg_hEBy_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hEBy_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hEBy"();


--
-- Name: line_items simple_pg_hEBy_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hEBy_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hEBy"();


--
-- Name: settings simple_pg_hEBy_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hEBy_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hEBy"();


--
-- Name: shifts simple_pg_hEBy_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hEBy_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hEBy"();


--
-- Name: transactions simple_pg_hEBy_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hEBy_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hEBy"();


--
-- Name: categories simple_pg_hED7_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hED7_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hED7"();


--
-- Name: discounts simple_pg_hED7_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hED7_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hED7"();


--
-- Name: items simple_pg_hED7_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hED7_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hED7"();


--
-- Name: line_items simple_pg_hED7_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hED7_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hED7"();


--
-- Name: settings simple_pg_hED7_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hED7_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hED7"();


--
-- Name: shifts simple_pg_hED7_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hED7_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hED7"();


--
-- Name: transactions simple_pg_hED7_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hED7_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hED7"();


--
-- Name: categories simple_pg_heDE_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_heDE_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_heDE"();


--
-- Name: items simple_pg_heDE_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_heDE_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_heDE"();


--
-- Name: line_items simple_pg_heDE_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_heDE_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_heDE"();


--
-- Name: settings simple_pg_heDE_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_heDE_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_heDE"();


--
-- Name: shifts simple_pg_heDE_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_heDE_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_heDE"();


--
-- Name: transactions simple_pg_heDE_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_heDE_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_heDE"();


--
-- Name: categories simple_pg_hjaY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hjaY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hjaY"();


--
-- Name: items simple_pg_hjaY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hjaY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hjaY"();


--
-- Name: line_items simple_pg_hjaY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hjaY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hjaY"();


--
-- Name: settings simple_pg_hjaY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hjaY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hjaY"();


--
-- Name: shifts simple_pg_hjaY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hjaY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hjaY"();


--
-- Name: transactions simple_pg_hjaY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hjaY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hjaY"();


--
-- Name: categories simple_pg_hqhY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hqhY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hqhY"();


--
-- Name: items simple_pg_hqhY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hqhY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hqhY"();


--
-- Name: line_items simple_pg_hqhY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hqhY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hqhY"();


--
-- Name: settings simple_pg_hqhY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hqhY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hqhY"();


--
-- Name: shifts simple_pg_hqhY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hqhY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hqhY"();


--
-- Name: transactions simple_pg_hqhY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hqhY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hqhY"();


--
-- Name: categories simple_pg_hrMG_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hrMG_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hrMG"();


--
-- Name: items simple_pg_hrMG_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hrMG_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hrMG"();


--
-- Name: line_items simple_pg_hrMG_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hrMG_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hrMG"();


--
-- Name: settings simple_pg_hrMG_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hrMG_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hrMG"();


--
-- Name: shifts simple_pg_hrMG_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hrMG_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hrMG"();


--
-- Name: transactions simple_pg_hrMG_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_hrMG_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_hrMG"();


--
-- Name: categories simple_pg_huG4_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_huG4_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_huG4"();


--
-- Name: items simple_pg_huG4_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_huG4_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_huG4"();


--
-- Name: line_items simple_pg_huG4_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_huG4_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_huG4"();


--
-- Name: settings simple_pg_huG4_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_huG4_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_huG4"();


--
-- Name: shifts simple_pg_huG4_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_huG4_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_huG4"();


--
-- Name: transactions simple_pg_huG4_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_huG4_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_huG4"();


--
-- Name: categories simple_pg_iGcG_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iGcG_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iGcG"();


--
-- Name: discounts simple_pg_iGcG_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iGcG_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iGcG"();


--
-- Name: items simple_pg_iGcG_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iGcG_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iGcG"();


--
-- Name: line_items simple_pg_iGcG_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iGcG_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iGcG"();


--
-- Name: settings simple_pg_iGcG_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iGcG_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iGcG"();


--
-- Name: shifts simple_pg_iGcG_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iGcG_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iGcG"();


--
-- Name: transactions simple_pg_iGcG_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iGcG_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iGcG"();


--
-- Name: categories simple_pg_iR39_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iR39_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iR39"();


--
-- Name: items simple_pg_iR39_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iR39_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iR39"();


--
-- Name: line_items simple_pg_iR39_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iR39_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iR39"();


--
-- Name: settings simple_pg_iR39_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iR39_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iR39"();


--
-- Name: shifts simple_pg_iR39_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iR39_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iR39"();


--
-- Name: transactions simple_pg_iR39_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iR39_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iR39"();


--
-- Name: categories simple_pg_im7c_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_im7c_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_im7c();


--
-- Name: items simple_pg_im7c_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_im7c_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_im7c();


--
-- Name: line_items simple_pg_im7c_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_im7c_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_im7c();


--
-- Name: settings simple_pg_im7c_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_im7c_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_im7c();


--
-- Name: shifts simple_pg_im7c_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_im7c_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_im7c();


--
-- Name: transactions simple_pg_im7c_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_im7c_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_im7c();


--
-- Name: categories simple_pg_imsK_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_imsK_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_imsK"();


--
-- Name: items simple_pg_imsK_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_imsK_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_imsK"();


--
-- Name: line_items simple_pg_imsK_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_imsK_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_imsK"();


--
-- Name: settings simple_pg_imsK_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_imsK_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_imsK"();


--
-- Name: shifts simple_pg_imsK_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_imsK_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_imsK"();


--
-- Name: transactions simple_pg_imsK_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_imsK_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_imsK"();


--
-- Name: categories simple_pg_ioXR_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ioXR_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ioXR"();


--
-- Name: discounts simple_pg_ioXR_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ioXR_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ioXR"();


--
-- Name: items simple_pg_ioXR_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ioXR_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ioXR"();


--
-- Name: line_items simple_pg_ioXR_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ioXR_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ioXR"();


--
-- Name: settings simple_pg_ioXR_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ioXR_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ioXR"();


--
-- Name: shifts simple_pg_ioXR_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ioXR_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ioXR"();


--
-- Name: transactions simple_pg_ioXR_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ioXR_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ioXR"();


--
-- Name: categories simple_pg_iqHv_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iqHv_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iqHv"();


--
-- Name: items simple_pg_iqHv_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iqHv_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iqHv"();


--
-- Name: line_items simple_pg_iqHv_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iqHv_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iqHv"();


--
-- Name: settings simple_pg_iqHv_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iqHv_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iqHv"();


--
-- Name: shifts simple_pg_iqHv_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iqHv_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iqHv"();


--
-- Name: transactions simple_pg_iqHv_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iqHv_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iqHv"();


--
-- Name: categories simple_pg_iyLG_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iyLG_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iyLG"();


--
-- Name: items simple_pg_iyLG_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iyLG_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iyLG"();


--
-- Name: line_items simple_pg_iyLG_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iyLG_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iyLG"();


--
-- Name: settings simple_pg_iyLG_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iyLG_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iyLG"();


--
-- Name: shifts simple_pg_iyLG_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iyLG_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iyLG"();


--
-- Name: transactions simple_pg_iyLG_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_iyLG_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_iyLG"();


--
-- Name: categories simple_pg_j7La_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_j7La_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_j7La"();


--
-- Name: discounts simple_pg_j7La_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_j7La_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_j7La"();


--
-- Name: items simple_pg_j7La_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_j7La_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_j7La"();


--
-- Name: line_items simple_pg_j7La_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_j7La_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_j7La"();


--
-- Name: settings simple_pg_j7La_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_j7La_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_j7La"();


--
-- Name: shifts simple_pg_j7La_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_j7La_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_j7La"();


--
-- Name: transactions simple_pg_j7La_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_j7La_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_j7La"();


--
-- Name: categories simple_pg_jpjL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jpjL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jpjL"();


--
-- Name: items simple_pg_jpjL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jpjL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jpjL"();


--
-- Name: line_items simple_pg_jpjL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jpjL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jpjL"();


--
-- Name: settings simple_pg_jpjL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jpjL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jpjL"();


--
-- Name: shifts simple_pg_jpjL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jpjL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jpjL"();


--
-- Name: transactions simple_pg_jpjL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jpjL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jpjL"();


--
-- Name: categories simple_pg_jqBt_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqBt_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqBt"();


--
-- Name: items simple_pg_jqBt_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqBt_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqBt"();


--
-- Name: line_items simple_pg_jqBt_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqBt_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqBt"();


--
-- Name: settings simple_pg_jqBt_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqBt_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqBt"();


--
-- Name: shifts simple_pg_jqBt_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqBt_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqBt"();


--
-- Name: transactions simple_pg_jqBt_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqBt_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqBt"();


--
-- Name: categories simple_pg_jqRX_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqRX_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqRX"();


--
-- Name: items simple_pg_jqRX_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqRX_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqRX"();


--
-- Name: line_items simple_pg_jqRX_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqRX_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqRX"();


--
-- Name: settings simple_pg_jqRX_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqRX_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqRX"();


--
-- Name: shifts simple_pg_jqRX_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqRX_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqRX"();


--
-- Name: transactions simple_pg_jqRX_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqRX_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqRX"();


--
-- Name: categories simple_pg_jqrL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqrL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqrL"();


--
-- Name: items simple_pg_jqrL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqrL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqrL"();


--
-- Name: line_items simple_pg_jqrL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqrL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqrL"();


--
-- Name: settings simple_pg_jqrL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqrL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqrL"();


--
-- Name: shifts simple_pg_jqrL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqrL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqrL"();


--
-- Name: transactions simple_pg_jqrL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqrL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqrL"();


--
-- Name: categories simple_pg_jqsB_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqsB_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqsB"();


--
-- Name: items simple_pg_jqsB_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqsB_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqsB"();


--
-- Name: line_items simple_pg_jqsB_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqsB_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqsB"();


--
-- Name: settings simple_pg_jqsB_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqsB_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqsB"();


--
-- Name: shifts simple_pg_jqsB_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqsB_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqsB"();


--
-- Name: transactions simple_pg_jqsB_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jqsB_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jqsB"();


--
-- Name: categories simple_pg_jrN9_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jrN9_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jrN9"();


--
-- Name: items simple_pg_jrN9_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jrN9_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jrN9"();


--
-- Name: line_items simple_pg_jrN9_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jrN9_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jrN9"();


--
-- Name: settings simple_pg_jrN9_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jrN9_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jrN9"();


--
-- Name: shifts simple_pg_jrN9_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jrN9_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jrN9"();


--
-- Name: transactions simple_pg_jrN9_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jrN9_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jrN9"();


--
-- Name: categories simple_pg_jyhm_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_jyhm_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_jyhm();


--
-- Name: discounts simple_pg_jyhm_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_jyhm_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_jyhm();


--
-- Name: items simple_pg_jyhm_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_jyhm_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_jyhm();


--
-- Name: line_items simple_pg_jyhm_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_jyhm_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_jyhm();


--
-- Name: settings simple_pg_jyhm_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_jyhm_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_jyhm();


--
-- Name: shifts simple_pg_jyhm_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_jyhm_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_jyhm();


--
-- Name: transactions simple_pg_jyhm_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_jyhm_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_jyhm();


--
-- Name: categories simple_pg_jzHJ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jzHJ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jzHJ"();


--
-- Name: items simple_pg_jzHJ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jzHJ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jzHJ"();


--
-- Name: line_items simple_pg_jzHJ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jzHJ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jzHJ"();


--
-- Name: shifts simple_pg_jzHJ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jzHJ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jzHJ"();


--
-- Name: transactions simple_pg_jzHJ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_jzHJ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_jzHJ"();


--
-- Name: categories simple_pg_k36E_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_k36E_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_k36E"();


--
-- Name: items simple_pg_k36E_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_k36E_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_k36E"();


--
-- Name: line_items simple_pg_k36E_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_k36E_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_k36E"();


--
-- Name: settings simple_pg_k36E_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_k36E_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_k36E"();


--
-- Name: shifts simple_pg_k36E_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_k36E_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_k36E"();


--
-- Name: transactions simple_pg_k36E_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_k36E_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_k36E"();


--
-- Name: categories simple_pg_k8pq_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_k8pq_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_k8pq();


--
-- Name: discounts simple_pg_k8pq_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_k8pq_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_k8pq();


--
-- Name: items simple_pg_k8pq_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_k8pq_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_k8pq();


--
-- Name: line_items simple_pg_k8pq_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_k8pq_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_k8pq();


--
-- Name: settings simple_pg_k8pq_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_k8pq_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_k8pq();


--
-- Name: shifts simple_pg_k8pq_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_k8pq_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_k8pq();


--
-- Name: transactions simple_pg_k8pq_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_k8pq_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_k8pq();


--
-- Name: categories simple_pg_kGFu_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kGFu_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kGFu"();


--
-- Name: items simple_pg_kGFu_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kGFu_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kGFu"();


--
-- Name: line_items simple_pg_kGFu_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kGFu_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kGFu"();


--
-- Name: settings simple_pg_kGFu_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kGFu_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kGFu"();


--
-- Name: shifts simple_pg_kGFu_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kGFu_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kGFu"();


--
-- Name: transactions simple_pg_kGFu_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kGFu_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kGFu"();


--
-- Name: categories simple_pg_kQKj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQKj_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQKj"();


--
-- Name: items simple_pg_kQKj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQKj_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQKj"();


--
-- Name: line_items simple_pg_kQKj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQKj_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQKj"();


--
-- Name: settings simple_pg_kQKj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQKj_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQKj"();


--
-- Name: shifts simple_pg_kQKj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQKj_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQKj"();


--
-- Name: transactions simple_pg_kQKj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQKj_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQKj"();


--
-- Name: categories simple_pg_kQcR_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQcR_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQcR"();


--
-- Name: items simple_pg_kQcR_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQcR_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQcR"();


--
-- Name: line_items simple_pg_kQcR_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQcR_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQcR"();


--
-- Name: settings simple_pg_kQcR_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQcR_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQcR"();


--
-- Name: shifts simple_pg_kQcR_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQcR_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQcR"();


--
-- Name: transactions simple_pg_kQcR_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kQcR_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kQcR"();


--
-- Name: categories simple_pg_kdvh_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_kdvh_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_kdvh();


--
-- Name: items simple_pg_kdvh_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_kdvh_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_kdvh();


--
-- Name: line_items simple_pg_kdvh_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_kdvh_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_kdvh();


--
-- Name: settings simple_pg_kdvh_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_kdvh_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_kdvh();


--
-- Name: shifts simple_pg_kdvh_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_kdvh_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_kdvh();


--
-- Name: transactions simple_pg_kdvh_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_kdvh_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_kdvh();


--
-- Name: categories simple_pg_kkQm_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kkQm_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kkQm"();


--
-- Name: items simple_pg_kkQm_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kkQm_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kkQm"();


--
-- Name: line_items simple_pg_kkQm_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kkQm_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kkQm"();


--
-- Name: settings simple_pg_kkQm_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kkQm_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kkQm"();


--
-- Name: shifts simple_pg_kkQm_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kkQm_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kkQm"();


--
-- Name: transactions simple_pg_kkQm_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kkQm_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kkQm"();


--
-- Name: categories simple_pg_knm3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_knm3_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_knm3();


--
-- Name: items simple_pg_knm3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_knm3_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_knm3();


--
-- Name: line_items simple_pg_knm3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_knm3_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_knm3();


--
-- Name: settings simple_pg_knm3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_knm3_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_knm3();


--
-- Name: shifts simple_pg_knm3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_knm3_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_knm3();


--
-- Name: transactions simple_pg_knm3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_knm3_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_knm3();


--
-- Name: categories simple_pg_kqBJ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kqBJ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kqBJ"();


--
-- Name: discounts simple_pg_kqBJ_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kqBJ_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kqBJ"();


--
-- Name: items simple_pg_kqBJ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kqBJ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kqBJ"();


--
-- Name: line_items simple_pg_kqBJ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kqBJ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kqBJ"();


--
-- Name: settings simple_pg_kqBJ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kqBJ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kqBJ"();


--
-- Name: shifts simple_pg_kqBJ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kqBJ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kqBJ"();


--
-- Name: transactions simple_pg_kqBJ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_kqBJ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_kqBJ"();


--
-- Name: categories simple_pg_ktkM_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ktkM_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ktkM"();


--
-- Name: items simple_pg_ktkM_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ktkM_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ktkM"();


--
-- Name: line_items simple_pg_ktkM_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ktkM_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ktkM"();


--
-- Name: settings simple_pg_ktkM_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ktkM_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ktkM"();


--
-- Name: shifts simple_pg_ktkM_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ktkM_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ktkM"();


--
-- Name: transactions simple_pg_ktkM_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ktkM_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ktkM"();


--
-- Name: categories simple_pg_m45G_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_m45G_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_m45G"();


--
-- Name: items simple_pg_m45G_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_m45G_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_m45G"();


--
-- Name: line_items simple_pg_m45G_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_m45G_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_m45G"();


--
-- Name: settings simple_pg_m45G_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_m45G_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_m45G"();


--
-- Name: shifts simple_pg_m45G_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_m45G_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_m45G"();


--
-- Name: transactions simple_pg_m45G_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_m45G_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_m45G"();


--
-- Name: categories simple_pg_mBNK_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mBNK_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mBNK"();


--
-- Name: items simple_pg_mBNK_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mBNK_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mBNK"();


--
-- Name: line_items simple_pg_mBNK_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mBNK_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mBNK"();


--
-- Name: settings simple_pg_mBNK_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mBNK_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mBNK"();


--
-- Name: shifts simple_pg_mBNK_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mBNK_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mBNK"();


--
-- Name: transactions simple_pg_mBNK_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mBNK_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mBNK"();


--
-- Name: categories simple_pg_mEGT_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mEGT_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mEGT"();


--
-- Name: discounts simple_pg_mEGT_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mEGT_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mEGT"();


--
-- Name: items simple_pg_mEGT_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mEGT_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mEGT"();


--
-- Name: line_items simple_pg_mEGT_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mEGT_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mEGT"();


--
-- Name: settings simple_pg_mEGT_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mEGT_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mEGT"();


--
-- Name: shifts simple_pg_mEGT_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mEGT_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mEGT"();


--
-- Name: transactions simple_pg_mEGT_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mEGT_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mEGT"();


--
-- Name: categories simple_pg_mWR4_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mWR4_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mWR4"();


--
-- Name: items simple_pg_mWR4_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mWR4_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mWR4"();


--
-- Name: line_items simple_pg_mWR4_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mWR4_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mWR4"();


--
-- Name: settings simple_pg_mWR4_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mWR4_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mWR4"();


--
-- Name: shifts simple_pg_mWR4_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mWR4_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mWR4"();


--
-- Name: transactions simple_pg_mWR4_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mWR4_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mWR4"();


--
-- Name: categories simple_pg_maPp_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_maPp_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_maPp"();


--
-- Name: items simple_pg_maPp_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_maPp_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_maPp"();


--
-- Name: line_items simple_pg_maPp_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_maPp_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_maPp"();


--
-- Name: settings simple_pg_maPp_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_maPp_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_maPp"();


--
-- Name: shifts simple_pg_maPp_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_maPp_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_maPp"();


--
-- Name: transactions simple_pg_maPp_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_maPp_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_maPp"();


--
-- Name: categories simple_pg_mdNY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mdNY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mdNY"();


--
-- Name: items simple_pg_mdNY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mdNY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mdNY"();


--
-- Name: line_items simple_pg_mdNY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mdNY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mdNY"();


--
-- Name: settings simple_pg_mdNY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mdNY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mdNY"();


--
-- Name: shifts simple_pg_mdNY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mdNY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mdNY"();


--
-- Name: transactions simple_pg_mdNY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mdNY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mdNY"();


--
-- Name: categories simple_pg_mhCo_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mhCo_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mhCo"();


--
-- Name: items simple_pg_mhCo_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mhCo_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mhCo"();


--
-- Name: line_items simple_pg_mhCo_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mhCo_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mhCo"();


--
-- Name: settings simple_pg_mhCo_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mhCo_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mhCo"();


--
-- Name: shifts simple_pg_mhCo_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mhCo_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mhCo"();


--
-- Name: transactions simple_pg_mhCo_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mhCo_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mhCo"();


--
-- Name: categories simple_pg_mtAm_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mtAm_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mtAm"();


--
-- Name: discounts simple_pg_mtAm_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mtAm_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mtAm"();


--
-- Name: items simple_pg_mtAm_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mtAm_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mtAm"();


--
-- Name: line_items simple_pg_mtAm_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mtAm_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mtAm"();


--
-- Name: settings simple_pg_mtAm_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mtAm_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mtAm"();


--
-- Name: shifts simple_pg_mtAm_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mtAm_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mtAm"();


--
-- Name: transactions simple_pg_mtAm_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_mtAm_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_mtAm"();


--
-- Name: categories simple_pg_n3QD_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n3QD_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n3QD"();


--
-- Name: items simple_pg_n3QD_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n3QD_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n3QD"();


--
-- Name: line_items simple_pg_n3QD_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n3QD_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n3QD"();


--
-- Name: settings simple_pg_n3QD_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n3QD_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n3QD"();


--
-- Name: shifts simple_pg_n3QD_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n3QD_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n3QD"();


--
-- Name: transactions simple_pg_n3QD_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n3QD_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n3QD"();


--
-- Name: categories simple_pg_n8Xq_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n8Xq_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n8Xq"();


--
-- Name: items simple_pg_n8Xq_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n8Xq_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n8Xq"();


--
-- Name: line_items simple_pg_n8Xq_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n8Xq_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n8Xq"();


--
-- Name: settings simple_pg_n8Xq_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n8Xq_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n8Xq"();


--
-- Name: shifts simple_pg_n8Xq_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n8Xq_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n8Xq"();


--
-- Name: transactions simple_pg_n8Xq_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_n8Xq_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_n8Xq"();


--
-- Name: categories simple_pg_nP9Z_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nP9Z_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nP9Z"();


--
-- Name: items simple_pg_nP9Z_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nP9Z_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nP9Z"();


--
-- Name: line_items simple_pg_nP9Z_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nP9Z_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nP9Z"();


--
-- Name: settings simple_pg_nP9Z_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nP9Z_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nP9Z"();


--
-- Name: shifts simple_pg_nP9Z_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nP9Z_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nP9Z"();


--
-- Name: transactions simple_pg_nP9Z_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nP9Z_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nP9Z"();


--
-- Name: categories simple_pg_nWvq_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nWvq_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nWvq"();


--
-- Name: items simple_pg_nWvq_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nWvq_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nWvq"();


--
-- Name: line_items simple_pg_nWvq_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nWvq_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nWvq"();


--
-- Name: settings simple_pg_nWvq_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nWvq_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nWvq"();


--
-- Name: shifts simple_pg_nWvq_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nWvq_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nWvq"();


--
-- Name: transactions simple_pg_nWvq_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nWvq_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nWvq"();


--
-- Name: categories simple_pg_nXh7_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nXh7_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nXh7"();


--
-- Name: items simple_pg_nXh7_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nXh7_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nXh7"();


--
-- Name: line_items simple_pg_nXh7_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nXh7_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nXh7"();


--
-- Name: settings simple_pg_nXh7_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nXh7_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nXh7"();


--
-- Name: shifts simple_pg_nXh7_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nXh7_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nXh7"();


--
-- Name: transactions simple_pg_nXh7_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nXh7_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nXh7"();


--
-- Name: categories simple_pg_nhdj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_nhdj_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_nhdj();


--
-- Name: discounts simple_pg_nhdj_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_nhdj_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_nhdj();


--
-- Name: items simple_pg_nhdj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_nhdj_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_nhdj();


--
-- Name: line_items simple_pg_nhdj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_nhdj_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_nhdj();


--
-- Name: settings simple_pg_nhdj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_nhdj_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_nhdj();


--
-- Name: shifts simple_pg_nhdj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_nhdj_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_nhdj();


--
-- Name: transactions simple_pg_nhdj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_nhdj_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_nhdj();


--
-- Name: categories simple_pg_nptY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nptY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nptY"();


--
-- Name: items simple_pg_nptY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nptY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nptY"();


--
-- Name: line_items simple_pg_nptY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nptY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nptY"();


--
-- Name: settings simple_pg_nptY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nptY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nptY"();


--
-- Name: shifts simple_pg_nptY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nptY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nptY"();


--
-- Name: transactions simple_pg_nptY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nptY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nptY"();


--
-- Name: categories simple_pg_nqMm_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nqMm_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nqMm"();


--
-- Name: discounts simple_pg_nqMm_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nqMm_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nqMm"();


--
-- Name: items simple_pg_nqMm_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nqMm_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nqMm"();


--
-- Name: line_items simple_pg_nqMm_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nqMm_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nqMm"();


--
-- Name: settings simple_pg_nqMm_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nqMm_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nqMm"();


--
-- Name: shifts simple_pg_nqMm_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nqMm_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nqMm"();


--
-- Name: transactions simple_pg_nqMm_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nqMm_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nqMm"();


--
-- Name: categories simple_pg_nrLC_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nrLC_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nrLC"();


--
-- Name: items simple_pg_nrLC_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nrLC_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nrLC"();


--
-- Name: line_items simple_pg_nrLC_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nrLC_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nrLC"();


--
-- Name: settings simple_pg_nrLC_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nrLC_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nrLC"();


--
-- Name: shifts simple_pg_nrLC_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nrLC_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nrLC"();


--
-- Name: transactions simple_pg_nrLC_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nrLC_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nrLC"();


--
-- Name: categories simple_pg_nuXd_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nuXd_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nuXd"();


--
-- Name: items simple_pg_nuXd_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nuXd_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nuXd"();


--
-- Name: line_items simple_pg_nuXd_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nuXd_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nuXd"();


--
-- Name: settings simple_pg_nuXd_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nuXd_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nuXd"();


--
-- Name: shifts simple_pg_nuXd_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nuXd_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nuXd"();


--
-- Name: transactions simple_pg_nuXd_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_nuXd_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_nuXd"();


--
-- Name: categories simple_pg_o88w_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_o88w_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_o88w();


--
-- Name: items simple_pg_o88w_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_o88w_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_o88w();


--
-- Name: line_items simple_pg_o88w_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_o88w_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_o88w();


--
-- Name: settings simple_pg_o88w_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_o88w_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_o88w();


--
-- Name: shifts simple_pg_o88w_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_o88w_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_o88w();


--
-- Name: transactions simple_pg_o88w_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_o88w_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_o88w();


--
-- Name: categories simple_pg_o9Np_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_o9Np_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_o9Np"();


--
-- Name: items simple_pg_o9Np_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_o9Np_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_o9Np"();


--
-- Name: line_items simple_pg_o9Np_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_o9Np_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_o9Np"();


--
-- Name: settings simple_pg_o9Np_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_o9Np_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_o9Np"();


--
-- Name: shifts simple_pg_o9Np_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_o9Np_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_o9Np"();


--
-- Name: transactions simple_pg_o9Np_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_o9Np_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_o9Np"();


--
-- Name: categories simple_pg_oMLr_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMLr_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMLr"();


--
-- Name: items simple_pg_oMLr_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMLr_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMLr"();


--
-- Name: line_items simple_pg_oMLr_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMLr_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMLr"();


--
-- Name: settings simple_pg_oMLr_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMLr_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMLr"();


--
-- Name: shifts simple_pg_oMLr_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMLr_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMLr"();


--
-- Name: transactions simple_pg_oMLr_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMLr_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMLr"();


--
-- Name: categories simple_pg_oMXY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMXY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMXY"();


--
-- Name: items simple_pg_oMXY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMXY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMXY"();


--
-- Name: line_items simple_pg_oMXY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMXY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMXY"();


--
-- Name: settings simple_pg_oMXY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMXY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMXY"();


--
-- Name: shifts simple_pg_oMXY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMXY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMXY"();


--
-- Name: transactions simple_pg_oMXY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oMXY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oMXY"();


--
-- Name: categories simple_pg_oRM7_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oRM7_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oRM7"();


--
-- Name: items simple_pg_oRM7_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oRM7_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oRM7"();


--
-- Name: line_items simple_pg_oRM7_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oRM7_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oRM7"();


--
-- Name: settings simple_pg_oRM7_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oRM7_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oRM7"();


--
-- Name: shifts simple_pg_oRM7_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oRM7_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oRM7"();


--
-- Name: transactions simple_pg_oRM7_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_oRM7_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_oRM7"();


--
-- Name: categories simple_pg_ooE2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ooE2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ooE2"();


--
-- Name: discounts simple_pg_ooE2_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ooE2_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ooE2"();


--
-- Name: items simple_pg_ooE2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ooE2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ooE2"();


--
-- Name: line_items simple_pg_ooE2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ooE2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ooE2"();


--
-- Name: settings simple_pg_ooE2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ooE2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ooE2"();


--
-- Name: shifts simple_pg_ooE2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ooE2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ooE2"();


--
-- Name: transactions simple_pg_ooE2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ooE2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ooE2"();


--
-- Name: categories simple_pg_orHm_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_orHm_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_orHm"();


--
-- Name: items simple_pg_orHm_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_orHm_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_orHm"();


--
-- Name: line_items simple_pg_orHm_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_orHm_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_orHm"();


--
-- Name: settings simple_pg_orHm_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_orHm_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_orHm"();


--
-- Name: categories simple_pg_p25y_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_p25y_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_p25y();


--
-- Name: items simple_pg_p25y_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_p25y_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_p25y();


--
-- Name: line_items simple_pg_p25y_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_p25y_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_p25y();


--
-- Name: settings simple_pg_p25y_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_p25y_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_p25y();


--
-- Name: shifts simple_pg_p25y_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_p25y_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_p25y();


--
-- Name: transactions simple_pg_p25y_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_p25y_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_p25y();


--
-- Name: categories simple_pg_p2Qb_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_p2Qb_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_p2Qb"();


--
-- Name: discounts simple_pg_p2Qb_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_p2Qb_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_p2Qb"();


--
-- Name: items simple_pg_p2Qb_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_p2Qb_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_p2Qb"();


--
-- Name: line_items simple_pg_p2Qb_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_p2Qb_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_p2Qb"();


--
-- Name: settings simple_pg_p2Qb_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_p2Qb_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_p2Qb"();


--
-- Name: shifts simple_pg_p2Qb_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_p2Qb_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_p2Qb"();


--
-- Name: transactions simple_pg_p2Qb_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_p2Qb_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_p2Qb"();


--
-- Name: categories simple_pg_ptAY_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptAY_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptAY"();


--
-- Name: items simple_pg_ptAY_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptAY_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptAY"();


--
-- Name: line_items simple_pg_ptAY_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptAY_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptAY"();


--
-- Name: settings simple_pg_ptAY_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptAY_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptAY"();


--
-- Name: shifts simple_pg_ptAY_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptAY_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptAY"();


--
-- Name: transactions simple_pg_ptAY_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptAY_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptAY"();


--
-- Name: categories simple_pg_ptPS_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptPS_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptPS"();


--
-- Name: items simple_pg_ptPS_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptPS_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptPS"();


--
-- Name: line_items simple_pg_ptPS_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptPS_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptPS"();


--
-- Name: settings simple_pg_ptPS_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptPS_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptPS"();


--
-- Name: shifts simple_pg_ptPS_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptPS_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptPS"();


--
-- Name: transactions simple_pg_ptPS_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ptPS_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ptPS"();


--
-- Name: categories simple_pg_pveX_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_pveX_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_pveX"();


--
-- Name: items simple_pg_pveX_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_pveX_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_pveX"();


--
-- Name: line_items simple_pg_pveX_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_pveX_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_pveX"();


--
-- Name: settings simple_pg_pveX_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_pveX_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_pveX"();


--
-- Name: shifts simple_pg_pveX_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_pveX_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_pveX"();


--
-- Name: transactions simple_pg_pveX_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_pveX_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_pveX"();


--
-- Name: categories simple_pg_q5hg_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_q5hg_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_q5hg();


--
-- Name: items simple_pg_q5hg_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_q5hg_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_q5hg();


--
-- Name: line_items simple_pg_q5hg_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_q5hg_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_q5hg();


--
-- Name: settings simple_pg_q5hg_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_q5hg_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_q5hg();


--
-- Name: shifts simple_pg_q5hg_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_q5hg_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_q5hg();


--
-- Name: transactions simple_pg_q5hg_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_q5hg_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_q5hg();


--
-- Name: categories simple_pg_qJ5t_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qJ5t_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qJ5t"();


--
-- Name: items simple_pg_qJ5t_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qJ5t_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qJ5t"();


--
-- Name: line_items simple_pg_qJ5t_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qJ5t_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qJ5t"();


--
-- Name: settings simple_pg_qJ5t_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qJ5t_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qJ5t"();


--
-- Name: shifts simple_pg_qJ5t_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qJ5t_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qJ5t"();


--
-- Name: transactions simple_pg_qJ5t_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qJ5t_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qJ5t"();


--
-- Name: categories simple_pg_qT8d_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qT8d_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qT8d"();


--
-- Name: items simple_pg_qT8d_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qT8d_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qT8d"();


--
-- Name: line_items simple_pg_qT8d_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qT8d_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qT8d"();


--
-- Name: settings simple_pg_qT8d_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qT8d_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qT8d"();


--
-- Name: shifts simple_pg_qT8d_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qT8d_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qT8d"();


--
-- Name: transactions simple_pg_qT8d_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qT8d_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qT8d"();


--
-- Name: categories simple_pg_qWHP_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qWHP_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qWHP"();


--
-- Name: discounts simple_pg_qWHP_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qWHP_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qWHP"();


--
-- Name: items simple_pg_qWHP_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qWHP_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qWHP"();


--
-- Name: line_items simple_pg_qWHP_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qWHP_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qWHP"();


--
-- Name: settings simple_pg_qWHP_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qWHP_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qWHP"();


--
-- Name: shifts simple_pg_qWHP_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qWHP_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qWHP"();


--
-- Name: transactions simple_pg_qWHP_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qWHP_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qWHP"();


--
-- Name: categories simple_pg_qZrH_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qZrH_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qZrH"();


--
-- Name: discounts simple_pg_qZrH_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qZrH_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qZrH"();


--
-- Name: items simple_pg_qZrH_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qZrH_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qZrH"();


--
-- Name: line_items simple_pg_qZrH_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qZrH_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qZrH"();


--
-- Name: settings simple_pg_qZrH_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qZrH_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qZrH"();


--
-- Name: shifts simple_pg_qZrH_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qZrH_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qZrH"();


--
-- Name: transactions simple_pg_qZrH_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qZrH_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qZrH"();


--
-- Name: categories simple_pg_qbGS_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qbGS_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qbGS"();


--
-- Name: discounts simple_pg_qbGS_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qbGS_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qbGS"();


--
-- Name: items simple_pg_qbGS_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qbGS_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qbGS"();


--
-- Name: line_items simple_pg_qbGS_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qbGS_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qbGS"();


--
-- Name: settings simple_pg_qbGS_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qbGS_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qbGS"();


--
-- Name: shifts simple_pg_qbGS_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qbGS_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qbGS"();


--
-- Name: transactions simple_pg_qbGS_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qbGS_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qbGS"();


--
-- Name: categories simple_pg_qhXw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qhXw_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qhXw"();


--
-- Name: items simple_pg_qhXw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qhXw_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qhXw"();


--
-- Name: line_items simple_pg_qhXw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qhXw_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qhXw"();


--
-- Name: settings simple_pg_qhXw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qhXw_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qhXw"();


--
-- Name: shifts simple_pg_qhXw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qhXw_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qhXw"();


--
-- Name: transactions simple_pg_qhXw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qhXw_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qhXw"();


--
-- Name: categories simple_pg_qkcX_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qkcX_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qkcX"();


--
-- Name: discounts simple_pg_qkcX_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qkcX_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qkcX"();


--
-- Name: items simple_pg_qkcX_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qkcX_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qkcX"();


--
-- Name: line_items simple_pg_qkcX_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qkcX_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qkcX"();


--
-- Name: settings simple_pg_qkcX_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qkcX_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qkcX"();


--
-- Name: shifts simple_pg_qkcX_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qkcX_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qkcX"();


--
-- Name: transactions simple_pg_qkcX_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qkcX_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qkcX"();


--
-- Name: categories simple_pg_qq66_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_qq66_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_qq66();


--
-- Name: items simple_pg_qq66_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_qq66_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_qq66();


--
-- Name: line_items simple_pg_qq66_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_qq66_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_qq66();


--
-- Name: settings simple_pg_qq66_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_qq66_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_qq66();


--
-- Name: shifts simple_pg_qq66_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_qq66_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_qq66();


--
-- Name: transactions simple_pg_qq66_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_qq66_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_qq66();


--
-- Name: categories simple_pg_qxA8_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qxA8_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qxA8"();


--
-- Name: items simple_pg_qxA8_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qxA8_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qxA8"();


--
-- Name: line_items simple_pg_qxA8_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qxA8_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qxA8"();


--
-- Name: settings simple_pg_qxA8_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qxA8_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qxA8"();


--
-- Name: shifts simple_pg_qxA8_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qxA8_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qxA8"();


--
-- Name: transactions simple_pg_qxA8_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_qxA8_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_qxA8"();


--
-- Name: categories simple_pg_r2XW_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r2XW_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r2XW"();


--
-- Name: items simple_pg_r2XW_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r2XW_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r2XW"();


--
-- Name: line_items simple_pg_r2XW_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r2XW_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r2XW"();


--
-- Name: settings simple_pg_r2XW_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r2XW_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r2XW"();


--
-- Name: shifts simple_pg_r2XW_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r2XW_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r2XW"();


--
-- Name: transactions simple_pg_r2XW_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r2XW_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r2XW"();


--
-- Name: categories simple_pg_r7Au_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r7Au_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r7Au"();


--
-- Name: items simple_pg_r7Au_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r7Au_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r7Au"();


--
-- Name: line_items simple_pg_r7Au_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r7Au_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r7Au"();


--
-- Name: settings simple_pg_r7Au_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r7Au_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r7Au"();


--
-- Name: shifts simple_pg_r7Au_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r7Au_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r7Au"();


--
-- Name: transactions simple_pg_r7Au_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_r7Au_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_r7Au"();


--
-- Name: categories simple_pg_rBNF_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rBNF_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rBNF"();


--
-- Name: items simple_pg_rBNF_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rBNF_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rBNF"();


--
-- Name: line_items simple_pg_rBNF_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rBNF_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rBNF"();


--
-- Name: settings simple_pg_rBNF_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rBNF_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rBNF"();


--
-- Name: shifts simple_pg_rBNF_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rBNF_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rBNF"();


--
-- Name: transactions simple_pg_rBNF_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rBNF_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rBNF"();


--
-- Name: categories simple_pg_rFqH_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rFqH_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rFqH"();


--
-- Name: items simple_pg_rFqH_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rFqH_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rFqH"();


--
-- Name: line_items simple_pg_rFqH_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rFqH_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rFqH"();


--
-- Name: settings simple_pg_rFqH_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rFqH_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rFqH"();


--
-- Name: shifts simple_pg_rFqH_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rFqH_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rFqH"();


--
-- Name: transactions simple_pg_rFqH_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rFqH_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rFqH"();


--
-- Name: categories simple_pg_rL5X_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rL5X_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rL5X"();


--
-- Name: items simple_pg_rL5X_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rL5X_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rL5X"();


--
-- Name: line_items simple_pg_rL5X_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rL5X_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rL5X"();


--
-- Name: settings simple_pg_rL5X_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rL5X_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rL5X"();


--
-- Name: shifts simple_pg_rL5X_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rL5X_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rL5X"();


--
-- Name: transactions simple_pg_rL5X_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rL5X_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rL5X"();


--
-- Name: categories simple_pg_rZAt_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rZAt_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rZAt"();


--
-- Name: items simple_pg_rZAt_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rZAt_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rZAt"();


--
-- Name: line_items simple_pg_rZAt_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rZAt_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rZAt"();


--
-- Name: settings simple_pg_rZAt_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rZAt_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rZAt"();


--
-- Name: shifts simple_pg_rZAt_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rZAt_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rZAt"();


--
-- Name: transactions simple_pg_rZAt_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_rZAt_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_rZAt"();


--
-- Name: categories simple_pg_reig_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_reig_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_reig();


--
-- Name: items simple_pg_reig_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_reig_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_reig();


--
-- Name: line_items simple_pg_reig_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_reig_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_reig();


--
-- Name: settings simple_pg_reig_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_reig_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_reig();


--
-- Name: shifts simple_pg_reig_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_reig_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_reig();


--
-- Name: transactions simple_pg_reig_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_reig_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_reig();


--
-- Name: categories simple_pg_rizp_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rizp_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rizp();


--
-- Name: items simple_pg_rizp_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rizp_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rizp();


--
-- Name: line_items simple_pg_rizp_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rizp_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rizp();


--
-- Name: settings simple_pg_rizp_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rizp_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rizp();


--
-- Name: shifts simple_pg_rizp_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rizp_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rizp();


--
-- Name: transactions simple_pg_rizp_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rizp_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rizp();


--
-- Name: categories simple_pg_rxs5_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rxs5_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rxs5();


--
-- Name: discounts simple_pg_rxs5_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rxs5_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rxs5();


--
-- Name: items simple_pg_rxs5_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rxs5_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rxs5();


--
-- Name: line_items simple_pg_rxs5_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rxs5_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rxs5();


--
-- Name: settings simple_pg_rxs5_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rxs5_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rxs5();


--
-- Name: shifts simple_pg_rxs5_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rxs5_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rxs5();


--
-- Name: transactions simple_pg_rxs5_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_rxs5_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_rxs5();


--
-- Name: categories simple_pg_s4av_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_s4av_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_s4av();


--
-- Name: items simple_pg_s4av_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_s4av_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_s4av();


--
-- Name: line_items simple_pg_s4av_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_s4av_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_s4av();


--
-- Name: settings simple_pg_s4av_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_s4av_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_s4av();


--
-- Name: shifts simple_pg_s4av_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_s4av_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_s4av();


--
-- Name: transactions simple_pg_s4av_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_s4av_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_s4av();


--
-- Name: categories simple_pg_sA6h_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sA6h_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sA6h"();


--
-- Name: items simple_pg_sA6h_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sA6h_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sA6h"();


--
-- Name: line_items simple_pg_sA6h_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sA6h_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sA6h"();


--
-- Name: settings simple_pg_sA6h_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sA6h_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sA6h"();


--
-- Name: shifts simple_pg_sA6h_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sA6h_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sA6h"();


--
-- Name: transactions simple_pg_sA6h_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sA6h_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sA6h"();


--
-- Name: categories simple_pg_sCAA_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sCAA_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sCAA"();


--
-- Name: discounts simple_pg_sCAA_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sCAA_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sCAA"();


--
-- Name: items simple_pg_sCAA_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sCAA_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sCAA"();


--
-- Name: line_items simple_pg_sCAA_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sCAA_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sCAA"();


--
-- Name: settings simple_pg_sCAA_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sCAA_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sCAA"();


--
-- Name: shifts simple_pg_sCAA_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sCAA_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sCAA"();


--
-- Name: transactions simple_pg_sCAA_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sCAA_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sCAA"();


--
-- Name: categories simple_pg_sECQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sECQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sECQ"();


--
-- Name: items simple_pg_sECQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sECQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sECQ"();


--
-- Name: line_items simple_pg_sECQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sECQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sECQ"();


--
-- Name: settings simple_pg_sECQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sECQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sECQ"();


--
-- Name: shifts simple_pg_sECQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sECQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sECQ"();


--
-- Name: transactions simple_pg_sECQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sECQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sECQ"();


--
-- Name: categories simple_pg_sMe5_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sMe5_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sMe5"();


--
-- Name: discounts simple_pg_sMe5_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sMe5_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sMe5"();


--
-- Name: items simple_pg_sMe5_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sMe5_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sMe5"();


--
-- Name: line_items simple_pg_sMe5_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sMe5_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sMe5"();


--
-- Name: settings simple_pg_sMe5_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sMe5_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sMe5"();


--
-- Name: shifts simple_pg_sMe5_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sMe5_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sMe5"();


--
-- Name: transactions simple_pg_sMe5_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sMe5_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sMe5"();


--
-- Name: categories simple_pg_sSXZ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sSXZ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sSXZ"();


--
-- Name: items simple_pg_sSXZ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sSXZ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sSXZ"();


--
-- Name: line_items simple_pg_sSXZ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sSXZ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sSXZ"();


--
-- Name: settings simple_pg_sSXZ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sSXZ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sSXZ"();


--
-- Name: shifts simple_pg_sSXZ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sSXZ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sSXZ"();


--
-- Name: transactions simple_pg_sSXZ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sSXZ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sSXZ"();


--
-- Name: categories simple_pg_sdCr_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sdCr_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sdCr"();


--
-- Name: items simple_pg_sdCr_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sdCr_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sdCr"();


--
-- Name: line_items simple_pg_sdCr_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_sdCr_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_sdCr"();


--
-- Name: categories simple_pg_sf39_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_sf39_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_sf39();


--
-- Name: items simple_pg_sf39_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_sf39_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_sf39();


--
-- Name: line_items simple_pg_sf39_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_sf39_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_sf39();


--
-- Name: settings simple_pg_sf39_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_sf39_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_sf39();


--
-- Name: shifts simple_pg_sf39_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_sf39_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_sf39();


--
-- Name: transactions simple_pg_sf39_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_sf39_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_sf39();


--
-- Name: categories simple_pg_shNM_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_shNM_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_shNM"();


--
-- Name: items simple_pg_shNM_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_shNM_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_shNM"();


--
-- Name: line_items simple_pg_shNM_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_shNM_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_shNM"();


--
-- Name: settings simple_pg_shNM_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_shNM_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_shNM"();


--
-- Name: shifts simple_pg_shNM_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_shNM_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_shNM"();


--
-- Name: transactions simple_pg_shNM_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_shNM_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_shNM"();


--
-- Name: categories simple_pg_soPQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_soPQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_soPQ"();


--
-- Name: discounts simple_pg_soPQ_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_soPQ_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_soPQ"();


--
-- Name: items simple_pg_soPQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_soPQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_soPQ"();


--
-- Name: line_items simple_pg_soPQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_soPQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_soPQ"();


--
-- Name: settings simple_pg_soPQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_soPQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_soPQ"();


--
-- Name: shifts simple_pg_soPQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_soPQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_soPQ"();


--
-- Name: transactions simple_pg_soPQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_soPQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_soPQ"();


--
-- Name: categories simple_pg_ssQ2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ssQ2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ssQ2"();


--
-- Name: items simple_pg_ssQ2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ssQ2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ssQ2"();


--
-- Name: line_items simple_pg_ssQ2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ssQ2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ssQ2"();


--
-- Name: settings simple_pg_ssQ2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ssQ2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ssQ2"();


--
-- Name: shifts simple_pg_ssQ2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ssQ2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ssQ2"();


--
-- Name: transactions simple_pg_ssQ2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ssQ2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ssQ2"();


--
-- Name: categories simple_pg_t3uy_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t3uy_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t3uy();


--
-- Name: items simple_pg_t3uy_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t3uy_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t3uy();


--
-- Name: line_items simple_pg_t3uy_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t3uy_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t3uy();


--
-- Name: categories simple_pg_t5jw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t5jw_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t5jw();


--
-- Name: discounts simple_pg_t5jw_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t5jw_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t5jw();


--
-- Name: items simple_pg_t5jw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t5jw_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t5jw();


--
-- Name: line_items simple_pg_t5jw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t5jw_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t5jw();


--
-- Name: settings simple_pg_t5jw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t5jw_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t5jw();


--
-- Name: shifts simple_pg_t5jw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t5jw_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t5jw();


--
-- Name: transactions simple_pg_t5jw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t5jw_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t5jw();


--
-- Name: categories simple_pg_t87s_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t87s_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t87s();


--
-- Name: items simple_pg_t87s_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t87s_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t87s();


--
-- Name: line_items simple_pg_t87s_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t87s_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t87s();


--
-- Name: settings simple_pg_t87s_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t87s_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t87s();


--
-- Name: shifts simple_pg_t87s_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t87s_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t87s();


--
-- Name: transactions simple_pg_t87s_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_t87s_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_t87s();


--
-- Name: categories simple_pg_tMnt_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tMnt_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tMnt"();


--
-- Name: items simple_pg_tMnt_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tMnt_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tMnt"();


--
-- Name: line_items simple_pg_tMnt_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tMnt_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tMnt"();


--
-- Name: settings simple_pg_tMnt_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tMnt_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tMnt"();


--
-- Name: shifts simple_pg_tMnt_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tMnt_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tMnt"();


--
-- Name: transactions simple_pg_tMnt_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tMnt_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tMnt"();


--
-- Name: categories simple_pg_tT2L_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tT2L_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tT2L"();


--
-- Name: items simple_pg_tT2L_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tT2L_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tT2L"();


--
-- Name: line_items simple_pg_tT2L_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tT2L_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tT2L"();


--
-- Name: settings simple_pg_tT2L_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tT2L_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tT2L"();


--
-- Name: shifts simple_pg_tT2L_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tT2L_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tT2L"();


--
-- Name: transactions simple_pg_tT2L_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tT2L_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tT2L"();


--
-- Name: categories simple_pg_tb45_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_tb45_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_tb45();


--
-- Name: items simple_pg_tb45_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_tb45_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_tb45();


--
-- Name: line_items simple_pg_tb45_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_tb45_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_tb45();


--
-- Name: settings simple_pg_tb45_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_tb45_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_tb45();


--
-- Name: shifts simple_pg_tb45_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_tb45_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_tb45();


--
-- Name: transactions simple_pg_tb45_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_tb45_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_tb45();


--
-- Name: categories simple_pg_tbM6_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tbM6_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tbM6"();


--
-- Name: items simple_pg_tbM6_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tbM6_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tbM6"();


--
-- Name: line_items simple_pg_tbM6_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tbM6_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tbM6"();


--
-- Name: settings simple_pg_tbM6_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tbM6_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tbM6"();


--
-- Name: shifts simple_pg_tbM6_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tbM6_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tbM6"();


--
-- Name: transactions simple_pg_tbM6_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tbM6_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tbM6"();


--
-- Name: categories simple_pg_tmiL_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tmiL_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tmiL"();


--
-- Name: discounts simple_pg_tmiL_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tmiL_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tmiL"();


--
-- Name: items simple_pg_tmiL_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tmiL_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tmiL"();


--
-- Name: line_items simple_pg_tmiL_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tmiL_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tmiL"();


--
-- Name: settings simple_pg_tmiL_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tmiL_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tmiL"();


--
-- Name: shifts simple_pg_tmiL_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tmiL_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tmiL"();


--
-- Name: transactions simple_pg_tmiL_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_tmiL_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_tmiL"();


--
-- Name: categories simple_pg_uMbk_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uMbk_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uMbk"();


--
-- Name: items simple_pg_uMbk_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uMbk_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uMbk"();


--
-- Name: line_items simple_pg_uMbk_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uMbk_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uMbk"();


--
-- Name: settings simple_pg_uMbk_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uMbk_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uMbk"();


--
-- Name: shifts simple_pg_uMbk_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uMbk_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uMbk"();


--
-- Name: transactions simple_pg_uMbk_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uMbk_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uMbk"();


--
-- Name: categories simple_pg_un6W_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_un6W_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_un6W"();


--
-- Name: items simple_pg_un6W_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_un6W_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_un6W"();


--
-- Name: line_items simple_pg_un6W_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_un6W_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_un6W"();


--
-- Name: settings simple_pg_un6W_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_un6W_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_un6W"();


--
-- Name: shifts simple_pg_un6W_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_un6W_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_un6W"();


--
-- Name: transactions simple_pg_un6W_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_un6W_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_un6W"();


--
-- Name: categories simple_pg_un8y_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_un8y_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_un8y();


--
-- Name: discounts simple_pg_un8y_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_un8y_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_un8y();


--
-- Name: items simple_pg_un8y_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_un8y_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_un8y();


--
-- Name: line_items simple_pg_un8y_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_un8y_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_un8y();


--
-- Name: settings simple_pg_un8y_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_un8y_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_un8y();


--
-- Name: shifts simple_pg_un8y_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_un8y_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_un8y();


--
-- Name: transactions simple_pg_un8y_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_un8y_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_un8y();


--
-- Name: categories simple_pg_uqwe_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_uqwe_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_uqwe();


--
-- Name: items simple_pg_uqwe_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_uqwe_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_uqwe();


--
-- Name: line_items simple_pg_uqwe_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_uqwe_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_uqwe();


--
-- Name: settings simple_pg_uqwe_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_uqwe_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_uqwe();


--
-- Name: shifts simple_pg_uqwe_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_uqwe_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_uqwe();


--
-- Name: transactions simple_pg_uqwe_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_uqwe_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_uqwe();


--
-- Name: categories simple_pg_uvXZ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uvXZ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uvXZ"();


--
-- Name: items simple_pg_uvXZ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uvXZ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uvXZ"();


--
-- Name: line_items simple_pg_uvXZ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uvXZ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uvXZ"();


--
-- Name: settings simple_pg_uvXZ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uvXZ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uvXZ"();


--
-- Name: shifts simple_pg_uvXZ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uvXZ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uvXZ"();


--
-- Name: transactions simple_pg_uvXZ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uvXZ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uvXZ"();


--
-- Name: categories simple_pg_uvYE_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uvYE_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uvYE"();


--
-- Name: items simple_pg_uvYE_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_uvYE_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_uvYE"();


--
-- Name: categories simple_pg_v3hk_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_v3hk_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_v3hk();


--
-- Name: items simple_pg_v3hk_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_v3hk_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_v3hk();


--
-- Name: line_items simple_pg_v3hk_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_v3hk_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_v3hk();


--
-- Name: settings simple_pg_v3hk_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_v3hk_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_v3hk();


--
-- Name: shifts simple_pg_v3hk_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_v3hk_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_v3hk();


--
-- Name: transactions simple_pg_v3hk_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_v3hk_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_v3hk();


--
-- Name: categories simple_pg_vFYB_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vFYB_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vFYB"();


--
-- Name: discounts simple_pg_vFYB_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vFYB_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vFYB"();


--
-- Name: items simple_pg_vFYB_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vFYB_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vFYB"();


--
-- Name: line_items simple_pg_vFYB_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vFYB_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vFYB"();


--
-- Name: settings simple_pg_vFYB_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vFYB_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vFYB"();


--
-- Name: shifts simple_pg_vFYB_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vFYB_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vFYB"();


--
-- Name: transactions simple_pg_vFYB_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vFYB_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vFYB"();


--
-- Name: categories simple_pg_vN3P_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vN3P_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vN3P"();


--
-- Name: discounts simple_pg_vN3P_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vN3P_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vN3P"();


--
-- Name: items simple_pg_vN3P_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vN3P_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vN3P"();


--
-- Name: line_items simple_pg_vN3P_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vN3P_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vN3P"();


--
-- Name: settings simple_pg_vN3P_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vN3P_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vN3P"();


--
-- Name: shifts simple_pg_vN3P_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vN3P_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vN3P"();


--
-- Name: transactions simple_pg_vN3P_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_vN3P_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_vN3P"();


--
-- Name: categories simple_pg_wEGD_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wEGD_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wEGD"();


--
-- Name: items simple_pg_wEGD_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wEGD_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wEGD"();


--
-- Name: line_items simple_pg_wEGD_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wEGD_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wEGD"();


--
-- Name: settings simple_pg_wEGD_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wEGD_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wEGD"();


--
-- Name: shifts simple_pg_wEGD_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wEGD_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wEGD"();


--
-- Name: transactions simple_pg_wEGD_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wEGD_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wEGD"();


--
-- Name: categories simple_pg_wJQT_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wJQT_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wJQT"();


--
-- Name: items simple_pg_wJQT_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wJQT_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wJQT"();


--
-- Name: line_items simple_pg_wJQT_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wJQT_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wJQT"();


--
-- Name: settings simple_pg_wJQT_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wJQT_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wJQT"();


--
-- Name: shifts simple_pg_wJQT_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wJQT_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wJQT"();


--
-- Name: transactions simple_pg_wJQT_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wJQT_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wJQT"();


--
-- Name: categories simple_pg_wQ6G_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wQ6G_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wQ6G"();


--
-- Name: discounts simple_pg_wQ6G_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wQ6G_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wQ6G"();


--
-- Name: items simple_pg_wQ6G_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wQ6G_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wQ6G"();


--
-- Name: line_items simple_pg_wQ6G_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wQ6G_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wQ6G"();


--
-- Name: settings simple_pg_wQ6G_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wQ6G_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wQ6G"();


--
-- Name: shifts simple_pg_wQ6G_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wQ6G_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wQ6G"();


--
-- Name: transactions simple_pg_wQ6G_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wQ6G_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wQ6G"();


--
-- Name: categories simple_pg_wWqT_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wWqT_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wWqT"();


--
-- Name: discounts simple_pg_wWqT_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wWqT_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wWqT"();


--
-- Name: items simple_pg_wWqT_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wWqT_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wWqT"();


--
-- Name: line_items simple_pg_wWqT_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wWqT_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wWqT"();


--
-- Name: settings simple_pg_wWqT_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wWqT_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wWqT"();


--
-- Name: shifts simple_pg_wWqT_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wWqT_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wWqT"();


--
-- Name: transactions simple_pg_wWqT_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wWqT_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wWqT"();


--
-- Name: categories simple_pg_wZD2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wZD2_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wZD2"();


--
-- Name: items simple_pg_wZD2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wZD2_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wZD2"();


--
-- Name: line_items simple_pg_wZD2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wZD2_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wZD2"();


--
-- Name: settings simple_pg_wZD2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wZD2_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wZD2"();


--
-- Name: shifts simple_pg_wZD2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wZD2_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wZD2"();


--
-- Name: transactions simple_pg_wZD2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wZD2_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wZD2"();


--
-- Name: categories simple_pg_wcGg_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wcGg_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wcGg"();


--
-- Name: items simple_pg_wcGg_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wcGg_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wcGg"();


--
-- Name: line_items simple_pg_wcGg_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wcGg_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wcGg"();


--
-- Name: settings simple_pg_wcGg_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wcGg_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wcGg"();


--
-- Name: shifts simple_pg_wcGg_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wcGg_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wcGg"();


--
-- Name: transactions simple_pg_wcGg_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_wcGg_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_wcGg"();


--
-- Name: categories simple_pg_wdig_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wdig_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wdig();


--
-- Name: items simple_pg_wdig_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wdig_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wdig();


--
-- Name: line_items simple_pg_wdig_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wdig_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wdig();


--
-- Name: settings simple_pg_wdig_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wdig_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wdig();


--
-- Name: shifts simple_pg_wdig_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wdig_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wdig();


--
-- Name: transactions simple_pg_wdig_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wdig_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wdig();


--
-- Name: categories simple_pg_wy98_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wy98_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wy98();


--
-- Name: items simple_pg_wy98_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wy98_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wy98();


--
-- Name: line_items simple_pg_wy98_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wy98_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wy98();


--
-- Name: settings simple_pg_wy98_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wy98_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wy98();


--
-- Name: shifts simple_pg_wy98_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wy98_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wy98();


--
-- Name: transactions simple_pg_wy98_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_wy98_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_wy98();


--
-- Name: categories simple_pg_x2v2_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_x2v2_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_x2v2();


--
-- Name: discounts simple_pg_x2v2_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_x2v2_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_x2v2();


--
-- Name: items simple_pg_x2v2_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_x2v2_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_x2v2();


--
-- Name: line_items simple_pg_x2v2_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_x2v2_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_x2v2();


--
-- Name: settings simple_pg_x2v2_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_x2v2_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_x2v2();


--
-- Name: shifts simple_pg_x2v2_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_x2v2_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_x2v2();


--
-- Name: transactions simple_pg_x2v2_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_x2v2_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_x2v2();


--
-- Name: categories simple_pg_xKGN_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xKGN_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xKGN"();


--
-- Name: items simple_pg_xKGN_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xKGN_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xKGN"();


--
-- Name: line_items simple_pg_xKGN_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xKGN_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xKGN"();


--
-- Name: settings simple_pg_xKGN_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xKGN_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xKGN"();


--
-- Name: shifts simple_pg_xKGN_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xKGN_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xKGN"();


--
-- Name: transactions simple_pg_xKGN_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xKGN_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xKGN"();


--
-- Name: categories simple_pg_xch3_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xch3_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xch3();


--
-- Name: discounts simple_pg_xch3_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xch3_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xch3();


--
-- Name: items simple_pg_xch3_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xch3_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xch3();


--
-- Name: line_items simple_pg_xch3_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xch3_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xch3();


--
-- Name: settings simple_pg_xch3_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xch3_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xch3();


--
-- Name: shifts simple_pg_xch3_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xch3_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xch3();


--
-- Name: transactions simple_pg_xch3_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xch3_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xch3();


--
-- Name: categories simple_pg_xjob_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xjob_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xjob();


--
-- Name: discounts simple_pg_xjob_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xjob_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xjob();


--
-- Name: items simple_pg_xjob_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xjob_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xjob();


--
-- Name: line_items simple_pg_xjob_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xjob_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xjob();


--
-- Name: settings simple_pg_xjob_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xjob_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xjob();


--
-- Name: shifts simple_pg_xjob_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xjob_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xjob();


--
-- Name: transactions simple_pg_xjob_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xjob_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xjob();


--
-- Name: categories simple_pg_xsmk_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xsmk_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xsmk();


--
-- Name: items simple_pg_xsmk_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xsmk_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xsmk();


--
-- Name: line_items simple_pg_xsmk_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xsmk_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xsmk();


--
-- Name: settings simple_pg_xsmk_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xsmk_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xsmk();


--
-- Name: shifts simple_pg_xsmk_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xsmk_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xsmk();


--
-- Name: transactions simple_pg_xsmk_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_xsmk_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_xsmk();


--
-- Name: categories simple_pg_xumC_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xumC_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xumC"();


--
-- Name: items simple_pg_xumC_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xumC_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xumC"();


--
-- Name: line_items simple_pg_xumC_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xumC_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xumC"();


--
-- Name: settings simple_pg_xumC_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xumC_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xumC"();


--
-- Name: shifts simple_pg_xumC_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xumC_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xumC"();


--
-- Name: transactions simple_pg_xumC_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xumC_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xumC"();


--
-- Name: categories simple_pg_xy2F_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xy2F_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xy2F"();


--
-- Name: discounts simple_pg_xy2F_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xy2F_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xy2F"();


--
-- Name: items simple_pg_xy2F_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xy2F_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xy2F"();


--
-- Name: line_items simple_pg_xy2F_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xy2F_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xy2F"();


--
-- Name: settings simple_pg_xy2F_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xy2F_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xy2F"();


--
-- Name: shifts simple_pg_xy2F_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xy2F_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xy2F"();


--
-- Name: transactions simple_pg_xy2F_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_xy2F_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_xy2F"();


--
-- Name: categories simple_pg_yNPj_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yNPj_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yNPj"();


--
-- Name: items simple_pg_yNPj_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yNPj_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yNPj"();


--
-- Name: line_items simple_pg_yNPj_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yNPj_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yNPj"();


--
-- Name: settings simple_pg_yNPj_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yNPj_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yNPj"();


--
-- Name: shifts simple_pg_yNPj_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yNPj_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yNPj"();


--
-- Name: transactions simple_pg_yNPj_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yNPj_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yNPj"();


--
-- Name: categories simple_pg_ySDR_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ySDR_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ySDR"();


--
-- Name: discounts simple_pg_ySDR_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ySDR_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ySDR"();


--
-- Name: items simple_pg_ySDR_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ySDR_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ySDR"();


--
-- Name: line_items simple_pg_ySDR_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ySDR_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ySDR"();


--
-- Name: settings simple_pg_ySDR_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ySDR_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ySDR"();


--
-- Name: shifts simple_pg_ySDR_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ySDR_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ySDR"();


--
-- Name: transactions simple_pg_ySDR_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_ySDR_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_ySDR"();


--
-- Name: categories simple_pg_yfZw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yfZw_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yfZw"();


--
-- Name: items simple_pg_yfZw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yfZw_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yfZw"();


--
-- Name: line_items simple_pg_yfZw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yfZw_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yfZw"();


--
-- Name: settings simple_pg_yfZw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yfZw_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yfZw"();


--
-- Name: shifts simple_pg_yfZw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yfZw_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yfZw"();


--
-- Name: transactions simple_pg_yfZw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yfZw_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yfZw"();


--
-- Name: categories simple_pg_yrhQ_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yrhQ_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yrhQ"();


--
-- Name: items simple_pg_yrhQ_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yrhQ_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yrhQ"();


--
-- Name: line_items simple_pg_yrhQ_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yrhQ_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yrhQ"();


--
-- Name: settings simple_pg_yrhQ_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yrhQ_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yrhQ"();


--
-- Name: shifts simple_pg_yrhQ_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yrhQ_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yrhQ"();


--
-- Name: transactions simple_pg_yrhQ_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_yrhQ_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_yrhQ"();


--
-- Name: categories simple_pg_z22a_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_z22a_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_z22a();


--
-- Name: discounts simple_pg_z22a_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_z22a_discounts AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_z22a();


--
-- Name: items simple_pg_z22a_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_z22a_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_z22a();


--
-- Name: line_items simple_pg_z22a_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_z22a_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_z22a();


--
-- Name: settings simple_pg_z22a_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_z22a_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_z22a();


--
-- Name: shifts simple_pg_z22a_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_z22a_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_z22a();


--
-- Name: transactions simple_pg_z22a_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_z22a_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_z22a();


--
-- Name: categories simple_pg_zAtC_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zAtC_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zAtC"();


--
-- Name: items simple_pg_zAtC_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zAtC_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zAtC"();


--
-- Name: line_items simple_pg_zAtC_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zAtC_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zAtC"();


--
-- Name: settings simple_pg_zAtC_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zAtC_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zAtC"();


--
-- Name: shifts simple_pg_zAtC_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zAtC_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zAtC"();


--
-- Name: transactions simple_pg_zAtC_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zAtC_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zAtC"();


--
-- Name: categories simple_pg_zWCR_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zWCR_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zWCR"();


--
-- Name: items simple_pg_zWCR_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zWCR_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zWCR"();


--
-- Name: line_items simple_pg_zWCR_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zWCR_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zWCR"();


--
-- Name: settings simple_pg_zWCR_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zWCR_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zWCR"();


--
-- Name: shifts simple_pg_zWCR_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zWCR_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zWCR"();


--
-- Name: transactions simple_pg_zWCR_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zWCR_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zWCR"();


--
-- Name: categories simple_pg_zaXq_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zaXq_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zaXq"();


--
-- Name: items simple_pg_zaXq_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zaXq_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zaXq"();


--
-- Name: line_items simple_pg_zaXq_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zaXq_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zaXq"();


--
-- Name: settings simple_pg_zaXq_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zaXq_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zaXq"();


--
-- Name: shifts simple_pg_zaXq_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zaXq_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zaXq"();


--
-- Name: transactions simple_pg_zaXq_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zaXq_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zaXq"();


--
-- Name: categories simple_pg_zey8_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_zey8_categories AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_zey8();


--
-- Name: items simple_pg_zey8_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_zey8_items AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_zey8();


--
-- Name: line_items simple_pg_zey8_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_zey8_line_items AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_zey8();


--
-- Name: settings simple_pg_zey8_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_zey8_settings AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_zey8();


--
-- Name: shifts simple_pg_zey8_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_zey8_shifts AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_zey8();


--
-- Name: transactions simple_pg_zey8_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER simple_pg_zey8_transactions AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE livequery_simple_pg_zey8();


--
-- Name: categories simple_pg_zfDM_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zfDM_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zfDM"();


--
-- Name: items simple_pg_zfDM_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zfDM_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zfDM"();


--
-- Name: line_items simple_pg_zfDM_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zfDM_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zfDM"();


--
-- Name: settings simple_pg_zfDM_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zfDM_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zfDM"();


--
-- Name: shifts simple_pg_zfDM_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zfDM_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zfDM"();


--
-- Name: transactions simple_pg_zfDM_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zfDM_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zfDM"();


--
-- Name: categories simple_pg_znBk_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_znBk_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_znBk"();


--
-- Name: discounts simple_pg_znBk_discounts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_znBk_discounts" AFTER INSERT OR DELETE OR UPDATE ON discounts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_znBk"();


--
-- Name: items simple_pg_znBk_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_znBk_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_znBk"();


--
-- Name: line_items simple_pg_znBk_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_znBk_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_znBk"();


--
-- Name: settings simple_pg_znBk_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_znBk_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_znBk"();


--
-- Name: shifts simple_pg_znBk_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_znBk_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_znBk"();


--
-- Name: transactions simple_pg_znBk_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_znBk_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_znBk"();


--
-- Name: categories simple_pg_zqGw_categories; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zqGw_categories" AFTER INSERT OR DELETE OR UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zqGw"();


--
-- Name: items simple_pg_zqGw_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zqGw_items" AFTER INSERT OR DELETE OR UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zqGw"();


--
-- Name: line_items simple_pg_zqGw_line_items; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zqGw_line_items" AFTER INSERT OR DELETE OR UPDATE ON line_items FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zqGw"();


--
-- Name: settings simple_pg_zqGw_settings; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zqGw_settings" AFTER INSERT OR DELETE OR UPDATE ON settings FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zqGw"();


--
-- Name: shifts simple_pg_zqGw_shifts; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zqGw_shifts" AFTER INSERT OR DELETE OR UPDATE ON shifts FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zqGw"();


--
-- Name: transactions simple_pg_zqGw_transactions; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER "simple_pg_zqGw_transactions" AFTER INSERT OR DELETE OR UPDATE ON transactions FOR EACH ROW EXECUTE PROCEDURE "livequery_simple_pg_zqGw"();


--
-- Name: items items_category_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY items
    ADD CONSTRAINT items_category_id_foreign FOREIGN KEY (category_id) REFERENCES categories(id);


--
-- Name: line_items line_items_item_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY line_items
    ADD CONSTRAINT line_items_item_id_foreign FOREIGN KEY (item_id) REFERENCES items(id);


--
-- Name: line_items line_items_transaction_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY line_items
    ADD CONSTRAINT line_items_transaction_id_foreign FOREIGN KEY (transaction_id) REFERENCES transactions(id);


--
-- Name: supplies supplies_item_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supplies
    ADD CONSTRAINT supplies_item_id_foreign FOREIGN KEY (item_id) REFERENCES items(id);


--
-- Name: supplies supplies_supplier_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supplies
    ADD CONSTRAINT supplies_supplier_id_foreign FOREIGN KEY (supplier_id) REFERENCES suppliers(id);


--
-- Name: transactions transactions_shift_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY transactions
    ADD CONSTRAINT transactions_shift_id_foreign FOREIGN KEY (shift_id) REFERENCES shifts(id);


--
-- PostgreSQL database dump complete
--

